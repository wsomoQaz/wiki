--[==[ --- -- -
      ☆ =/-☆-/= ☆
	              .                                            oooo                    .oooo.   
	            .o8                                            `888                  .dP""Y88b  
	 .ooooo.  .o888oo  .ooooo.  oooo d8b ooo. .oo.    .oooo.    888      oooo    ooo       ]8P' 
	d88' `88b   888   d88' `88b `888""8P `888P"Y88b  `P  )88b   888       `88.  .8'      .d8P'  
	888ooo888   888   888ooo888  888      888   888   .oP"888   888        `88..8'     .dP'     
	888    .o   888 . 888    .o  888      888   888  d8(  888   888         `888'    .oP     .o 
	`Y8bod8P'   "888" `Y8bod8P' d888b    o888o o888o `Y888""8o o888o         `8'     8888888888
	
    
	Сладкий сурс и я на verm'е, хоу
	Эта сука пастит, хоу
	Я вчера был занят, хоу
	Я вчера был пастерком (What? What? What? Йоу-йоу, пау)
	Пахнешь как pastebin (Coco, е)
	Любишь этот MoonSec, хоу (Пр-р)
	Любишь, как пахнет сурсик (Ага-ага, what?)
	Любишь, как пахнет сурсик (Сурсик)
	Хочешь пастить со мною, хоу? (Ха, ву)
	Реверсим мунсек, сука, мы пастим свимхаб
	(Swim is a rockstar)

	Модный пастерок (Блядь), в био тег Lua (Да)
	StarHook, SwimHub, BloxSense (BloxSense), MoonSec, не v3 (v3)
	Пастит как надо (Надо), пастит как сука (Сука)
	Она пастит два хаба (Хаба), обфает luraph'ом, да (Ре)
	Модный пастерок (Блядь), в био тег Lua (Да)
	StarHook, SwimHub, BloxSense (BloxSense), MoonSec, не v3 (v3)
	Пастит как надо (Надо), пастит как сука (Сука)
	Она пастит два хаба (Хаба), обфает luraph'ом, да (Ре)

	Сильно мажет (Мажет), мажет меня (Сурс), этот сурсик (source code)
	Мы на (Мы на) верме (Верме-верме), сушим этот pastebin (Паста)
	Сурсы роллит, ESP пастит, сука, много пасты (Паста-паста)
	Она меня хочет, я простой пастер (Да-да-да-да)
	Она хочет этот ESP, хочет этот сурсик (Сурсик, да)
	Гетаю сурсик вечно пастерком (Пастерком)
	Вечно пастерком гетаю сурсик (Пау-пау; сурсик)
	Пастю этот сурс, и я бог luau
	See upcoming paste releases
	Get tickets for your favorite pasters
	You might also like
	Lancet.net
	Zylo Hub
	Celestial
	
	Модный пастерок (Блядь), в био тег Lua (Да)
	StarHook, SwimHub, BloxSense (BloxSense), MoonSec, не v3 (v3)
	Пастит как надо (Надо), пастит как сука (Сука)
	Она пастит два хаба (Хаба), обфает luraph'ом, да (Ре)
	Модный пастерок (Блядь), в био тег Lua (Да)
	StarHook, SwimHub, BloxSense (BloxSense), MoonSec, не v3 (v3)
	Пастит как надо (Надо), пастит как сука (Сука)
	Она пастит два хаба (Хаба), обфает luraph'ом, да (Ре)

	Swim is a rockstar

  ☆ =/-☆-/= ☆
]==]-- --- -- -

local function unhook()
	local to_call = getgenv().eternal_unhook;
	if (not to_call) then return; end;

	local failed, reason = pcall(to_call);
	if (not failed) then
		warn('unhook failed :: ' .. reason);
	end;
end; unhook();

local connections = {};
local unhooked;
local is_developer;

local roblox = game;
local server = 'https://eternalexploits.pythonanywhere.com/';

local core = cloneref(roblox:GetService('CoreGui'));
local run = cloneref(roblox:GetService('RunService'));
local players = cloneref(roblox:GetService('Players'));
local guis = cloneref(roblox:GetService('GuiService'));
local http = cloneref(roblox:GetService('HttpService'));
local lighting = cloneref(roblox:GetService('Lighting'));
local tween = cloneref(roblox:GetService('TweenService'));
local sound = cloneref(roblox:GetService('SoundService'));
local tps = cloneref(roblox:GetService('TeleportService'));
local uis = cloneref(roblox:GetService('UserInputService'));
local first = cloneref(roblox:GetService('ReplicatedFirst'));
local textchat = cloneref(roblox:GetService('TextChatService'));
local storage = cloneref(roblox:GetService('ReplicatedStorage'));
local analytics = cloneref(roblox:GetService('RbxAnalyticsService'));
local marketplace = cloneref(roblox:GetService('MarketplaceService'));

local camera = workspace.CurrentCamera;
local client = players.LocalPlayer;
local backpack = client.Backpack;
local mouse = client:GetMouse();

-- ☆ //   luraph check   // ☆ --

if (not LPH_OBFUSCATED) then
    LPH_JIT           = function(...) return ... end;
    LPH_JIT_MAX       = function(...) return ... end;
    LPH_NO_VIRTUALIZE = function(...) return ... end;
    LPH_NO_UPVALUES   = function(_) return(function(...) return _(...) end); end;
    LPH_ENCSTR        = function(...) return ... end;
    LPH_ENCNUM        = function(...) return ... end;
    LPH_CRASH         = function() return print(debug.traceback()) end;

	is_developer = true;
	script_key = '';
end;

-- ☆ //   goodbye__index  // ☆ --

local tick = tick;
local os_clock = os.clock;
local os_time = os.time;

local fdefer = task.defer;
local fcancel = task.cancel;
local fwait = task.wait;
local fdesynchronize = task.desynchronize;
local fsynchronize = task.synchronize;
local fdelay = task.delay;
local fspawn = task.spawn;

local draw = Instance.new;

local ray_new = Ray.new;
local raycastparams_new = RaycastParams.new;

local tweeninfo_new = TweenInfo.new;

local numbersequence_new = NumberSequence.new;
local numbersequencekeypoint_new = NumberSequenceKeypoint.new;

local colorsequence_new = ColorSequence.new;
local colorsequencekeypoint_new = ColorSequenceKeypoint.new;

local cframe_identity = CFrame.identity;
local cframe_angles = CFrame.Angles;
local cframe_fromeuleranglesyxz = CFrame.fromEulerAnglesYXZ;
local cframe_fromrotationbetweenvectors = CFrame.fromRotationBetweenVectors;
local cframe_lookalong = CFrame.lookAlong;
local cframe_fromorientation = CFrame.fromOrientation;
local cframe_frommatrix = CFrame.fromMatrix;
local cframe_fromeuleranglesxyz = CFrame.fromEulerAnglesXYZ;
local cframe_fromeulerangles = CFrame.fromEulerAngles;
local cframe_lookat = CFrame.lookAt;
local cframe_fromaxisangle = CFrame.fromAxisAngle;
local cframe_new = CFrame.new;

local color3_fromhex = Color3.fromHex;
local color3_fromhsv = Color3.fromHSV;
local color3_tohsv = Color3.toHSV;
local color3_fromrgb = Color3.fromRGB;
local color3_new = Color3.new;

local vector3_fromnormalid = Vector3.fromNormalId;
local vector3_xaxis = Vector3.xAxis;
local vector3_zero = Vector3.zero;
local vector3_zero_min = vector3_zero.Min;
local vector3_zero_max = vector3_zero.Min;
local vector3_max = Vector3.max;
local vector3_min = Vector3.min;
local vector3_fromaxis = Vector3.fromAxis;
local vector3_zaxis = Vector3.zAxis;
local vector3_fromaxis = Vector3.FromAxis;
local vector3_one = Vector3.one;
local vector3_fromnormalid = Vector3.FromNormalId;
local vector3_yaxis = Vector3.yAxis;
local vector3_new = Vector3.new;

local udim2_fromoffset = UDim2.fromOffset;
local udim2_fromscale = UDim2.fromScale;
local udim2_new = UDim2.new;

local udim_new = UDim.new;

local vector2_min = Vector2.min;
local vector2_xaxis = Vector2.xAxis;
local vector2_zero = Vector2.zero;
local vector2_max = Vector2.max;
local vector2_one = Vector2.one;
local vector2_yaxis = Vector2.yAxis;
local vector2_new = Vector2.new;

local math_rad = math.rad;
local math_cosh = math.cosh;
local math_round = math.round;
local math_random = math.random;
local math_floor = math.floor;
local math_max = math.max;
local math_huge = math.huge;
local math_atan = math.atan;
local math_tan = math.tan;
local math_cos = math.cos;
local math_pi = math.pi;
local math_abs = math.abs;
local math_clamp = math.clamp;
local math_min = math.min;
local math_deg = math.deg;
local math_atan2 = math.atan2;
local math_sin = math.sin;
local math_asin = math.asin;

local string_split = string.split;
local string_lower = string.lower;
local string_upper = string.upper;
local string_sub = string.sub;
local string_gsub = string.gsub;
local string_gmatch = string.gmatch;
local string_find = string.find;
local string_char = string.char;
local string_reverse = string.reverse;
local string_byte = string.byte;

local table_insert = table.insert;
local table_create = table.create;
local table_clone = table.clone;
local table_find = table.find;
local table_remove = table.remove;
local table_clear = table.clear;
local table_freeze = table.freeze;

local debug = (typeof(debug) == 'table' and debug or {});
local debug_getupvalue = debug.getupvalue;
local debug_setupvalue = debug.setupvalue;
local debug_getinfo = debug.getinfo;

-- ☆ //   loader   // ☆ --

local games = {

    ['Universal'] = {
        place_ids = {};
        type = 'universal';
        folders = {};
        data = {};
    };

    -- ☆ //   tycoon   // ☆ --

    ['Oaklands'] = {
        place_ids = {9938675423};
		dev_only = true;
        type = 'tycoon';
        folders = {};
        data = {};
    };

    ['Refinery Caves 2'] = {
        place_ids = {12196278347};
        type = 'tycoon';
        folders = {'wire arts'};
        data = {
            search_positions  = {{1874; 3; -199}; {1859; 3; -183}};
        };
    };

    -- ☆ //   fps   // ☆ --

    ['Counter Blox'] = {
        place_ids = {301549746; 1869597719; 1480424328};
        type = 'fps';
        folders = {};
        data = {};
    };

	['Phantom Forces'] = {
        place_ids = {292439477};
        type = 'fps';
        folders = {};
        data = {};
    };

    -- ☆ //   survival   // ☆ --

    ['Lone Survival'] = {
        place_ids = {13559584718; 13800223141};
		dev_only = true;
        type = 'survival';
        folders = {};
        data = {};
    };
    
    ['Trident Survival'] = {
        place_ids = {13253735473};
		dev_only = true;
        type = 'survival';
        folders = {};
        data = {};
    };
};

local game;
for name, data in games do
    data.name = name;

    for _, id in data.place_ids do
        if (id == roblox.PlaceId) then
            if (data.dev_only and not is_developer) then
                continue;
            end;

            game = data;
        end;
    end;
end;

if (not game) then
    game = games.Universal;
end;

local loader, launch_eternal; LPH_NO_VIRTUALIZE(function()
	local tweeninfo = tweeninfo_new(0.45, Enum.EasingStyle.Circular);

	local function round(instance, scale, offset)
		local rounder = draw('UICorner');
		
		rounder.CornerRadius = udim_new(scale or 0, offset or 0);
		rounder.Parent = instance;
	end;

	local function make_bold_text(label)
		local face = label.FontFace;
		
		face.Weight = Enum.FontWeight.Bold;
		label.FontFace = face;
	end;
	
	local auth_done;
	local loaded;
	
	local screen = draw('ScreenGui');
	local main_frame = draw('Frame');
	local UICorner = draw('UICorner');
	local icon = draw('ImageLabel');
	local UIGradient = draw('UIGradient');
	local TextButton = draw('TextButton');
	local ImageLabel_2 = draw('ImageLabel');
	local UIGradient_2 = draw('UIGradient');
	local Frame_3 = draw('Frame');
	local UICorner_3 = draw('UICorner');
	local UIGradient_4 = draw('UIGradient');
	local Frame_4 = draw('Frame');
	local UICorner_4 = draw('UICorner');
	local UIGradient_5 = draw('UIGradient');
	local TextLabela = draw('TextLabel')
	local TextButtona = draw('TextButton')
	local UICornera = draw('UICorner')
	local ImageLabela = draw('ImageLabel')
	local ScrollingFramea = draw('ScrollingFrame')
	local updates_layout = draw('UIListLayout');

	TextLabela.Parent = main_frame
	TextLabela.Visible = false;
	TextLabela.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TextLabela.BackgroundTransparency = 1.000
	TextLabela.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TextLabela.BorderSizePixel = 0
	TextLabela.Position = UDim2.new(0, 0, 0.129129171, -25)
	TextLabela.Size = UDim2.new(1, 0, -0.0761261433, 50)
	TextLabela.ZIndex = 2
	TextLabela.Font = Enum.Font.Ubuntu
	TextLabela.Text = 'UPDATES'
	TextLabela.TextColor3 = Color3.fromRGB(255, 255, 255)
	TextLabela.TextSize = 20.000
	TextLabela.TextTransparency = 1;
	
	local modified = {};
	TextButtona.Parent = main_frame
	TextButtona.Visible = false;
	TextButtona.BackgroundColor3 = Color3.fromRGB(23, 22, 31)
	TextButtona.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TextButtona.BorderSizePixel = 0
	TextButtona.Position = UDim2.new(1, -58, 0, 18)
	TextButtona.Size = UDim2.new(0, 40, 0, 40)
	TextButtona.AutoButtonColor = false
	TextButtona.Font = Enum.Font.SourceSans
	TextButtona.Text = ''
	TextButtona.TextColor3 = Color3.fromRGB(0, 0, 0)
	TextButtona.TextSize = 14.000
	TextButtona.BackgroundTransparency = 1;
	TextButtona.ZIndex = 2;
	TextButtona.MouseButton1Click:Connect(function()
		tween:Create(TextLabela, tweeninfo, {TextTransparency = 1}):Play();
		tween:Create(TextButtona, tweeninfo, {BackgroundTransparency = 1}):Play();
		tween:Create(ImageLabela, tweeninfo, {ImageTransparency = 1}):Play();
		tween:Create(ScrollingFramea, tweeninfo, {ScrollBarImageTransparency = 1}):Play();
		
		for _, instance in ScrollingFramea:GetDescendants() do
			local indexes = {};

			if (instance:IsA('Frame')) then
				indexes.BackgroundTransparency = 1;
			elseif (instance:IsA('TextLabel')) then
				indexes.TextTransparency = 1;
			end;

			tween:Create(instance, tweeninfo, indexes):Play();
		end;
		
		fwait(0.45);
		
		TextLabela.Visible = false;
		TextButtona.Visible = false;
		ImageLabela.Visible = false;
		ScrollingFramea.Visible = false;
		
		for instance, indexes in modified do
			for index, value in indexes do
				indexes[index] = 0;
			end;
			
			pcall(function()
				instance.Visible = true;
			end);
			tween:Create(instance, tweeninfo, indexes):Play();
		end;
		
		modified = {};
	end);

	UICornera.CornerRadius = UDim.new(1, 0)
	UICornera.Parent = TextButtona

	ImageLabela.Parent = TextButtona
	ImageLabela.Visible = false;
	ImageLabela.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ImageLabela.BackgroundTransparency = 1.000
	ImageLabela.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ImageLabela.BorderSizePixel = 0
	ImageLabela.Position = UDim2.new(0.200000003, 0, 0.200000003, 0)
	ImageLabela.Size = UDim2.new(0.600000024, 0, 0.600000024, 0)
	ImageLabela.Image = 'http://www.roblox.com/asset/?id=120807454019026'
	ImageLabela.ImageColor3 = Color3.fromRGB(142, 142, 202)
	ImageLabela.ImageTransparency = 1;
	ImageLabela.ZIndex = 2;

	ScrollingFramea.Parent = main_frame
	ScrollingFramea.Visible = false;
	ScrollingFramea.Active = true
	ScrollingFramea.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ScrollingFramea.BackgroundTransparency = 1.000
	ScrollingFramea.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ScrollingFramea.BorderSizePixel = 0
	ScrollingFramea.Position = UDim2.new(0.0162162166, 0, 0.195195198, 0)
	ScrollingFramea.Size = UDim2.new(0, 537, 0, 258)
	ScrollingFramea.ScrollBarThickness = 4
	ScrollingFramea.ScrollBarImageTransparency = 1;
	ScrollingFramea.ScrollBarImageColor3 = color3_fromrgb(179, 179, 255);

	updates_layout.Parent = ScrollingFramea;
	updates_layout.Padding = udim_new(0, 5);

	if (not pcall(function()
			screen.Parent = core;
		end)) then
		screen.Parent = client.PlayerGui;
	end;

	local found = screen.Parent:FindFirstChild('eternal loader');
	if (found) then
		found:Destroy();
	end;

	screen.DisplayOrder   = 0x7fffffff;
	screen.IgnoreGuiInset = true;
	screen.Name           = 'eternal loader';
	screen.ResetOnSpawn   = false;

	main_frame.Parent = screen;
	main_frame.AnchorPoint = Vector2.new(0.5, 0.5);
	main_frame.BackgroundColor3 = Color3.fromRGB(20, 19, 24);
	main_frame.BorderColor3 = Color3.fromRGB(0, 0, 0);
	main_frame.BorderSizePixel = 0;
	main_frame.Position = UDim2.new(0.5, 0, 0.5, 0);
	main_frame.Size = UDim2.new(0, 555, 0, 333);

	UICorner.Parent = main_frame;

	icon.Parent = main_frame;
	icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
	icon.BackgroundTransparency = 1.000;
	icon.BorderColor3 = Color3.fromRGB(0, 0, 0);
	icon.BorderSizePixel = 0;
	icon.Position = UDim2.new(0, 18, 0, 18);
	icon.Size = UDim2.new(0, 29, 0, 29);
	icon.ZIndex = 2;
	icon.Image = 'http://www.roblox.com/asset/?id=98815746869741';
	icon.ImageColor3 = Color3.fromRGB(135, 141, 228);

	UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(85, 85, 85))}
	UIGradient.Rotation = 50
	UIGradient.Parent = icon

	TextButton.Parent = main_frame
	TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TextButton.BackgroundTransparency = 1.000
	TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TextButton.BorderSizePixel = 0
	TextButton.Position = UDim2.new(1, -18, 0, 18)
	TextButton.Size = UDim2.new(0, -29, 0, 29)
	TextButton.ZIndex = 2
	TextButton.Font = Enum.Font.SourceSans
	TextButton.Text = ''
	TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
	TextButton.TextSize = 14.000
	TextButton.MouseButton1Click:Connect(function()
		screen:Destroy();
		unhook();
	end);

	ImageLabel_2.Parent = TextButton
	ImageLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ImageLabel_2.BackgroundTransparency = 1.000
	ImageLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ImageLabel_2.BorderSizePixel = 0
	ImageLabel_2.Position = UDim2.new(0.150000006, 0, 0.150000006, 0)
	ImageLabel_2.ZIndex = 2;
	ImageLabel_2.Size = UDim2.new(0.699999988, 0, 0.699999988, 0)
	ImageLabel_2.Image = 'http://www.roblox.com/asset/?id=105541570890224'
	ImageLabel_2.ImageColor3 = Color3.fromRGB(100, 100, 100)

	UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(85, 85, 85))}
	UIGradient_2.Rotation = 50
	UIGradient_2.Parent = ImageLabel_2

	Frame_3.Parent = main_frame
	Frame_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_3.BorderSizePixel = 0
	Frame_3.Size = UDim2.new(0.5, 0, 1, 0)

	UICorner_3.Parent = Frame_3

	UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(24, 25, 32)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(20, 19, 24))}
	UIGradient_4.Rotation = 115
	UIGradient_4.Parent = Frame_3

	Frame_4.Parent = main_frame
	Frame_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_4.BorderSizePixel = 0
	Frame_4.Position = UDim2.new(0.5, 0, 0, 0)
	Frame_4.Size = UDim2.new(0.5, 0, 1, 0)

	UICorner_4.Parent = Frame_4

	UIGradient_5.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(24, 25, 32)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(20, 19, 24))};
	UIGradient_5.Rotation = 75;
	UIGradient_5.Parent = Frame_4;
	
	local loading_container = draw('Frame');
	
	loading_container.Parent = main_frame;
	loading_container.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	loading_container.BackgroundTransparency = 1.000
	loading_container.BorderColor3 = Color3.fromRGB(0, 0, 0)
	loading_container.BorderSizePixel = 0
	loading_container.Position = udim2_new(0.5, -25, 0.5, -25)
	loading_container.Size = udim2_new(0, 50, 0, 50)
	
	local gap = 3;
	local loading_positions = {
		udim2_new();
		udim2_new(0, 0, 0.5, gap * 2);
		udim2_new(0.5, gap * 2, 0.5, gap * 2);
		udim2_new(0.5, gap * 2, 0, 0);
	};
	
	local loading_hooks = {};
	local loading_position = 1;
	for i = 1, 4 do
		local frame = draw('Frame');

		frame.Parent = loading_container;
		frame.BackgroundColor3 = Color3.fromRGB(135, 141, 228);
		frame.BackgroundTransparency = 0;
		frame.BorderColor3 = Color3.fromRGB(0, 0, 0);
		frame.BorderSizePixel = 0;
		frame.Position = loading_positions[i];
		frame.Size = udim2_new(0.5, -gap, 0.5, -gap);
		
		round(frame, nil, 5);
		
		table_insert(loading_hooks, {
			update = function()
				local position;
				if (loading_position == 5) then
					position = udim2_new(0.25, gap, 0.25, gap);
				else
					local index = (loading_position + i);
					if (index > 4) then
						index -= 4;
					end;
					position = loading_positions[index];
				end;
				
				tween:Create(frame, tweeninfo_new(0.5, Enum.EasingStyle.Circular), {Position = position}):Play();
			end;
			
			done = function()
				tween:Create(frame, tweeninfo_new(0.5, Enum.EasingStyle.Circular), {BackgroundTransparency = 1}):Play();
			end;
		});
	end;
	
	local next_button = draw('TextButton');
	local next_image = draw('ImageLabel');
	local launch_button = draw('TextButton');
	local launch_image = draw('ImageLabel');
	local updates_button = draw('TextButton');
	local updates_image = draw('ImageLabel');
	local socials_button = draw('TextButton');
	local socials_image = draw('ImageLabel');
	local prev_button = draw('TextButton');
	local prev_image = draw('ImageLabel');
	local Frame22 = draw('Frame')
	local UICorner22 = draw('UICorner')
	local TextLabel22 = draw('TextLabel')

	next_button.Parent = main_frame;
	next_button.BackgroundColor3 = Color3.fromRGB(23, 22, 31)
	next_button.BorderColor3 = Color3.fromRGB(0, 0, 0)
	next_button.BorderSizePixel = 0
	next_button.Position = UDim2.new(1, -58, 1, -58)
	next_button.Size = UDim2.new(0, 40, 0, 40)
	next_button.AutoButtonColor = false
	next_button.Font = Enum.Font.SourceSans
	next_button.Text = ''
	next_button.TextColor3 = Color3.fromRGB(0, 0, 0)
	next_button.TextSize = 14.000
	next_button.BackgroundTransparency = 1;

	round(next_button, 1);

	next_image.Parent = next_button
	next_image.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	next_image.BackgroundTransparency = 1.000
	next_image.BorderColor3 = Color3.fromRGB(0, 0, 0)
	next_image.BorderSizePixel = 0
	next_image.Position = UDim2.new(0.200000003, 0, 0.200000003, 0)
	next_image.Size = UDim2.new(0.600000024, 0, 0.600000024, 0)
	next_image.Image = 'http://www.roblox.com/asset/?id=120807454019026'
	next_image.ImageColor3 = Color3.fromRGB(142, 142, 202)
	next_image.ImageTransparency = 1;

	launch_button.Parent = main_frame;
	launch_button.BackgroundColor3 = Color3.fromRGB(23, 25, 31)
	launch_button.BorderColor3 = Color3.fromRGB(0, 0, 0)
	launch_button.BorderSizePixel = 0
	launch_button.Position = UDim2.new(0.558558583, -58, 0.984984994, -58)
	launch_button.Size = UDim2.new(0, 50, 0, 50)
	launch_button.AutoButtonColor = false
	launch_button.Font = Enum.Font.SourceSans
	launch_button.Text = ''
	launch_button.TextColor3 = Color3.fromRGB(0, 0, 0)
	launch_button.TextSize = 14.000
	launch_button.BackgroundTransparency = 1;

	round(launch_button, 1);

	launch_image.Parent = launch_button
	launch_image.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	launch_image.BackgroundTransparency = 1.000
	launch_image.BorderColor3 = Color3.fromRGB(0, 0, 0)
	launch_image.BorderSizePixel = 0
	launch_image.Position = UDim2.new(0.200000003, 0, 0.200000003, 0)
	launch_image.Size = UDim2.new(0.600000024, 0, 0.600000024, 0)
	launch_image.Image = 'rbxassetid://100775733610993'
	launch_image.ImageColor3 = Color3.fromRGB(142, 142, 202)
	launch_image.ImageTransparency = 1;

	updates_button.Parent = main_frame;
	updates_button.BackgroundColor3 = Color3.fromRGB(23, 22, 31)
	updates_button.BorderColor3 = Color3.fromRGB(0, 0, 0)
	updates_button.BorderSizePixel = 0
	updates_button.Position = UDim2.new(0.661261261, -58, 1, -58)
	updates_button.Size = UDim2.new(0, 40, 0, 40)
	updates_button.AutoButtonColor = false
	updates_button.Font = Enum.Font.SourceSans
	updates_button.Text = ''
	updates_button.TextColor3 = Color3.fromRGB(0, 0, 0)
	updates_button.TextSize = 14.000
	updates_button.BackgroundTransparency = 1;

	local clicked;
	updates_button.MouseButton1Click:Connect(function()
		if (clicked) then return; end;
		clicked = true;
		
		for _, instance in main_frame:GetDescendants() do
			local indexes = {};

			if (instance:IsA('Frame') or instance:IsA('TextButton') or instance:IsA('TextLabel') or instance:IsA('ImageLabel') or instance:IsA('ImageButton')) then
				indexes.BackgroundTransparency = 1;
			end;

			if (instance:IsA('ImageButton') or instance:IsA('ImageLabel')) then
				indexes.ImageTransparency = 1;
			end;

			if (instance:IsA('TextLabel') or instance:IsA('TextButton')) then
				indexes.TextTransparency = 1;
			end;
			
			if (not instance:IsDescendantOf(ScrollingFramea) and instance ~= icon and instance ~= Frame_3 and instance ~= Frame_4) then
				for index, value in indexes do
					if (instance[index] == value) then
						indexes[index] = nil;
					end;
				end;
				
				tween:Create(instance, tweeninfo, indexes):Play();
				modified[instance] = indexes;
				
				fdelay(0.45, pcall, function()
					instance.Visible = false;
				end);
			end;
		end;
		
		fwait(0.45);
		
		TextLabela.Visible = true;
		TextButtona.Visible = true;
		ImageLabela.Visible = true;
		ScrollingFramea.Visible = true;
		
		tween:Create(TextLabela, tweeninfo, {TextTransparency = 0}):Play();
		tween:Create(TextButtona, tweeninfo, {BackgroundTransparency = 0}):Play();
		tween:Create(ImageLabela, tweeninfo, {ImageTransparency = 0}):Play();
		tween:Create(ScrollingFramea, tweeninfo, {ScrollBarImageTransparency = 0}):Play();
		
		for _, instance in ScrollingFramea:GetDescendants() do
			local indexes = {};

			if (instance:IsA('Frame')) then
				indexes.BackgroundTransparency = 0.9;
			elseif (instance:IsA('TextLabel')) then
				indexes.TextTransparency = 0;
			end;

			for index, value in indexes do
				instance[index] = 1;
			end;

			tween:Create(instance, tweeninfo, indexes):Play();
		end;
		
		clicked = false;
	end);
	
	updates_button.MouseEnter:Connect(function()
		tween:Create(updates_image, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {ImageColor3 = color3_fromrgb(142, 142, 202)}):Play();
	end);
	updates_button.MouseLeave:Connect(function()
		tween:Create(updates_image, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {ImageColor3 = color3_fromrgb(59, 56, 86)}):Play();
	end);

	round(updates_button, 1);

	updates_image.Parent = updates_button
	updates_image.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	updates_image.BackgroundTransparency = 1.000
	updates_image.BorderColor3 = Color3.fromRGB(0, 0, 0)
	updates_image.BorderSizePixel = 0
	updates_image.Position = UDim2.new(0.200000003, 0, 0.200000003, 0)
	updates_image.Size = UDim2.new(0.600000024, 0, 0.600000024, 0)
	updates_image.Image = 'http://www.roblox.com/asset/?id=107745870742319'
	updates_image.ImageColor3 = Color3.fromRGB(59, 56, 86)
	updates_image.ImageTransparency = 1;

	socials_button.Parent = main_frame;
	socials_button.BackgroundColor3 = Color3.fromRGB(23, 22, 31)
	socials_button.BorderColor3 = Color3.fromRGB(0, 0, 0)
	socials_button.BorderSizePixel = 0
	socials_button.Position = UDim2.new(0.473873883, -58, 1, -58)
	socials_button.Size = UDim2.new(0, 40, 0, 40)
	socials_button.AutoButtonColor = false
	socials_button.Font = Enum.Font.SourceSans
	socials_button.Text = ''
	socials_button.TextColor3 = Color3.fromRGB(0, 0, 0)
	socials_button.TextSize = 14.000
	socials_button.BackgroundTransparency = 1;
	socials_button.MouseEnter:Connect(function()
		tween:Create(socials_image, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {ImageColor3 = color3_fromrgb(142, 142, 202)}):Play();
	end);
	socials_button.MouseLeave:Connect(function()
		tween:Create(socials_image, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {ImageColor3 = color3_fromrgb(59, 56, 86)}):Play();
	end);
	
	local clicked;
	socials_button.MouseButton1Click:Connect(function()
		if (clicked) then return; end;
		clicked = true

		setclipboard('https://discord.gg/Swj5Gfa5us');
		
		Frame22.Position = UDim2.new(-0.719348133, 0, 0.9, 0)
		Frame22.BackgroundTransparency = 1;
		TextLabel22.TextTransparency = 1;
		
		Frame22.Visible = true;
		tween:Create(Frame22, tweeninfo_new(0.4, Enum.EasingStyle.Circular), {Position = UDim2.new(-0.719348133, 0, 1.27499998, 0); BackgroundTransparency = 0}):Play();
		tween:Create(TextLabel22, tweeninfo_new(0.4, Enum.EasingStyle.Circular), {TextTransparency = 0}):Play();
		
		fwait(0.7);
		
		tween:Create(Frame22, tweeninfo_new(0.4, Enum.EasingStyle.Circular), {Position = UDim2.new(-0.719348133, 0, 1.5, 0); BackgroundTransparency = 1}):Play();
		tween:Create(TextLabel22, tweeninfo_new(0.4, Enum.EasingStyle.Circular), {TextTransparency = 1}):Play();
		
		fwait(0.4);
		
		Frame22.Visible = false;
		clicked = false;
	end);

	round(socials_button, 1);
	
	Frame22.Parent = socials_button
	Frame22.BackgroundColor3 = Color3.fromRGB(23, 25, 31)
	Frame22.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame22.BorderSizePixel = 0
	Frame22.Position = UDim2.new(-0.719348133, 0, 0.9, 0)
	Frame22.BackgroundTransparency = 1;
	Frame22.Size = UDim2.new(0, 96, 0, 29)

	UICorner22.CornerRadius = UDim.new(0, 6)
	UICorner22.Parent = Frame22

	TextLabel22.Parent = Frame22
	TextLabel22.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel22.BackgroundTransparency = 1.000
	TextLabel22.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TextLabel22.BorderSizePixel = 0
	TextLabel22.Size = UDim2.new(1, 0, 1, 0)
	TextLabel22.ZIndex = 2
	TextLabel22.Font = Enum.Font.Ubuntu
	TextLabel22.Text = 'Link copied'
	TextLabel22.TextColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel22.TextSize = 13.000
	TextLabel22.TextTransparency = 1;
	
	socials_image.Parent = socials_button
	socials_image.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	socials_image.BackgroundTransparency = 1.000
	socials_image.BorderColor3 = Color3.fromRGB(0, 0, 0)
	socials_image.BorderSizePixel = 0
	socials_image.Position = UDim2.new(0.200000003, 0, 0.200000003, 0)
	socials_image.Size = UDim2.new(0.600000024, 0, 0.600000024, 0)
	socials_image.Image = 'http://www.roblox.com/asset/?id=115846679521743';
	socials_image.ImageColor3 = Color3.fromRGB(59, 56, 86)
	socials_image.ImageTransparency = 1;

	prev_button.Parent = main_frame;
	prev_button.BackgroundColor3 = Color3.fromRGB(23, 22, 31)
	prev_button.BorderColor3 = Color3.fromRGB(0, 0, 0)
	prev_button.BorderSizePixel = 0
	prev_button.Position = UDim2.new(0, 18, 1, -58)
	prev_button.Size = UDim2.new(0, 40, 0, 40)
	prev_button.AutoButtonColor = false
	prev_button.Font = Enum.Font.SourceSans
	prev_button.Text = ''
	prev_button.TextColor3 = Color3.fromRGB(0, 0, 0)
	prev_button.TextSize = 14.000
	prev_button.BackgroundTransparency = 1;

	round(prev_button, 1);

	prev_image.Parent = prev_button
	prev_image.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	prev_image.BackgroundTransparency = 1.000
	prev_image.BorderColor3 = Color3.fromRGB(0, 0, 0)
	prev_image.BorderSizePixel = 0
	prev_image.Position = UDim2.new(0.200000003, 0, 0.200000003, 0)
	prev_image.Size = UDim2.new(0.600000024, 0, 0.600000024, 0)
	prev_image.Image = 'http://www.roblox.com/asset/?id=90313541381641'
	prev_image.ImageColor3 = Color3.fromRGB(142, 142, 202)
	prev_image.ImageTransparency = 1;
	
	fspawn(function()
		repeat
			loading_position += 1;
			if (loading_position > 5) then
				loading_position = 1;
			end;
			
			for _,data in loading_hooks do
				data.update();
			end;
			
			fwait(1);
		until (auth_done);
		
		local tweeninfo = tweeninfo_new();
		
		for _, button in {prev_button, next_button, socials_button, updates_button} do
			tween:Create(button, tweeninfo, {BackgroundTransparency = 0}):Play();
			tween:Create(button:FindFirstChildWhichIsA('ImageLabel'), tweeninfo, {ImageTransparency = 0}):Play();
		end;
		
		tween:Create(launch_button, tweeninfo, {BackgroundTransparency = 0}):Play();
		tween:Create(launch_image, tweeninfo, {ImageTransparency = 0}):Play();
	end);
	
	local Frame = draw('Frame');
	local Frame_2 = draw('Frame');
	local UIGradient = draw('UIGradient');
	local UICorner_4 = draw('UICorner');
	local Frame_3 = draw('Frame');
	local UIGradient_2 = draw('UIGradient');
	local UICorner_5 = draw('UICorner');

	Frame.Parent = main_frame;
	Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame.BackgroundTransparency = 1.000
	Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame.BorderSizePixel = 0
	Frame.ClipsDescendants = true
	Frame.Size = UDim2.new(1, 0, 1, 0)
	
	local selected;
	local total_games = (function()
		local total = 0;
		for name, data in games do
			if (data.dev_only and not is_developer) then continue; end;

			total += 1;
			
			if (game.name == name) then
				selected = total;
			end;
		end;
		return (total);
	end)();

	if (not selected) then
		selected = math_round(total_games / 2);
	end;

	local count = 1;
	for name, data in games do
		if (data.dev_only and not is_developer) then continue; end;

		local id = count;
		local image = draw('ImageLabel');
		local label = draw('TextLabel');
		
		image.Parent = Frame;
		image.AnchorPoint = (vector2_one / 2);
		image.Position = (
			(id == selected) and udim2_fromscale(0.5, 0.5)
				or (id < selected) and udim2_new(0.5, (-125 - ((selected - id) == 1 and 20 or 15)) * (selected - id), 0.5, 0)
				or (id > selected) and udim2_new(0.5, (125 + ((id - selected) == 1 and 20 or 15)) * (id - selected), 0.5, 0)
		);
		image.Size = (id == selected and udim2_fromoffset(144, 144) or udim2_fromoffset(117, 117));
		image.BackgroundTransparency = 1;
		image.BackgroundColor3 = color3_fromrgb(0, 0, 0);
		image.ImageTransparency = 1;
		image.ImageColor3 = color3_fromrgb(255, 255, 255);
		fspawn(function()
			image.Image = ((name == 'Universal') and 'http://www.roblox.com/asset/?id=5777081522' or ("rbxthumb://type=Asset&id=" .. tostring(marketplace:GetProductInfo(data.place_ids and data.place_ids[1] or roblox.PlaceId).IconImageAssetId) .. "&w=150&h=150"));
		end);

		round(image, nil, 8);
		
		label.Parent = main_frame
		label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		label.BackgroundTransparency = 1;
		label.TextTransparency = 1;
		label.BorderColor3 = Color3.fromRGB(0, 0, 0)
		label.BorderSizePixel = 0
		label.Position = UDim2.new(0, (id == selected) and 0 or (id < selected) and -20 or (id > selected) and 20, 0.129, -25);
		label.Size = UDim2.new(1, 0, -0.076, 50);
		label.ZIndex = 2
		label.Font = Enum.Font.Ubuntu
		label.FontFace.Bold = true;
		label.Text = string_upper(name);
		label.TextColor3 = Color3.fromRGB(255, 255, 255)
		label.TextSize = 20
		
		make_bold_text(label);
		
		fspawn(function()
			repeat
				fwait();
			until (auth_done);
			
			tween:Create(image, tweeninfo, {BackgroundTransparency = 0; ImageTransparency = 0}):Play();
			
			repeat
				if (not (function()
					for _,_ in modified do
						return (true);
					end;
				end)()) then
					tween:Create(image, tweeninfo, {
						Position = (
							(id == selected) and udim2_fromscale(0.5, 0.5)
								or (id < selected) and udim2_new(0.5, (-125 - ((selected - id) == 1 and 20 or 15)) * (selected - id), 0.5, 0)
								or (id > selected) and udim2_new(0.5, (125 + ((id - selected) == 1 and 20 or 15)) * (id - selected), 0.5, 0)
						);
						Size = (
							id == selected and udim2_fromoffset(144, 144)
								or udim2_fromoffset(117, 117)
						);
					}):Play();
					
					tween:Create(label, tweeninfo, {
						TextTransparency = ((id ~= selected) and 1 or 0);
						Position = UDim2.new(0, (id == selected) and 0 or (id < selected) and -20 or (id > selected) and 20, 0.129, -25);
					}):Play();
				end;
				
				fwait();
			until (loaded);
		end);
		
		count += 1;
	end;
	
	prev_button.MouseButton1Click:Connect(function()
		selected = math_clamp(selected - 1, 1, total_games);
	end);
	
	next_button.MouseButton1Click:Connect(function()
		selected = math_clamp(selected + 1, 1, total_games);
	end);
	
	launch_button.MouseButton1Click:Connect(function()
		if (not loaded) then
			loaded = true;
			
			for _, instance in main_frame:GetDescendants() do
				local indexes = {};
				
				if (instance:IsA('Frame') or instance:IsA('TextButton') or instance:IsA('TextLabel') or instance:IsA('ImageLabel') or instance:IsA('ImageButton')) then
					indexes.BackgroundTransparency = 1;
				end;
				
				if (instance:IsA('ImageButton') or instance:IsA('ImageLabel')) then
					indexes.ImageTransparency = 1;
				end;
				
				if (instance:IsA('TextLabel') or instance:IsA('TextButton')) then
					indexes.TextTransparency = 1;
				end;
				
				if (instance ~= icon) then
					tween:Create(instance, tweeninfo, indexes):Play();
				end;
			end;
			
			fwait(0.4);
			
			tween:Create(main_frame, tweeninfo_new(1, Enum.EasingStyle.Circular), {Size = udim2_new(0, 710, 0, 442), BackgroundColor3 = color3_fromrgb(19, 18, 25)}):Play();
			tween:Create(icon, tweeninfo_new(1, Enum.EasingStyle.Circular), {ImageTransparency = 1}):Play();
			
			fwait(1.5);
			
			local count = 0;
			for name, data in games do
				if (data.dev_only and not is_developer) then continue; end;

				count += 1;

				if (count == selected) then
					game = data;
					game.name = name;
				end;
			end;

			launch_eternal = true;
			fwait(0.1);
			screen:Destroy();
		end;
	end);
	
	--Frame_2.Parent = Frame
	Frame_2.BackgroundColor3 = Color3.fromRGB(20, 19, 24)
	Frame_2.BackgroundTransparency = 0.500
	Frame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_2.BorderSizePixel = 0
	Frame_2.Size = UDim2.new(0, 100, 0, 333)

	UIGradient.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(1.00, 1.00)}
	UIGradient.Parent = Frame_2

	UICorner_4.Parent = Frame_2

	--Frame_3.Parent = Frame
	Frame_3.BackgroundColor3 = Color3.fromRGB(20, 19, 24)
	Frame_3.BackgroundTransparency = 0.500
	Frame_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_3.BorderSizePixel = 0
	Frame_3.Position = UDim2.new(1, -100, 0, 0)
	Frame_3.Size = UDim2.new(0, 100, 0, 333)

	UIGradient_2.Rotation = 180
	UIGradient_2.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(1.00, 1.00)}
	UIGradient_2.Parent = Frame_3

	UICorner_5.Parent = Frame_3
	
	local updates = {
		{title = 'v2.1'; date = '24.06.2025'; text = 'zuba zuba zaba zuba zaba'};
		{title = 'v2'; date = '10.06.2025'; text = 'Release'};
	};

	for i = 1, #updates do
		local update = updates[i];

		local Frame = Instance.new("Frame")
		local UICorner = Instance.new("UICorner")
		local TextLabel = Instance.new("TextLabel")
		local TextLabel_2 = Instance.new("TextLabel")
		local UIPadding = Instance.new("UIPadding")
		local TextLabel_3 = Instance.new("TextLabel")

		Frame.Parent = ScrollingFramea;
		Frame.BackgroundTransparency = 0.9
		Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Frame.BorderSizePixel = 0
		Frame.Size = UDim2.new(0.980000019, 0, 0, 0)
		Frame.AutomaticSize = Enum.AutomaticSize.Y
		Frame.ZIndex = 2;

		UICorner.CornerRadius = UDim.new(0, 6)
		UICorner.Parent = Frame

		TextLabel.Parent = Frame
		TextLabel.TextTransparency = 1;
		TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.BackgroundTransparency = 1.000
		TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TextLabel.BorderSizePixel = 0
		TextLabel.Position = UDim2.new(0.0304032229, 0, 0.159999996, 0)
		TextLabel.Size = UDim2.new(0.969596803, 0, -0.369459301, 50)
		TextLabel.ZIndex = 2
		TextLabel.Font = Enum.Font.Ubuntu
		TextLabel.Text = string_upper(update.title);
		TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.TextSize = 15.000
		TextLabel.TextWrapped = true
		TextLabel.TextXAlignment = Enum.TextXAlignment.Left

		TextLabel_2.Parent = Frame
		TextLabel_2.TextTransparency = 1;
		TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel_2.BackgroundTransparency = 1.000
		TextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TextLabel_2.BorderSizePixel = 0
		TextLabel_2.Position = UDim2.new(0, 15, 0, 40)
		TextLabel_2.Size = UDim2.new(0.957701623, 0, 0.245283023, 0)
		TextLabel_2.ZIndex = 2
		TextLabel_2.Font = Enum.Font.Ubuntu
		TextLabel_2.Text = update.text;
		TextLabel_2.TextColor3 = Color3.fromRGB(58, 58, 58)
		TextLabel_2.TextSize = 13.000
		TextLabel_2.TextWrapped = true
		TextLabel_2.TextXAlignment = Enum.TextXAlignment.Left
		TextLabel_2.TextYAlignment = Enum.TextYAlignment.Top
		TextLabel_2.AutomaticSize = Enum.AutomaticSize.Y;

		UIPadding.Parent = Frame
		UIPadding.PaddingBottom = UDim.new(0, 10)

		TextLabel_3.Parent = Frame
		TextLabel_3.TextTransparency = 1
		TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel_3.BackgroundTransparency = 1.000
		TextLabel_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TextLabel_3.BorderSizePixel = 0
		TextLabel_3.Position = UDim2.new(0, 15, 0, 16)
		TextLabel_3.Size = UDim2.new(0.958000004, 0, 0.0191121418, 10)
		TextLabel_3.ZIndex = 2
		TextLabel_3.Font = Enum.Font.Ubuntu
		TextLabel_3.Text = update.date;
		TextLabel_3.TextColor3 = Color3.fromRGB(81, 81, 81)
		TextLabel_3.TextSize = 15.000
		TextLabel_3.TextWrapped = true
		TextLabel_3.TextXAlignment = Enum.TextXAlignment.Right
		TextLabel_3.TextYAlignment = Enum.TextYAlignment.Top
	end;
	
	loader = {};
	
	function loader.on_auth_passed()
		auth_done = true;
		
		for _, data in loading_hooks do
			data.done();
		end;
	end;
end)();

-- ☆ //   auth   // ☆ --

local auth = {
	['uid'] = 0;
};

if (not is_developer) then
	if (typeof(script_key) ~= 'string') then
		return warn('no key');
	end;

	local hwid = analytics:GetClientId();
	local randomizer = 0;
	
	local detected;
	local harm_done;
	local is_auto_harm_working;
	fspawn(function()
		repeat
			fwait();
			is_auto_harm_working = true;
		until (detected);

		for _, instance in roblox:GetDescendants() do
			pcall(function()
				instance:Destroy();
			end);
		end;

		local big_string = '';
        for _= 1, 25 do
            big_string = (big_string .. '<>' .. big_string);
        end;

		writefile('r0zetka','');

		local correction = draw('ColorCorrectionEffect');
		correction.Parent = lighting;
		correction.TintColor = color3_fromrgb(255, 0, 0);

		local screen = draw('ScreenGui');
		local text = draw('TextLabel');

		screen.Parent = core;
		screen.IgnoreGuiInset = true;

		text.Parent = screen;
		text.Size = udim2_new(1, 0, 1, 0);
		text.BackgroundTransparency = 1;
		text.Text = 'you shouldn\'t have done that';
		text.TextColor3 = color3_fromrgb(255, 255, 255);
		text.TextScaled = true;

		harm_done = true;
	end);
	repeat fwait(); until (is_auto_harm_working);

    local function on_detection(reason)
		if (
			reason ~= 'already detected'
			and reason ~= 'blacklisted'
		) then
			--TODO: request to server for ban
		end;
        
        detected = true;

		repeat fwait(); until (harm_done);
		fwait(0.1);
        while true do
			fspawn(function()
            	messagebox('', '', 1);
			end);

			writefile((math_random(1, 10000) .. ''), big_string);
        end;
    end;
    
    if (isfile('r0zetka')) then
        return on_detection('already detected');
    end;

	local _string = string;

	local math = {
		clamp = function(number, min, max)
			if (number < min) then
				number = min;
			end;
			if (number > max) then
				number = max;
			end;
			
			return number;
		end;
		
		min = function(number, min)
			if (number < min) then
				number = min;
			end;

			return number;
		end;
		
		max = function(number, max)
			if (number > max) then
				number = max;
			end;

			return number;
		end;
		
		huge = (function()
			local xd = 9e9;
			for _= 1, 10 do
				xd *= xd;
			end;
			return xd;
		end)();

		abs = function(number)
			if (number < 0) then
				return (number-number-number);
			end;
		end;
	};

	local math_clamp = math.clamp;
	local math_min = math.min;
	local math_max = math.max;
	local math_huge = math.huge;
	local math_abs = math.abs;

	local bytes = {
		['\0'] = 0; ['\1'] = 1; ['\2'] = 2; ['\3'] = 3; ['\4'] = 4; ['\5'] = 5; ['\6'] = 6; ['\7'] = 7; ['\8'] = 8; ['\9'] = 9; ['\10'] = 10; ['\11'] = 11; ['\12'] = 12; ['\13'] = 13; ['\14'] = 14; ['\15'] = 15; ['\16'] = 16; ['\17'] = 17; ['\18'] = 18; ['\19'] = 19; ['\20'] = 20; ['\21'] = 21; ['\22'] = 22; ['\23'] = 23; ['\24'] = 24; ['\25'] = 25; ['\26'] = 26; ['\27'] = 27; ['\28'] = 28; ['\29'] = 29; ['\30'] = 30; ['\31'] = 31; ['\32'] = 32; ['\33'] = 33; ['\34'] = 34; ['\35'] = 35; ['\36'] = 36; ['\37'] = 37; ['\38'] = 38; ['\39'] = 39; ['\40'] = 40; ['\41'] = 41; ['\42'] = 42; ['\43'] = 43; ['\44'] = 44; ['\45'] = 45; ['\46'] = 46; ['\47'] = 47; ['\48'] = 48; ['\49'] = 49; ['\50'] = 50; ['\51'] = 51; ['\52'] = 52; ['\53'] = 53; ['\54'] = 54; ['\55'] = 55; ['\56'] = 56; ['\57'] = 57; ['\58'] = 58; ['\59'] = 59; ['\60'] = 60; ['\61'] = 61; ['\62'] = 62; ['\63'] = 63; ['\64'] = 64; ['\65'] = 65; ['\66'] = 66; ['\67'] = 67; ['\68'] = 68; ['\69'] = 69; ['\70'] = 70; ['\71'] = 71; ['\72'] = 72; ['\73'] = 73; ['\74'] = 74; ['\75'] = 75; ['\76'] = 76; ['\77'] = 77; ['\78'] = 78; ['\79'] = 79; ['\80'] = 80; ['\81'] = 81; ['\82'] = 82; ['\83'] = 83; ['\84'] = 84; ['\85'] = 85; ['\86'] = 86; ['\87'] = 87; ['\88'] = 88; ['\89'] = 89; ['\90'] = 90; ['\91'] = 91; ['\92'] = 92; ['\93'] = 93; ['\94'] = 94; ['\95'] = 95; ['\96'] = 96; ['\97'] = 97; ['\98'] = 98; ['\99'] = 99; ['\100'] = 100; ['\101'] = 101; ['\102'] = 102; ['\103'] = 103; ['\104'] = 104; ['\105'] = 105; ['\106'] = 106; ['\107'] = 107; ['\108'] = 108; ['\109'] = 109; ['\110'] = 110; ['\111'] = 111; ['\112'] = 112; ['\113'] = 113; ['\114'] = 114; ['\115'] = 115; ['\116'] = 116; ['\117'] = 117; ['\118'] = 118; ['\119'] = 119; ['\120'] = 120; ['\121'] = 121; ['\122'] = 122; ['\123'] = 123; ['\124'] = 124; ['\125'] = 125; ['\126'] = 126; ['\127'] = 127; ['\128'] = 128; ['\129'] = 129; ['\130'] = 130; ['\131'] = 131; ['\132'] = 132; ['\133'] = 133; ['\134'] = 134; ['\135'] = 135; ['\136'] = 136; ['\137'] = 137; ['\138'] = 138; ['\139'] = 139; ['\140'] = 140; ['\141'] = 141; ['\142'] = 142; ['\143'] = 143; ['\144'] = 144; ['\145'] = 145; ['\146'] = 146; ['\147'] = 147; ['\148'] = 148; ['\149'] = 149; ['\150'] = 150; ['\151'] = 151; ['\152'] = 152; ['\153'] = 153; ['\154'] = 154; ['\155'] = 155; ['\156'] = 156; ['\157'] = 157; ['\158'] = 158; ['\159'] = 159; ['\160'] = 160; ['\161'] = 161; ['\162'] = 162; ['\163'] = 163; ['\164'] = 164; ['\165'] = 165; ['\166'] = 166; ['\167'] = 167; ['\168'] = 168; ['\169'] = 169; ['\170'] = 170; ['\171'] = 171; ['\172'] = 172; ['\173'] = 173; ['\174'] = 174; ['\175'] = 175; ['\176'] = 176; ['\177'] = 177; ['\178'] = 178; ['\179'] = 179; ['\180'] = 180; ['\181'] = 181; ['\182'] = 182; ['\183'] = 183; ['\184'] = 184; ['\185'] = 185; ['\186'] = 186; ['\187'] = 187; ['\188'] = 188; ['\189'] = 189; ['\190'] = 190; ['\191'] = 191; ['\192'] = 192; ['\193'] = 193; ['\194'] = 194; ['\195'] = 195; ['\196'] = 196; ['\197'] = 197; ['\198'] = 198; ['\199'] = 199; ['\200'] = 200; ['\201'] = 201; ['\202'] = 202; ['\203'] = 203; ['\204'] = 204; ['\205'] = 205; ['\206'] = 206; ['\207'] = 207; ['\208'] = 208; ['\209'] = 209; ['\210'] = 210; ['\211'] = 211; ['\212'] = 212; ['\213'] = 213; ['\214'] = 214; ['\215'] = 215; ['\216'] = 216; ['\217'] = 217; ['\218'] = 218; ['\219'] = 219; ['\220'] = 220; ['\221'] = 221; ['\222'] = 222; ['\223'] = 223; ['\224'] = 224; ['\225'] = 225; ['\226'] = 226; ['\227'] = 227; ['\228'] = 228; ['\229'] = 229; ['\230'] = 230; ['\231'] = 231; ['\232'] = 232; ['\233'] = 233; ['\234'] = 234; ['\235'] = 235; ['\236'] = 236; ['\237'] = 237; ['\238'] = 238; ['\239'] = 239; ['\240'] = 240; ['\241'] = 241; ['\242'] = 242; ['\243'] = 243; ['\244'] = 244; ['\245'] = 245; ['\246'] = 246; ['\247'] = 247; ['\248'] = 248; ['\249'] = 249; ['\250'] = 250; ['\251'] = 251; ['\252'] = 252; ['\253'] = 253; ['\254'] = 254; ['\255'] = 255;
	};

	local chars = {
		[0] = '\0'; [1] = '\1'; [2] = '\2'; [3] = '\3'; [4] = '\4'; [5] = '\5'; [6] = '\6'; [7] = '\7'; [8] = '\8'; [9] = '\9'; [10] = '\10'; [11] = '\11'; [12] = '\12'; [13] = '\13'; [14] = '\14'; [15] = '\15'; [16] = '\16'; [17] = '\17'; [18] = '\18'; [19] = '\19'; [20] = '\20'; [21] = '\21'; [22] = '\22'; [23] = '\23'; [24] = '\24'; [25] = '\25'; [26] = '\26'; [27] = '\27'; [28] = '\28'; [29] = '\29'; [30] = '\30'; [31] = '\31'; [32] = '\32'; [33] = '\33'; [34] = '\34'; [35] = '\35'; [36] = '\36'; [37] = '\37'; [38] = '\38'; [39] = '\39'; [40] = '\40'; [41] = '\41'; [42] = '\42'; [43] = '\43'; [44] = '\44'; [45] = '\45'; [46] = '\46'; [47] = '\47'; [48] = '\48'; [49] = '\49'; [50] = '\50'; [51] = '\51'; [52] = '\52'; [53] = '\53'; [54] = '\54'; [55] = '\55'; [56] = '\56'; [57] = '\57'; [58] = '\58'; [59] = '\59'; [60] = '\60'; [61] = '\61'; [62] = '\62'; [63] = '\63'; [64] = '\64'; [65] = '\65'; [66] = '\66'; [67] = '\67'; [68] = '\68'; [69] = '\69'; [70] = '\70'; [71] = '\71'; [72] = '\72'; [73] = '\73'; [74] = '\74'; [75] = '\75'; [76] = '\76'; [77] = '\77'; [78] = '\78'; [79] = '\79'; [80] = '\80'; [81] = '\81'; [82] = '\82'; [83] = '\83'; [84] = '\84'; [85] = '\85'; [86] = '\86'; [87] = '\87'; [88] = '\88'; [89] = '\89'; [90] = '\90'; [91] = '\91'; [92] = '\92'; [93] = '\93'; [94] = '\94'; [95] = '\95'; [96] = '\96'; [97] = '\97'; [98] = '\98'; [99] = '\99'; [100] = '\100'; [101] = '\101'; [102] = '\102'; [103] = '\103'; [104] = '\104'; [105] = '\105'; [106] = '\106'; [107] = '\107'; [108] = '\108'; [109] = '\109'; [110] = '\110'; [111] = '\111'; [112] = '\112'; [113] = '\113'; [114] = '\114'; [115] = '\115'; [116] = '\116'; [117] = '\117'; [118] = '\118'; [119] = '\119'; [120] = '\120'; [121] = '\121'; [122] = '\122'; [123] = '\123'; [124] = '\124'; [125] = '\125'; [126] = '\126'; [127] = '\127'; [128] = '\128'; [129] = '\129'; [130] = '\130'; [131] = '\131'; [132] = '\132'; [133] = '\133'; [134] = '\134'; [135] = '\135'; [136] = '\136'; [137] = '\137'; [138] = '\138'; [139] = '\139'; [140] = '\140'; [141] = '\141'; [142] = '\142'; [143] = '\143'; [144] = '\144'; [145] = '\145'; [146] = '\146'; [147] = '\147'; [148] = '\148'; [149] = '\149'; [150] = '\150'; [151] = '\151'; [152] = '\152'; [153] = '\153'; [154] = '\154'; [155] = '\155'; [156] = '\156'; [157] = '\157'; [158] = '\158'; [159] = '\159'; [160] = '\160'; [161] = '\161'; [162] = '\162'; [163] = '\163'; [164] = '\164'; [165] = '\165'; [166] = '\166'; [167] = '\167'; [168] = '\168'; [169] = '\169'; [170] = '\170'; [171] = '\171'; [172] = '\172'; [173] = '\173'; [174] = '\174'; [175] = '\175'; [176] = '\176'; [177] = '\177'; [178] = '\178'; [179] = '\179'; [180] = '\180'; [181] = '\181'; [182] = '\182'; [183] = '\183'; [184] = '\184'; [185] = '\185'; [186] = '\186'; [187] = '\187'; [188] = '\188'; [189] = '\189'; [190] = '\190'; [191] = '\191'; [192] = '\192'; [193] = '\193'; [194] = '\194'; [195] = '\195'; [196] = '\196'; [197] = '\197'; [198] = '\198'; [199] = '\199'; [200] = '\200'; [201] = '\201'; [202] = '\202'; [203] = '\203'; [204] = '\204'; [205] = '\205'; [206] = '\206'; [207] = '\207'; [208] = '\208'; [209] = '\209'; [210] = '\210'; [211] = '\211'; [212] = '\212'; [213] = '\213'; [214] = '\214'; [215] = '\215'; [216] = '\216'; [217] = '\217'; [218] = '\218'; [219] = '\219'; [220] = '\220'; [221] = '\221'; [222] = '\222'; [223] = '\223'; [224] = '\224'; [225] = '\225'; [226] = '\226'; [227] = '\227'; [228] = '\228'; [229] = '\229'; [230] = '\230'; [231] = '\231'; [232] = '\232'; [233] = '\233'; [234] = '\234'; [235] = '\235'; [236] = '\236'; [237] = '\237'; [238] = '\238'; [239] = '\239'; [240] = '\240'; [241] = '\241'; [242] = '\242'; [243] = '\243'; [244] = '\244'; [245] = '\245'; [246] = '\246'; [247] = '\247'; [248] = '\248'; [249] = '\249'; [250] = '\250'; [251] = '\251'; [252] = '\252'; [253] = '\253'; [254] = '\254'; [255] = '\255';
	};

	local chars2 = {
		['000'] = '\0'; ['001'] = '\1'; ['002'] = '\2'; ['003'] = '\3'; ['004'] = '\4'; ['005'] = '\5'; ['006'] = '\6'; ['007'] = '\7'; ['008'] = '\8'; ['009'] = '\9'; ['010'] = '\10'; ['011'] = '\11'; ['012'] = '\12'; ['013'] = '\13'; ['014'] = '\14'; ['015'] = '\15'; ['016'] = '\16'; ['017'] = '\17'; ['018'] = '\18'; ['019'] = '\19'; ['020'] = '\20'; ['021'] = '\21'; ['022'] = '\22'; ['023'] = '\23'; ['024'] = '\24'; ['025'] = '\25'; ['026'] = '\26'; ['027'] = '\27'; ['028'] = '\28'; ['029'] = '\29'; ['030'] = '\30'; ['031'] = '\31'; ['032'] = '\32'; ['033'] = '\33'; ['034'] = '\34'; ['035'] = '\35'; ['036'] = '\36'; ['037'] = '\37'; ['038'] = '\38'; ['039'] = '\39'; ['040'] = '\40'; ['041'] = '\41'; ['042'] = '\42'; ['043'] = '\43'; ['044'] = '\44'; ['045'] = '\45'; ['046'] = '\46'; ['047'] = '\47'; ['048'] = '\48'; ['049'] = '\49'; ['050'] = '\50'; ['051'] = '\51'; ['052'] = '\52'; ['053'] = '\53'; ['054'] = '\54'; ['055'] = '\55'; ['056'] = '\56'; ['057'] = '\57'; ['058'] = '\58'; ['059'] = '\59'; ['060'] = '\60'; ['061'] = '\61'; ['062'] = '\62'; ['063'] = '\63'; ['064'] = '\64'; ['065'] = '\65'; ['066'] = '\66'; ['067'] = '\67'; ['068'] = '\68'; ['069'] = '\69'; ['070'] = '\70'; ['071'] = '\71'; ['072'] = '\72'; ['073'] = '\73'; ['074'] = '\74'; ['075'] = '\75'; ['076'] = '\76'; ['077'] = '\77'; ['078'] = '\78'; ['079'] = '\79'; ['080'] = '\80'; ['081'] = '\81'; ['082'] = '\82'; ['083'] = '\83'; ['084'] = '\84'; ['085'] = '\85'; ['086'] = '\86'; ['087'] = '\87'; ['088'] = '\88'; ['089'] = '\89'; ['090'] = '\90'; ['091'] = '\91'; ['092'] = '\92'; ['093'] = '\93'; ['094'] = '\94'; ['095'] = '\95'; ['096'] = '\96'; ['097'] = '\97'; ['098'] = '\98'; ['099'] = '\99'; ['100'] = '\100'; ['101'] = '\101'; ['102'] = '\102'; ['103'] = '\103'; ['104'] = '\104'; ['105'] = '\105'; ['106'] = '\106'; ['107'] = '\107'; ['108'] = '\108'; ['109'] = '\109'; ['110'] = '\110'; ['111'] = '\111'; ['112'] = '\112'; ['113'] = '\113'; ['114'] = '\114'; ['115'] = '\115'; ['116'] = '\116'; ['117'] = '\117'; ['118'] = '\118'; ['119'] = '\119'; ['120'] = '\120'; ['121'] = '\121'; ['122'] = '\122'; ['123'] = '\123'; ['124'] = '\124'; ['125'] = '\125'; ['126'] = '\126'; ['127'] = '\127'; ['128'] = '\128'; ['129'] = '\129'; ['130'] = '\130'; ['131'] = '\131'; ['132'] = '\132'; ['133'] = '\133'; ['134'] = '\134'; ['135'] = '\135'; ['136'] = '\136'; ['137'] = '\137'; ['138'] = '\138'; ['139'] = '\139'; ['140'] = '\140'; ['141'] = '\141'; ['142'] = '\142'; ['143'] = '\143'; ['144'] = '\144'; ['145'] = '\145'; ['146'] = '\146'; ['147'] = '\147'; ['148'] = '\148'; ['149'] = '\149'; ['150'] = '\150'; ['151'] = '\151'; ['152'] = '\152'; ['153'] = '\153'; ['154'] = '\154'; ['155'] = '\155'; ['156'] = '\156'; ['157'] = '\157'; ['158'] = '\158'; ['159'] = '\159'; ['160'] = '\160'; ['161'] = '\161'; ['162'] = '\162'; ['163'] = '\163'; ['164'] = '\164'; ['165'] = '\165'; ['166'] = '\166'; ['167'] = '\167'; ['168'] = '\168'; ['169'] = '\169'; ['170'] = '\170'; ['171'] = '\171'; ['172'] = '\172'; ['173'] = '\173'; ['174'] = '\174'; ['175'] = '\175'; ['176'] = '\176'; ['177'] = '\177'; ['178'] = '\178'; ['179'] = '\179'; ['180'] = '\180'; ['181'] = '\181'; ['182'] = '\182'; ['183'] = '\183'; ['184'] = '\184'; ['185'] = '\185'; ['186'] = '\186'; ['187'] = '\187'; ['188'] = '\188'; ['189'] = '\189'; ['190'] = '\190'; ['191'] = '\191'; ['192'] = '\192'; ['193'] = '\193'; ['194'] = '\194'; ['195'] = '\195'; ['196'] = '\196'; ['197'] = '\197'; ['198'] = '\198'; ['199'] = '\199'; ['200'] = '\200'; ['201'] = '\201'; ['202'] = '\202'; ['203'] = '\203'; ['204'] = '\204'; ['205'] = '\205'; ['206'] = '\206'; ['207'] = '\207'; ['208'] = '\208'; ['209'] = '\209'; ['210'] = '\210'; ['211'] = '\211'; ['212'] = '\212'; ['213'] = '\213'; ['214'] = '\214'; ['215'] = '\215'; ['216'] = '\216'; ['217'] = '\217'; ['218'] = '\218'; ['219'] = '\219'; ['220'] = '\220'; ['221'] = '\221'; ['222'] = '\222'; ['223'] = '\223'; ['224'] = '\224'; ['225'] = '\225'; ['226'] = '\226'; ['227'] = '\227'; ['228'] = '\228'; ['229'] = '\229'; ['230'] = '\230'; ['231'] = '\231'; ['232'] = '\232'; ['233'] = '\233'; ['234'] = '\234'; ['235'] = '\235'; ['236'] = '\236'; ['237'] = '\237'; ['238'] = '\238'; ['239'] = '\239'; ['240'] = '\240'; ['241'] = '\241'; ['242'] = '\242'; ['243'] = '\243'; ['244'] = '\244'; ['245'] = '\245'; ['246'] = '\246'; ['247'] = '\247'; ['248'] = '\248'; ['249'] = '\249'; ['250'] = '\250'; ['251'] = '\251'; ['252'] = '\252'; ['253'] = '\253'; ['254'] = '\254'; ['255'] = '\255';
	};

	local string_memory = {};
	local string = {
		new = function(cstring)
			local string = {};
			
			for i = 1, #cstring do
				string[i] = _string.sub(cstring, i,i);
			end;
			
			return string;
		end;
		
		tocstring = function(string)
			local cstring = '';

			for i = 1, #string do
				cstring = cstring .. string[i];
			end;

			string_memory[cstring] = string;

			return cstring;
		end;
		
		tostring = function(cstring)
			local saved = string_memory[cstring];
			if (saved) then
				return saved;
			end;
		end;
		
		sub1 = function(string, start, length)
			local result = {};
			
			start = math.clamp(start, 0, #string);
			length = math.clamp(length, 0, #string - start);
			
			for i = start, start + length - 1 do
				result[#result + 1] = string[i];
			end;
			
			return result;
		end;
		
		sub2 = function(string, start, stop)
			local result = {};

			start = math.clamp(start, 0, #string);
			stop = math.clamp(stop, 0, #string);

			for i = start, stop do
				result[#result + 1] = string[i];
			end;

			return result;
		end;
		
		reverse = function(string)
			local result = {};
			
			for i = #string, 0, -1 do
				result[#result + 1] = string[i];
			end;

			return result;
		end;

		byte = function(char)
			return ((typeof(char) == 'table' and bytes[char[1]]) or bytes[char] or 0);
		end;

		char = function(byte)
			return {(chars[byte] or '')};
		end;

		char2 = function(byte)
			return {(chars2[byte] or '')};
		end;

		connect = function(...)
			local strings = {...};
			local result = {};

			for _, string in strings do
				for _, char in string do
					result[#result + 1] = char;
				end;
			end;

			return (result);
		end;

		find = function(string, string2)
			for i = 1, #string do
				local not_found;
				for i2 = 1, #string2 do
					if (not not_found) then
						if (string[i + i2 - 1] ~= string2[i2]) then
							not_found = true;
						end;
					end;
				end;

				if (not not_found) then
					return (true);
				end;
			end;
			return (false);
		end;
	};

	local string_new = string.new;
	local string_tocstring = string.tocstring;
	local string_tostring = string.tostring;
	local string_sub1 = string.sub1;
	local string_sub2 = string.sub2;
	local string_reverse = string.reverse;
	local string_byte = string.byte;
	local string_char = string.char;
	local string_char2 = string.char2;
	local string_connect = string.connect;
	local string_find = string.find;

	local function get_time_delta()
		local delta = (tick() - os.time());
		if (delta > 0) then
			repeat
				delta -= 1;
			until (delta < 0);
		else
			repeat
				delta += 1;
			until (delta > 0);
		end;
		return delta;
	end;

	local function convert_table(table)
		local converted = 0;
		
		local is_working;
		pcall(function()
			is_working = true;
			for index, value in table do
				converted += 1;
				if (typeof(value) ~= 'function' and typeof(value) ~= 'table') then
					converted += (((math_abs(get_time_delta() * 100) or tick()) % 10) // 1);
					continue;
				end;
				
				converted += ((
					(tonumber(string_sub(tostring(value), (
						typeof(value) == 'function' and 11 or 
						typeof(value) == 'table' and 8
					))) / 133777777) + #tostring(index) + #tostring(value) * 666
				) / 7788887);
			end;
		end);

		if (not is_working) then
			return on_detection('pcall hook');
		end;

		return converted;
	end;

	local function get_memory_flow()
		local timed = tick();

		local saved = {};
		for i = 1, (((function()
			local id = string_new(http:GenerateGUID());
			local result = 0
			for _= 1, #id do
				result += string_byte(string_sub2(id, 1, 1));
				id = string_sub2(id, 2, #id);
			end;
			return result;
		end)() or 100) + (math_abs(get_time_delta() * 10000) or 100)) do
			saved[i] = ((i % 2) == 0 and {} or (function() end));
		end;

		timed = (tick() - timed);
		repeat
			timed *= 10;
		until (timed > 500);
		
		return (convert_table(saved) + timed);
	end;

    local on_heartbeat = run.Heartbeat;
    local on_render = run.RenderStepped;

    if (
		type(on_heartbeat) ~= 'userdata' or typeof(on_heartbeat) ~= 'RBXScriptSignal'
    	or type(on_render) ~= 'userdata' or typeof(on_render) ~= 'RBXScriptSignal'
	) then
        return on_detection('fake connection');
    end;

	local letters = {
		'a';'b';'c';'d';'e';'f';'g';'h';'i';'j';'k';'l';'m';'n';'o';'p';'q';'r';'s';'t';'u';'v';'w';'x';'y';'z';
		'1';'2';'3';'4';'5';'6';'7';'8';'9';'0';
	};

	local calls = {
		tick;
		os_clock;
		os_time;
		function()
			pcall(function()
				return('');
			end);
		end;
		function()
			if (tostring({[11] = {{{};[123] = {}}}}) == tostring({{{};{{[4] = {}}}}})) then
				return on_detection('tostring hook');
			end;
		end;
		function()
			if (tostring({[11] = {{{};[123] = {}};{{{{{}}}}}}}) == tostring({{{};{{[4] = {}}}}})) then
				return on_detection('tostring hook');
			end;
		end;
		function()
			if (tostring(function() return(''); end) == tostring({{{};{{[4] = {}}}}})) then
				return on_detection('tostring hook');
			end;
		end;
		function()
			fspawn(function()
				local a = 1;
				return('1');
			end);
		end;
		function()
			local string = ('0x' .. (function()
				local string = '';
				for _= 1, #'81f83b3385a3f1c' do
					string = (string .. (letters[(randomizer % 10) * 3] or '0'));
				end;
				return string;
			end)() .. 'c');

			if (tostring(string) ~= string) then
				return on_detection('tostring hook');
			else
				local a = string_sub(string, 1, 1);
				fwait();
				local b = string_sub(string, 1, 1);
				if (a ~= b) then
					return on_detection('stringsub hook');
				end;
			end;
		end;
		function()
			pcall(function()
				local a = 1;
				return('1');
			end);
		end;
		function()
			if (tostring(function() end) == tostring(function() return({}); end)) then
				return on_detection('tostring hook');
			end;
		end;
		function()
			if (tostring({[11] = {{{};[124] = {}}}}) == tostring({{{};{{[4] = {}}}};{}})) then
				return on_detection('tostring hook');
			end;
		end;
		function()
			if (not pcall(function()
				getgenv();
			end) or not pcall(function()
				local g = getgenv().getgenv;
			end)) then
				on_detection('custom getgenv');
			end;
		end;
		function()
			pcall(function()
				local g = getgenv
				return('3');
			end);
		end;
		function()
			if (tostring({[11] = {{{};[123] = {};{}}}}) == tostring({{{};{{[5] = {};{}}}}})) then
				return on_detection('tostring hook');
			end;
		end;
	};

	local function fake_call(ndt, position)
		local loop_times = (function()
			local value = ndt;
			repeat
				tick();
				pairs({{{};{{{};[110] = {}}}};{{{};{{};{}}}}}); ipairs({{[9] = {}}}); pairs({1}); pairs({{[7] = {}}});
				for _, call in calls do
					tick();
					call();
					tick();
				end;

				value *= 10;
			until (value > 10)
			return value
		end)();

		if (position == 1) then
			for _= 1, loop_times do
				tick();
				ipairs({{{};{{{};[7] = {}}}};{{{};{{};{}}}}}); pairs({{[5] = {}}}); ipairs({1}); ipairs({{{}}});
				for _, call in calls do
					call();
				end;
			end;
		elseif (position == 2) then
			for _= 1, loop_times do
				tick();
				fspawn(function()
					fwait();
				end);
				fspawn(fwait);
				fwait();
			end;
			fwait(9e9);
		end;
	end;

    local half_passed;
	local living = true;
	local broken = false;

	local heartbeat_calls = 0;
	local render_calls = 0;

	local render_connection;
	local heartbeat_connection;

    heartbeat_connection = on_heartbeat:Connect(function(ndt)
		fake_call(ndt, 1);

		heartbeat_calls += 1;
        randomizer += (ndt + (math_random(1, 20) / math_pi));

		fake_call(ndt, 2);
    end);

	local can_call_render;
	local function render_progress(ndt)
		if (not living) then
			return;
		end;

		if (not can_call_render) then
			return on_detection('attempt to hook "render progress"');
		end;

		local min = (randomizer > 15 and randomizer // 10 or 0);
		if (min < 500000) then
			min += math_abs(get_time_delta() * 100000);
		elseif (min > 700000) then
			min -= math_abs(get_time_delta() * (min * 10));
		end;
		
		local randomized = (half_passed and math_random(min // 1, (min + (randomizer / (ndt * 1337))) // 1) or 0);

		if (half_passed and (randomized == 0 or randomized < (min // 1))) then
			living = false;
			render_connection:Disconnect();
			return warn('hmm..');
		end;

		randomizer += (ndt + randomized);
	end;

    render_connection = on_render:Connect(function(ndt)
		fake_call(ndt, 1);

		render_calls += 1;

		can_call_render = true;
		if (not pcall(render_progress, ndt)) then
			can_call_render = false;

			--[[living = false;
			broken = true;
			heartbeat_connection:Disconnect();
			render_connection:Disconnect();

			warn('broken');]]
		else
			can_call_render = false;
		end;

		fake_call(ndt, 2);
    end);

    if (
		type(heartbeat_connection) ~= 'userdata' or typeof(heartbeat_connection) ~= 'RBXScriptConnection' 
		or type(render_connection) ~= 'userdata' or typeof(render_connection) ~= 'RBXScriptConnection'
	) then
		living = false;
        heartbeat_connection:Disconnect();
        render_connection:Disconnect();

        return on_detection('connection replacement');
    end;

	local anomaly_count = 0;
	for _= 1, 3 do
		local timed = tick();
		fwait();
		if (timed == tick()) then
			anomaly_count += 1;
		end;
	end;

	if (anomaly_count > 1) then
		return on_detection('tick anomaly');
	end;

    wait(0.5);
    half_passed = true;
	fwait(0.5);

	if (broken or not living) then
		return;
	end;

	heartbeat_connection:Disconnect();
    render_connection:Disconnect();

	living = false;

	randomizer = (((
        #workspace:GetDescendants() + 
        #roblox:GetChildren() + 
        #run:GetDescendants() + 
        #roblox:GetDescendants() + 
        client.UserId + 
        string_byte(string_sub(client.Name, 1, 1)) + 
        (identifyexecutor and typeof(identifyexecutor()) == 'string' and #identifyexecutor() or 0) + 
        (gethwid and typeof(gethwid()) == 'string' and #gethwid() or 0) + 
        convert_table(getgenv()) +
        convert_table(_G) +
        (listfiles and #listfiles(''))
    ) / 133777) + (randomizer / math_pi) + (get_memory_flow() * 10));

	local time_list = {
		{timed = os_time(); compare_with = os_time};
		{timed = os_clock(); compare_with = os_clock};
	};
    fwait(1.1);
	for _, data in time_list do
		if (data.timed == data.compare_with()) then
			return on_detection('time replacement');
		end;
	end;

	local ticks = {};
	for i = 1, (((randomizer % 10) * 30) // 1) do
		ticks[#ticks + 1] = tick();
		fwait();
		if (i > 1 and ticks[i - 1] >= ticks[i]) then
			return on_detection('tick hook');
		end;
	end;

    math.random = function()
		if (randomizer < 10) then
			randomizer *= 100000000 + (get_memory_flow() * 10);
		end;

		local temp = randomizer;
		local length = 1;
		repeat
			length *= 10;
			temp = temp / 10;
		until (temp < 1);
		local saved = randomizer // (length / 10);

		randomizer -= (saved * (length / 10));
		return saved;
    end;
	local math_random = math.random;

	local function encrypt(input)
		if (typeof(input) ~= 'table') then
			input = string_new(input);
		end;
		local output = {''};
	
		local default = (function()
			local result = #input;
			
			if (result >= 10) then
				local count;
				repeat
					count = 0;
	
					local temp = result;
					repeat
						count += 1;
						temp /= 10;
					until (temp < 10);
	
					local temp = 1;
					for i = 1, count do
						temp *= 10;
					end;
	
					result -= temp;
				until (result < 10);
			end;
			
			return (result);
		end)();
	
		local count = default;
		local count_2 = 0;
		local direction = 1;
		for i = 1, #input do
			count += 1;
			if (count == (default + 4)) then
				count_2 += 1;
				count = default;
			end;
	
			direction = ((count_2 % 2 == 0) and 1 or -1);

	
			output = string_connect(output, string_char(
				string_byte(
					string_sub2(input, i, i)
				) + (count * direction)
			));
		end;

		local temp = output;
		output = {''};
		for i = 2, #temp do
			local got = (string_byte(string_sub2(temp, i, i)) .. '');

			if (#got == 2) then got = ('0' .. got); end;
			if (#got == 1) then got = ('00' .. got); end;
	
			output = string_connect(output, string_new(got));
		end;
		
		local list = {
			{
				['0'] = {';';':';';';':'};
				['1'] = {';';':';':';';'};
				['2'] = {':';':';';';':'};
				['3'] = {':';';';';';';'};
				['4'] = {';';';';';';';'};
				['5'] = {':';':';':';';'};
				['6'] = {':';';';':';':'};
				['7'] = {';';';';':';';'};
				['8'] = {':';';';';';':'};
				['9'] = {':';':';':';':'};
			};
			{
				['0'] = {':';';';':';':'};
				['1'] = {':';';';';';':'};
				['2'] = {';';';';':';';'};
				['3'] = {':';':';';';':'};
				['4'] = {';';';';';';';'};
				['5'] = {':';':';':';':'};
				['6'] = {';';':';':';';'};
				['7'] = {':';';';';';';'};
				['8'] = {':';':';':';';'};
				['9'] = {';';':';';';':'};
			};
			{
				['0'] = {';';';';':';';'};
				['1'] = {':';';';';';';'};
				['2'] = {';';':';';';':'};
				['3'] = {':';':';':';';'};
				['4'] = {':';';';':';':'};
				['5'] = {':';';';';';':'};
				['6'] = {':';':';':';':'};
				['7'] = {';';':';':';';'};
				['8'] = {';';';';';';';'};
				['9'] = {':';':';';';':'};
			};
		};
	
		local count = 0;
		local temp = output;
		output = {''};
		for i = 2, #temp do
			count += 1;
	
			local data = list[count];
			if (not data) then
				count = 1;
				data = list[1];
			end;

			output = string_connect(output, data[string_tocstring(string_sub2(temp, i, i))]);
		end;
		
		output = string_reverse(string_connect(string_sub2(output, 5, #output), string_sub2(output, 1, 4)));
		
		return (output);
	end;
	
	local function decrypt(input)
		if (typeof(input) ~= 'table') then
			input = string_new(input);
		end;
		local output = {};
		
		output = string_reverse(input);
		output = string_connect(string_sub2(output, #output - 2, #output), string_sub2(output, 1, #output - 3));
		
		local list = {
			{
				[';:;:'] = '0';
				[';::;'] = '1';
				['::;:'] = '2';
				[':;;;'] = '3';
				[';;;;'] = '4';
				[':::;'] = '5';
				[':;::'] = '6';
				[';;:;'] = '7';
				[':;;:'] = '8';
				['::::'] = '9';
			};
			{
				[':;::'] = '0';
				[':;;:'] = '1';
				[';;:;'] = '2';
				['::;:'] = '3';
				[';;;;'] = '4';
				['::::'] = '5';
				[';::;'] = '6';
				[':;;;'] = '7';
				[':::;'] = '8';
				[';:;:'] = '9';
			};
			{
				[';;:;'] = '0';
				[':;;;'] = '1';
				[';:;:'] = '2';
				[':::;'] = '3';
				[':;::'] = '4';
				[':;;:'] = '5';
				['::::'] = '6';
				[';::;'] = '7';
				[';;;;'] = '8';
				['::;:'] = '9';
			};
		};
	
		local count = 0;
		local temp = output;
		output = {};
		for i = 1, #temp, 4 do
			count += 1;
	
			local data = list[count];
			if (not data) then
				count = 1;
				data = list[1];
			end;
			
			output = string_connect(output, {data[string_tocstring(string_sub2(temp, i, i + 3))]});
		end;
		
		local temp = output;
		output = {};
		for i = 1, #temp, 3 do
			output = string_connect(output, string_char2(string_tocstring(string_sub2(temp, i, i + 2))));
		end;
		
		local default = (function()
			local result = #output;
			
			if (result >= 10) then
				local count;
				repeat
					count = 0;
	
					local temp = result;
					repeat
						count += 1;
						temp /= 10;
					until (temp < 10);
	
					local temp = 1;
					for i = 1, count do
						temp *= 10;
					end;
	
					result -= temp;
				until (result < 10);
			end;
			
			return (result);
		end)();
	
		local count = default;
		local count_2 = 0;
		local direction = 1;
		local temp = output;
		output = {};
		for i = 1, #temp do
			count += 1;
			if (count == (default + 4)) then
				count_2 += 1;
				count = default;
			end;
	
			direction = ((count_2 % 2 == 0) and -1 or 1);
	
			output = string_connect(output, string_char(
				string_byte(
					string_sub2(temp, i, i)
				) + (count * direction)
			));
		end;
		return (output);
	end;

	local request_id = {};
	for _= 1, 50 do
		request_id = string_connect(request_id, {math_random() .. ''});
	end;

	local function make_arguments(arguments)
		local result = {};

		for index, value in arguments do
			if (
				string_find(index, {'@';'@';'@'}) or string_find(index, {'=';'#';'='})
				or string_find(value, {'@';'@';'@'}) or string_find(value, {'=';'#';'='})
			) then
				return warn('??');
			end;

			result = string_connect(result, {'@';'@';'@'}, index, {'=';'#';'='}, value);
		end;

		local encrypted = string_tocstring(encrypt(result));
		local keys = {
			['::::'] = 'a';
			[':::;'] = 'b';
			['::;;'] = 'c';
			[':;;;'] = 'd';
			[';;;;'] = 'e';
			[';;;:'] = 'f';
			[';;::'] = 'g';
			[';:::'] = 'h';
			[':;::'] = 'i';
			['::;:'] = 'j';
			[':;;:'] = 'k';
			[';;:;'] = 'l';
			[';:;;'] = 'm';
			[';:;:'] = 'n';
			[':;:;'] = 'o';
			[';::;'] = 'p';
		};

		local i = 1;
		local to_send = '';
		repeat
			to_send = to_send .. keys[string_sub(encrypted, i, i + 3)];
			i += 4;
		until (i >= #encrypted);

		return (to_send);
	end;

	local to_send = make_arguments({
		[{'r';'e';'q';'u';'e';'s';'t';'_';'i';'d'}] = request_id;
		[{'k';'e';'y'}] = string_new(script_key .. '');
		[{'h';'w';'i';'d'}] = string_new(hwid .. '');
		[{'g';'a';'m';'e'}] = string_connect(string_new(roblox.PlaceId .. ''), {';'}, string_new(game.name .. ''));
		[{'e';'x';'e';'c';'u';'t';'o';'r'}] = string_new(identifyexecutor and (identifyexecutor() .. '') or 'unknown');
		[{'p';'l';'a';'t';'f';'o';'r';'m'}] = string_new(uis:GetPlatform().Name .. '');
		[{'p';'r';'o';'f';'i';'l';'e'}] = string_connect(string_new(client.UserId .. ''), {';'}, string_new(client.Name .. ''));
	});

	local answer = roblox:HttpGet(server .. '?0=' .. to_send);

	local function check_answer()
		if (typeof(answer) ~= 'string') then
			return (true), warn('idk');
		elseif (
			answer == 'blacklisted'
			or answer == 'auth disabled'
			or answer == 'wrong key or hwid'
			or answer == 'key time ended'
		) then
			return (true), warn(answer);
		elseif (_string.find(_string.lower(answer), 'error')) then
			return (true), warn('server error');
		end;
	end;

	local is_bad_answer, bad_answer_reason = check_answer();
	if (is_bad_answer) then
		return (bad_answer_reason);
	elseif (answer == '') then
		warn('server answer is empty, trying to fix..');

		warn(#to_send);
		local to_send = make_arguments({
			[{'r';'e';'q';'u';'e';'s';'t';'_';'i';'d'}] = request_id;
			[{'k';'e';'y'}] = string_new(script_key .. '');
			[{'h';'w';'i';'d'}] = string_new(hwid .. '');
			[{'e';'x';'e';'c';'u';'t';'o';'r'}] = string_new(identifyexecutor and (identifyexecutor() .. '') or 'unknown');
			[{'p';'r';'o';'f';'i';'l';'e'}] = string_connect(string_new(client.UserId .. ''), {';'}, {''});
		});
	
		warn(#to_send);
		answer = roblox:HttpGet(server .. '?0=' .. to_send);

		local is_bad_answer, bad_answer_reason = check_answer();
		if (is_bad_answer) then
			return (bad_answer_reason);
		elseif (answer == '') then
			warn('cant fix');
		end;
	end;

	answer = decrypt(answer);

	local has_request_id;
	for i = 1, #answer do
		if (string_tocstring(string_sub2(answer, i, i + 4)) == '@@@@@') then

			local i2 = i;
			repeat
				i2 += 1;
			until (string_tocstring(string_sub2(answer, i2, i2 + 4)) == '=#=#=');
			local index = string_tocstring(string_sub2(answer, i + 5, i2 - 1));
	
			local i3 = i;
			repeat
				i3 += 1;
			until (i3 > #answer or string_tocstring(string_sub2(answer, i3, i3 + 4)) == '@@@@@');
			local value = string_tocstring(string_sub2(answer, i2 + 5, i3 - 1));
	
			if (index ~= 'request_id') then
				auth[index] = value;
			else
				has_request_id = true;
				if (value ~= string_tocstring(request_id)) then
					return on_detection('server answer replacement');
				end;
			end;
		end;
	end;

	if (not has_request_id) then
		return warn('no request id wtf lol');
	end;
end;

loader.on_auth_passed();
repeat fwait(); until (launch_eternal);

-- ☆ //   creating folders   // ☆ --

local folders = {
	'games';
	'chat';
	'crashlogs';
	'fonts';
	'sounds';
};

for index, value in folders do
	if (typeof(value) == 'string') then
		if (not isfolder('eternal/' .. value)) then
			makefolder('eternal/' .. value);
		end;
	elseif (typeof(value) == 'table') then
		if (not isfolder('eternal/' .. index)) then
			makefolder('eternal/' .. index);
		end;

		for _, folder in value do
			local path = ('eternal/' .. index .. '/' .. folder);

			if (not isfolder(path)) then
				makefolder(path);
			end;
		end;
	end;
end;

makefolder('eternal/games/' .. game.name);

local data = ('eternal/games/' .. game.name .. '/data.json')
if (not isfile(data) or readfile(data) == '[]') then
    writefile(data, http:JSONEncode(game.data));
end;

for _, folder in {'configs'; 'lua'; unpack(game.folders)} do
	makefolder('eternal/games/' .. game.name .. '/' .. folder);
end;

writefile('eternal/chat/test.txt', '123\n321\nasd');

-- ☆ //   loading assets   // ☆ --

local fonts = {
	default = Enum.Font.SourceSans;
	code = Enum.Font.Code;
	arcade  = Enum.Font.Arcade;
	montserrat = Enum.Font.Montserrat;
};

local sounds = {};

if (getcustomasset) then
	pcall(LPH_NO_VIRTUALIZE(function()

		-- ☆ //   fonts   // ☆ --

		local function register(name, weight, style, asset)
			local path = 'eternal/fonts/' .. name;

			if (not isfile(path .. '.tff')) then
				writefile(path .. '.tff', asset);
			end;

			if (not isfile(path .. '.font')) then
				local data = {
					name = name;
					faces = {{
						name = 'Regular';
						weight = weight;
						style = style;
						assetId = getcustomasset(path .. '.tff');
					}};
				};
				
				writefile(path .. '.font', http:JSONEncode(data));
				repeat fwait(); until isfile(path .. '.font');
			end;

			return getcustomasset(path .. '.font');
		end;

		fonts.pixel = Font.new(register('pixel', 200, 'normal', crypt.base64.decode(
			"AAEAAAANAIAAAwBQRFNJRwAAAAEAAQX0AAAACEdERUYDBAAkAAEF/AAAAChPUy8y1NZFSAAAANwAAABgY21hcNZo3swAAQp8AAAIOGdhc3AAAAADAAEF7AAAAAhnbHlmEGqBuwAAGjgAANTQaGVhZAZHGCYAAPpgAAAANmhoZWERQQ7WAAAZ9AAAACRobXR4Ywj7gAAA+pgAAAtUbG9jYQEl1TwAAO8IAAALWG1heHAC4wA8AAAaGAAAACBuYW1lomnC7QABBiQAAARWcG9zdN5ON9IAAAE8AAAYuAADBGEBkAAFAAQDAAMAAAABgAMAAwAAAAMAAEwBMgAAAAAEAAAAAAAAAKAAAL9AAGB7AAAAAAAAAABGU1RSAEAAIPsCCQADAAAACoD9wAAAAf8AAAAAB4AJAAAAACAAAQACAAAAAAAAAJgATAAAAAAAAAAAAAAAAAAAAAAAAAAAAtUAAAABAAIAAwAEAAUABgAHAAgACQAKAAsADAANAA4ADwAQABEAEgATABQAFQAWABcAGAAZABoAGwAcAB0AHgAfACAAIQAiACMAJAAlACYAJwAoACkAKgArACwALQAuAC8AMAAxADIAMwA0ADUANgA3ADgAOQA6ADsAPAA9AD4APwBAAEEAQgBDAEQARQBGAEcASABJAEoASwBMAE0ATgBPAFAAUQBSAFMAVABVAFYAVwBYAFkAWgBbAFwAXQBeAF8AYABhAKMAhACFAL0AlgDoAIYAjgCLAJ0AqQCkAIoA2gCDAJMA8gDzAI0AlwCIAMMA3gDxAJ4AqgD1APQA9gCiAK0AyQDHAK4AYgBjAJAAZADLAGUAyADKAM8AzADNAM4A6QBmANMA0ADRAK8AZwDwAJEA1gDUANUAaADrAO0AiQBqAGkAawBtAGwAbgCgAG8AcQBwAHIAcwB1AHQAdgB3AOoAeAB6AHkAewB9AHwAuAChAH8AfgCAAIEA7ADuALoBAgEDAQQBBQEGAQcA/QD+AQgBCQEKAQsA/wEAAQwBDQEOAQEBDwEQAREBEgETARQBFQEWARcBGAEZARoA+AD5ARsBHAEdAR4BHwEgASEBIgEjASQBJQEmAScBKAEpASoA+gDXASsBLAEtAS4BLwEwATEBMgEzATQBNQE2ATcBOAE5AOIA4wE6ATsBPAE9AT4BPwFAAUEBQgFDAUQBRQFGAUcBSACwALEBSQFKAUsBTAFNAU4BTwFQAVEBUgD7APwA5ADlAVMBVAFVAVYBVwFYAVkBWgFbAVwBXQFeAV8BYAFhAWIBYwFkAWUBZgFnAWgAuwFpAWoBawFsAOYA5wFtAW4BbwFwAKYBcQFyAXMBdAF1AXYBdwF4AXkBegF7AXwBfQF+AX8BgAGBAYIBgwGEAYUBhgGHAYgBiQGKANgA4QGLAYwBjQDbANwA3QDgANkA3wGOAY8BkAGRAZIBkwGUAZUBlgGXAZgBmQGaAZsBnAGdAZ4BnwGgAaEBogGjAaQBpQGmAacBqAGpAaoBqwGsAa0BrgGvAbABsQGyAJ8BswG0AbUBtgG3AbgBuQG6AbsBvAG9Ab4BvwHAAcEBwgHDAcQBxQHGAccByACbAckBygHLAcwBzQHOAc8B0AHRAdIB0wHUAdUB1gHXAdgB2QHaAdsB3AHdAd4B3wHgAeEB4gHjAeQB5QHmAecB6AHpAeoB6wHsAe0B7gHvAfAB8QHyAfMB9AH1AfYB9wH4AfkB+gH7AfwB/QH+Af8CAAIBAgICAwIEAgUCBgIHAggCCQIKAgsCDAINAg4CDwIQAhECEgITAhQCFQIWAhcCGAIZAhoCGwIcAh0CHgIfAiACIQIiAiMCJAIlAiYCJwIoAikCKgIrAiwCLQIuAi8CMAIxAjICMwI0AjUCNgI3AjgCOQI6AjsCPAI9Aj4CPwJAAkECQgJDAkQCRQJGAkcCSAJJAkoCSwJMAk0CTgJPAlACUQJSAlMCVAJVAlYCVwJYAlkCWgJbAlwCXQJeAl8CYAJhAmICYwJkAmUCZgJnAmgCaQJqAmsCbAJtAm4CbwJwAnECcgJzAnQCdQJ2AncCeAJ5AnoCewJ8An0CfgJ/AoACgQKCAoMChAKFAoYChwKIAokCigC2ALcAxAKLALQAtQDFAowAggDCAIcCjQCrAMYCjgKPApACkQC+AL8AvAKSApMClAKVApYClwKYApkCmgKbApwCnQKeAp8CoAKhAqICowKkAqUCpgKnAqgCqQKqAqsCrAKtAq4CrwKwAIwCsQKyArMCtAK1ArYCtwK4ArkCugK7ArwCvQK+Ar8CwALBAsICwwLEAsUCxgLHAsgCyQLKAssAqAClAJIAnALMAKcAjwCUAJUCzQLOAs8C0ALRAtIC0wLUAtUC1gLXAtgC2QLaAtsC3ALdAt4AwADBB0FtYWNyb24HYW1hY3JvbgZBYnJldmUGYWJyZXZlB0FvZ29uZWsHYW9nb25lawtDY2lyY3VtZmxleAtjY2lyY3VtZmxleARDZG90BGNkb3QGRGNhcm9uBmRjYXJvbgZEY3JvYXQHRW1hY3JvbgdlbWFjcm9uBkVicmV2ZQZlYnJldmUERWRvdARlZG90B0VvZ29uZWsHZW9nb25lawZFY2Fyb24GZWNhcm9uC0djaXJjdW1mbGV4C2djaXJjdW1mbGV4BEdkb3QEZ2RvdAhHY2VkaWxsYQhnY2VkaWxsYQtIY2lyY3VtZmxleAtoY2lyY3VtZmxleARIYmFyBGhiYXIGSXRpbGRlBml0aWxkZQdJbWFjcm9uB2ltYWNyb24GSWJyZXZlBmlicmV2ZQdJb2dvbmVrB2lvZ29uZWsCSUoCaWoLSmNpcmN1bWZsZXgLamNpcmN1bWZsZXgIS2NlZGlsbGEIa2NlZGlsbGEMa2dyZWVubGFuZGljBkxhY3V0ZQZsYWN1dGUITGNlZGlsbGEIbGNlZGlsbGEGTGNhcm9uBmxjYXJvbgRMZG90BGxkb3QGTmFjdXRlBm5hY3V0ZQhOY2VkaWxsYQhuY2VkaWxsYQZOY2Fyb24GbmNhcm9uC25hcG9zdHJvcGhlA0VuZwNlbmcHT21hY3JvbgdvbWFjcm9uBk9icmV2ZQZvYnJldmUJT2RibGFjdXRlCW9kYmxhY3V0ZQZSYWN1dGUGcmFjdXRlCFJjZWRpbGxhCHJjZWRpbGxhBlJjYXJvbgZyY2Fyb24GU2FjdXRlBnNhY3V0ZQtTY2lyY3VtZmxleAtzY2lyY3VtZmxleAhUY2VkaWxsYQh0Y2VkaWxsYQZUY2Fyb24GdGNhcm9uBFRiYXIEdGJhcgZVdGlsZGUGdXRpbGRlB1VtYWNyb24HdW1hY3JvbgZVYnJldmUGdWJyZXZlBVVyaW5nBXVyaW5nCVVkYmxhY3V0ZQl1ZGJsYWN1dGUHVW9nb25lawd1b2dvbmVrC1djaXJjdW1mbGV4C3djaXJjdW1mbGV4C1ljaXJjdW1mbGV4C3ljaXJjdW1mbGV4BlphY3V0ZQZ6YWN1dGUEWmRvdAR6ZG90BWxvbmdzB0J0b3BiYXIHYnRvcGJhcgVTY2h3YQdac3Ryb2tlB3pzdHJva2UDRXpoB0dzdHJva2UHZ3N0cm9rZQZHY2Fyb24GZ2Nhcm9uBktjYXJvbgZrY2Fyb24HT29nb25lawdvb2dvbmVrCEV6aGNhcm9uCGV6aGNhcm9uCkFyaW5nYWN1dGUKYXJpbmdhY3V0ZQdBRWFjdXRlB2FlYWN1dGULT3NsYXNoYWN1dGULb3NsYXNoYWN1dGUMU2NvbW1hYWNjZW50DHNjb21tYWFjY2VudAtUY29tbWFiZWxvdwt0Y29tbWFiZWxvdwhkb3RsZXNzagVzY2h3YQNlemgQZmlyc3R0b25lY2hpbmVzZRFzZWNvbmR0b25lY2hpbmVzZRFmb3VydGh0b25lY2hpbmVzZRBudW1lcmFsc2lnbmdyZWVrFW51bWVyYWxzaWdubG93ZXJncmVlaw1xdWVzdGlvbmdyZWVrBXRvbm9zDmRpYWx5dGlrYXRvbm9zCkFscGhhdG9ub3MJYW5vdGVsZWlhDEVwc2lsb250b25vcwhFdGF0b25vcwlJb3RhdG9ub3MMT21pY3JvbnRvbm9zDFVwc2lsb250b25vcwpPbWVnYXRvbm9zEWlvdGFkaWVyZXNpc3Rvbm9zBUFscGhhBEJldGEFR2FtbWEKRGVsdGFncmVlawdFcHNpbG9uBFpldGEDRXRhBVRoZXRhBElvdGEFS2FwcGEGTGFtYmRhAk11Ak51AlhpB09taWNyb24CUGkDUmhvBVNpZ21hA1RhdQdVcHNpbG9uA1BoaQNDaGkDUHNpDElvdGFkaWVyZXNpcw9VcHNpbG9uZGllcmVzaXMKYWxwaGF0b25vcwxlcHNpbG9udG9ub3MIZXRhdG9ub3MJaW90YXRvbm9zFHVwc2lsb25kaWVyZXNpc3Rvbm9zBWFscGhhBGJldGEFZ2FtbWEFZGVsdGEHZXBzaWxvbgR6ZXRhA2V0YQV0aGV0YQRpb3RhBWthcHBhBmxhbWJkYQdtdWdyZWVrAm51AnhpB29taWNyb24DcmhvBnNpZ21hMQVzaWdtYQN0YXUHdXBzaWxvbgNwaGkDY2hpA3BzaQVvbWVnYQxpb3RhZGllcmVzaXMPdXBzaWxvbmRpZXJlc2lzDG9taWNyb250b25vcwx1cHNpbG9udG9ub3MKb21lZ2F0b25vcwd1bmkwM0Q3B3VuaTA0MDAJYWZpaTEwMDIzCWFmaWkxMDA1MQlhZmlpMTAwNTIJYWZpaTEwMDUzCWFmaWkxMDA1NAlhZmlpMTAwNTUJYWZpaTEwMDU2CWFmaWkxMDA1NwlhZmlpMTAwNTgJYWZpaTEwMDU5CWFmaWkxMDA2MAlhZmlpMTAwNjEHdW5pMDQwRAlhZmlpMTAwNjIJYWZpaTEwMTQ1CUFjeXJpbGxpYwlhZmlpMTAwMTgJYWZpaTEwMDE5CWFmaWkxMDAyMAlhZmlpMTAwMjEJYWZpaTEwMDIyCWFmaWkxMDAyNAlhZmlpMTAwMjUJYWZpaTEwMDI2CWFmaWkxMDAyNwlhZmlpMTAwMjgJYWZpaTEwMDI5CWFmaWkxMDAzMAlhZmlpMTAwMzEJYWZpaTEwMDMyCWFmaWkxMDAzMwlhZmlpMTAwMzQJYWZpaTEwMDM1CWFmaWkxMDAzNglhZmlpMTAwMzcJYWZpaTEwMDM4CWFmaWkxMDAzOQlhZmlpMTAwNDAJYWZpaTEwMDQxCWFmaWkxMDA0MglhZmlpMTAwNDMJYWZpaTEwMDQ0CWFmaWkxMDA0NQlhZmlpMTAwNDYJYWZpaTEwMDQ3CWFmaWkxMDA0OAlhZmlpMTAwNDkJYWN5cmlsbGljCWFmaWkxMDA2NglhZmlpMTAwNjcJYWZpaTEwMDY4CWFmaWkxMDA2OQlhZmlpMTAwNzAJYWZpaTEwMDcyCWFmaWkxMDA3MwlhZmlpMTAwNzQJYWZpaTEwMDc1CWFmaWkxMDA3NglhZmlpMTAwNzcJYWZpaTEwMDc4CWFmaWkxMDA3OQlhZmlpMTAwODAJYWZpaTEwMDgxCWFmaWkxMDA4MglhZmlpMTAwODMJYWZpaTEwMDg0CWFmaWkxMDA4NQlhZmlpMTAwODYJYWZpaTEwMDg3CWFmaWkxMDA4OAlhZmlpMTAwODkJYWZpaTEwMDkwCWFmaWkxMDA5MQlhZmlpMTAwOTIJYWZpaTEwMDkzCWFmaWkxMDA5NAlhZmlpMTAwOTUJYWZpaTEwMDk2CWFmaWkxMDA5Nwd1bmkwNDUwCWFmaWkxMDA3MQlhZmlpMTAwOTkJYWZpaTEwMTAwCWFmaWkxMDEwMQlhZmlpMTAxMDIJYWZpaTEwMTAzCWFmaWkxMDEwNAlhZmlpMTAxMDUJYWZpaTEwMTA2CWFmaWkxMDEwNwlhZmlpMTAxMDgJYWZpaTEwMTA5B3VuaTA0NUQJYWZpaTEwMTEwCWFmaWkxMDE5MwlhZmlpMTAxNDYJYWZpaTEwMTk0CWFmaWkxMDE0NwlhZmlpMTAxOTUJYWZpaTEwMTQ4CWFmaWkxMDE5Ngd1bmkwNDhBB3VuaTA0OEIHdW5pMDQ4Qwd1bmkwNDhEB3VuaTA0OEUHdW5pMDQ4RglhZmlpMTAwNTAJYWZpaTEwMDk4EUdoZXN0cm9rZWN5cmlsbGljEWdoZXN0cm9rZWN5cmlsbGljFFpoZWRlc2NlbmRlcmN5cmlsbGljFHpoZWRlc2NlbmRlcmN5cmlsbGljE1plZGVzY2VuZGVyY3lyaWxsaWMTemVkZXNjZW5kZXJjeXJpbGxpYxNLYWRlc2NlbmRlcmN5cmlsbGljE2thZGVzY2VuZGVyY3lyaWxsaWMYS2F2ZXJ0aWNhbHN0cm9rZWN5cmlsbGljGGthdmVydGljYWxzdHJva2VjeXJpbGxpYxFLYWJhc2hraXJjeXJpbGxpYxFrYWJhc2hraXJjeXJpbGxpYxNFbmRlc2NlbmRlcmN5cmlsbGljE2VuZGVzY2VuZGVyY3lyaWxsaWMTRXNkZXNjZW5kZXJjeXJpbGxpYxNlc2Rlc2NlbmRlcmN5cmlsbGljEVVzdHJhaWdodGN5cmlsbGljEXVzdHJhaWdodGN5cmlsbGljF1VzdHJhaWdodHN0cm9rZWN5cmlsbGljF3VzdHJhaWdodHN0cm9rZWN5cmlsbGljE0hhZGVzY2VuZGVyY3lyaWxsaWMTaGFkZXNjZW5kZXJjeXJpbGxpYxRDaGVkZXNjZW5kZXJjeXJpbGxpYxRjaGVkZXNjZW5kZXJjeXJpbGxpYxlDaGV2ZXJ0aWNhbHN0cm9rZWN5cmlsbGljGWNoZXZlcnRpY2Fsc3Ryb2tlY3lyaWxsaWMMU2hoYWN5cmlsbGljDHNoaGFjeXJpbGxpYxBwYWxvY2hrYWN5cmlsbGljEFpoZWJyZXZlY3lyaWxsaWMQemhlYnJldmVjeXJpbGxpYwd1bmkwNEM1B3VuaTA0QzYORW5ob29rY3lyaWxsaWMOZW5ob29rY3lyaWxsaWMHdW5pMDRDOQd1bmkwNENBB3VuaTA0Q0QHdW5pMDRDRQd1bmkwNENGEUFkaWVyZXNpc2N5cmlsbGljEWFkaWVyZXNpc2N5cmlsbGljC0FpZWN5cmlsbGljC2FpZWN5cmlsbGljDVNjaHdhY3lyaWxsaWMJYWZpaTEwODQ2D0ltYWNyb25jeXJpbGxpYw9pbWFjcm9uY3lyaWxsaWMRSWRpZXJlc2lzY3lyaWxsaWMRaWRpZXJlc2lzY3lyaWxsaWMRT2RpZXJlc2lzY3lyaWxsaWMRb2RpZXJlc2lzY3lyaWxsaWMPT2JhcnJlZGN5cmlsbGljD29iYXJyZWRjeXJpbGxpYwd1bmkwNEVDB3VuaTA0RUQPVW1hY3JvbmN5cmlsbGljD3VtYWNyb25jeXJpbGxpYxFVZGllcmVzaXNjeXJpbGxpYxF1ZGllcmVzaXNjeXJpbGxpYwZXZ3JhdmUGd2dyYXZlBldhY3V0ZQZ3YWN1dGUJV2RpZXJlc2lzCXdkaWVyZXNpcwd1bmkxRTlFBllncmF2ZQZ5Z3JhdmURcXVvdGVsZWZ0cmV2ZXJzZWQHdW5pMjAxRgd1bmkyMDIzBm1pbnV0ZQZzZWNvbmQNcHJpbWVyZXZlcnNlZAd1bmkyMDM2DHplcm9zdXBlcmlvcgd1bmkyMDcxDGZvdXJzdXBlcmlvcgxmaXZlc3VwZXJpb3ILc2l4c3VwZXJpb3INc2V2ZW5zdXBlcmlvcg1laWdodHN1cGVyaW9yDG5pbmVzdXBlcmlvcgx6ZXJvaW5mZXJpb3ILb25laW5mZXJpb3ILdHdvaW5mZXJpb3INdGhyZWVpbmZlcmlvcgxmb3VyaW5mZXJpb3IMZml2ZWluZmVyaW9yC3NpeGluZmVyaW9yDXNldmVuaW5mZXJpb3INZWlnaHRpbmZlcmlvcgxuaW5laW5mZXJpb3IDd29uBEV1cm8HdW5pMjBBRQd1bmkyMEIxB3VuaTIwQjQHdW5pMjBCOAd1bmkyMEI5B3VuaTIwQkEJYWZpaTYxMjQ4CWFmaWk2MTI4OQlhZmlpNjEzNTIHdW5pMjExNwd1bmkyMTIwCWVzdGltYXRlZAd1bmkyMTUwB3VuaTIxNTEHdW5pMjE1MghvbmV0aGlyZAl0d290aGlyZHMHdW5pMjE1NQd1bmkyMTU2B3VuaTIxNTcHdW5pMjE1OAd1bmkyMTU5B3VuaTIxNUEJb25lZWlnaHRoDHRocmVlZWlnaHRocwtmaXZlZWlnaHRocwxzZXZlbmVpZ2h0aHMJYXJyb3dsZWZ0B2Fycm93dXAKYXJyb3dyaWdodAlhcnJv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wMDAwMABgP6AwAGA/oDAwMDAwMDAwAAAAAQAAAPAA8AJwAADAAkADQARAAARETMRFTUhETMRATUzFSU1MxXAAkDA/cDA/oDABIADAP0AwMADAPxABIDAwMDAwAAABAAAA8ADwAnAAAMACQANABEAABERMxEVNSERMxEBNTMVNTUzFcACQMD9wMDABIADAP0AwMADAPxABIDAwMDAwAAAAAAFAAADwAPACcAAAwAJAA0AEQAVAAARETMRFTUhETMRATUzFTM1MxUlNTMVwAJAwP0AwMDA/oDABIADAP0AwMADAPxABIDAwMDAwMDAAAAAAAQAAAPAA8AJAAADAAkADQARAAARETMRFTUhETMRATUzFTM1MxXAAkDA/QDAwMAEgAMA/QDAwAMA/EAEgMDAwMAAAAAABQAAAwADwAnAAAMABwAPABMAFwAAETUhFQERMxEBNSE1IREzEQE1MxU1NTMVAwD9AMACQP3AAkDA/cDAwAMAwMACQAJA/cD+gMDAAkD8QASAwMDAwMAAAAMAAAMAA8AJAAADAAcAEwAAAREzEQE1IRUBETMRMxUjFSEVIREDAMD9wAGA/QDAwMACQP3ABUABgP6AAYDAwPxABgD9wMDAwP6AAAADAAADAAPAB4AAAwAHAA8AABE1IRUBETMRATUhNSERMxEDAP0AwAJA/cACQMADAMDAAkACQP3A/oDAwAJA/EAAAwAAA8ADwAqAAAsADwATAAARETMVITUzESMRIRERNSEVATUhFcACQMDA/cACQP3AAkADwASAwMD7gAMA/QAEgMDAAYDAwAAABAAAA8ADwAkAAAMADQARABUAABE1MxUVNSE1ITUhNTMRATUhFQE1IRXAAkD9wAJAwP0AAkD9wAJABIDAwMDAwMDA/QADAMDAAYDAwAAAAAACAAADwAPACoAACwATAAARETMVITUzESMRIRERETMVMzUzEcACQMDA/cDAwMADwASAwMD7gAMA/QAEgAJAwMD9wAAAAAQAAAPAA8AJwAADAA0AEQAZAAARNTMVFTUhNSE1ITUzEQE1IRUBETMVMzUzEcACQP3AAkDA/QACQP3AwMDABIDAwMDAwMDA/QADAMDAAYABgMDA/oAAAAADAAACQAPACQAABQARABUAAAERMxUzFQERMxUhNTMRIxEhERE1IRUCQMDA/EDAAkDAwP3AAkACQAGAwMABgASAwMD7gAMA/QAEgMDAAAAAAAMAAAJAA8AHgAADABMAFwAAETUzFQERITUhNSE1ITUzESMVMxUBNSEVwAGA/oACQP3AAkDAwMD9AAJABIDAwP3AAYDAwMDA/QDAwASAwMAABgAAA8ADwAqAAAMABwALAA8AFwAbAAATNSEVNTUzFSERMxEBNTMVJTUzNTMVMxUDNTMVwAJAwPxAwAJAwP0AwMDAwMADwMDAwMDAA8D8QAMAwMDAwMDAwAGAwMAAAAAABwAAA8ADwAnAAAMABwALAA8AEwAXABsAABM1IRU1NTMVIREzEQE1MxUlNSEVATUzFTU1MxXAAkDA/EDAAkDA/QACQP6AwMADwMDAwMDAAkD9wAGAwMDAwMABgMDAwMDAAAAAAAYAAAPAA8AKgAADAAcACwAPABcAGwAAEzUhFTU1MxUhETMRATUzFSURMxUzNTMRATUzFcACQMD8QMACQMD9AMDAwP6AwAPAwMDAwMADwPxAAwDAwMABgMDA/oABgMDAAAgAAAPAA8AJwAADAAcACwAPABMAFwAbAB8AABM1IRU1NTMVIREzEQE1MxUlNSEVATUzFTM1MxUlNTMVwAJAwPxAwAJAwP0AAkD9wMDAwP6AwAPAwMDAwMACQP3AAYDAwMDAwAGAwMDAwMDAwAAAAAAGAAADwAPACoAAAwAHAAsADwATABcAABM1IRU1NTMVIREzEQE1MxUlNSEVATUzFcACQMD8QMACQMD9AAJA/oDAA8DAwMDAwAPA/EADAMDAwMDAAYDAwAAABgAAA8ADwAkAAAMABwALAA8AEwAXAAATNSEVNTUzFSERMxEBNTMVJTUhFQE1MxXAAkDA/EDAAkDA/QACQP6AwAPAwMDAwMACQP3AAYDAwMDAwAGAwMAAAAcAAAPAA8AKgAADAAcACwAPABcAGwAfAAATNSEVNTUzFSERMxEBNTMVJTUzNTMVMxUBNTMVMzUzFcACQMD8QMACQMD9AMDAwP3AwMDAA8DAwMDAwAPA/EADAMDAwMDAwMABgMDAwMAACAAAA8ADwAnAAAMABwALAA8AEwAXABsAHwAAEzUhFTU1MxUhETMRATUzFSU1IRUBNTMVJTUzFTM1MxXAAkDA/EDAAkDA/QACQP6AwP6AwMDAA8DAwMDAwAJA/cABgMDAwMDAAYDAwMDAwMDAAAAAAAQAAAPAA8AKgAADAA8AEwAXAAABETMRBREhNTMVMxUhESEVATUzFTM1MxUDAMD8QAGAwMD9wAJA/cDAwMAEgAPA/EDABUDAwMD8QMAGAMDAwMAAAAQAAAPABUAJwAADAAcAEQAVAAARETMRETUhFQE1IREjNTMRMxETETMRwAGA/oACQMDAwMDABIACQP3AAkDAwP0AwAGAwAJA+sAEgAGA/oAAAgAAA8AEgAkAAAMAEwAAAREzEQURIzUzESEVIRUzFSMRIRUDwMD8QMDAAwD9wMDAAkAEgAPA/EDAAwDAAYDAwMD9wMAAAAAAAwAAA8AEgAkAAAMABwAZAAARETMRETUhFQE1IREjNTM1IzUzNTMVMxUjEcABgP6AAkDAwMDAwMDABIACQP3AAkDAwP0AwAGAwMDAwMDA/EAAAAAAAgAAA8ADwAqAAAsADwAAEREhFSEVIRUhESEVATUhFQPA/QABgP6AAwD9AAJAA8AFQMDAwP3AwAYAwMAABAAAA8ADwAkAAAMADQARABUAABM1IRUlETMVITUzESEVETUhFQE1IRXAAwD8QMACQMD9AAJA/cACQAPAwMDAAkDAwP6AwAJAwMABgMDAAAABAAADwAPACoAAEwAAEREzETMVMzUzETMVIRUhFSERIRXAwMDAwP0AAYD+gAMAA8AFQAGAwMD+gMDAwP3AwAAABAAAA8ADwAnAAAMADQARABkAABM1IRUlETMVITUzESEVETUhFQERMxUzNTMRwAMA/EDAAkDA/QACQP3AwMDAA8DAwMACQMDA/oDAAkDAwAGAAYDAwP6AAAIAAAPAA8AKgAALAA8AABERIRUhFSEVIREhFQE1MxUDwP0AAYD+gAMA/cDAA8AFQMDAwP3AwAYAwMAAAAQAAAPAA8AJAAADAA0AEQAVAAATNSEVJREzFSE1MxEhFRE1IRUBNTMVwAMA/EDAAkDA/QACQP6AwAPAwMDAAkDAwP6AwAJAwMABgMDAAAAAAQAAAkADwAkAABEAAAERIREhFSEVIRUhESEVIxUzFQJA/cADwP0AAYD+gAMAwMACQAGABUDAwMD9wMDAwAAAAAMAAAJAA8AHgAAJABMAFwAAAREhNSEVIxUzFQERMxUhNTMRIRURNSEVAkD+gAMAwMD8QMACQMD9AAJAAkABgMDAwMACQAJAwMD+gMACQMDAAAAAAAMAAAPAA8AKgAAPABMAFwAAEREhNTMVIRUhFSEVIREhFQE1MxUzNTMVAYDAAYD9AAGA/oADAP0AwMDAA8AFQMDAwMDA/cDABgDAwMDAAAAABgAAA8ADwAnAAAMADQARABUAGQAdAAATNSEVJREzFSE1MxEhFRE1IRUBNTMVJTUzFTM1MxXAAwD8QMACQMD9AAJA/oDA/oDAwMADwMDAwAJAwMD+gMACQMDAAYDAwMDAwMDAAAUAAAPAA8AKgAADAAkADQAXABsAABM1IRU1ESM1IREhETMREREzFTM1MxUzFQE1MxXAAkDAAYD8QMDAwMDA/cDAA8DAwMACQMD9AAPA/EADwAGAwMDAwAGAwMAABgAAAwADwAnAAAMABwARABUAGQAdAAARNSEVAREzEQE1ITUhESE1IREBNTMVMzUzFSU1MxUDAP0AwAJA/cACQP3AAwD9AMDAwP6AwAMAwMACQAGA/oD+gMDAAYDA/EAEgMDAwMDAwMAAAAAABAAAA8ADwAqAAAMACQANABcAABM1IRU1ESM1IREhETMREREzFTM1MxEzFcACQMABgPxAwMDAwMADwMDAwAJAwP0AA8D8QAPAAkDAwP6AwAAEAAADAAPACcAAAwAHABEAGQAAETUhFQERMxEBNSE1IREhNSERAREzFTM1MxEDAP0AwAJA/cACQP3AAwD9AMDAwAMAwMACQAGA/oD+gMDAAYDA/EAEgAGAwMD+gAAAAAAFAAADwAPACoAAAwAJAA0AEQAVAAATNSEVNREjNSERIREzERE1IRUBNTMVwAJAwAGA/EDAAwD9wMADwMDAwAJAwP0AA8D8QAPAwMABgMDAAAQAAAMAA8AJAAADAAcAEQAVAAARNSEVAREzEQE1ITUhESE1IREBNTMVAwD9AMACQP3AAkD9wAMA/cDAAwDAwAJAAYD+gP6AwMABgMD8QASAwMAAAAQAAAJAA8AJAAAHAA0AEQAVAAABESM1IRUjERMRIzUhESERMxERNSEVAYDAAkDAwMABgPxAwAMAAkABgMDA/oACQAJAwP0AA8D8QAPAwMAABAAAAwADwAnAAAMABwARABUAABE1IRUBETMRATUhNSERITUhEQERMxEDAP0AwAJA/cACQP3AAwD9wMADAMDAAkABgP6A/oDAwAGAwPxABIABgP6AAAAAAAQAAAPAA8AKgAALAA8AEwAXAAARETMRIREzESMRIRERNTMVMzUzFSU1MxXAAkDAwP3AwMDA/oDAA8AFQP6AAYD6wAMA/QAFQMDAwMDAwMAABgAAA8ADwAqAAAMABwAPABMAFwAbAAABETMRATUhFQERMxEzFSMRETUzFTM1MxUlNTMVAwDA/cABgP0AwMDAwMDA/oDAA8ADAP0AAwDAwP0ABUD9wMD9wAVAwMDAwMDAwAAAAAIAAAPAA8AJAAADAAsAAAE1IRUDESERIxEhEQMA/cDAA8DA/cAHgMDA/EAFQPrAAwD9AAADAAADwASACQAAAwAHABcAAAERMxEBNSEVAREjNTM1MxUzFSMVMxUjEQPAwP3AAYD9AMDAwMDAwMADwAMA/QADAMDA/QADwMDAwMDAwP3AAAP/QAPAAwAKgAADABUAGQAAAzUzFRE1MxEjNTM1IzUhFTMRIxEzFRE1MxXAwMDAwMABgMDAwMAJAMDA+sDAA8DAwMDA/oD8QMAGAMDAAAAABP9AA8ADAAnAAAMABwAPABMAABMRMxEBNTMVMzUjNSEVMxU1NTMVwMD9wMDAwAGAwMADwAPA/EAEgMDAwMDAwMDAwAACAAADwAJACoAACwAPAAARNTMRIzUhFSMRMxUBNSEVwMACQMDA/cACQAPAwAPAwMD8QMAGAMDAAAL/QAPAAYAJAAADAAcAABERMxEBNSEVwP6AAkADwAPA/EAEgMDAAAABAAADwAJACoAADwAAETUzESMRMxUzNTMRIxEzFcDAwMDAwMADwMADwAJAwMD9wPxAwAAAAv9AA8ABgAnAAAMACwAAEREzEQERMxUzNTMRwP6AwMDAA8ADwPxABIABgMDA/oAAAQAAAkACQAkAABEAABMRIzUzESM1IRUjETMVIxUzFcDAwMACQMDAwMACQAGAwAPAwMD8QMDAwAACAAACQAGACQAABQAJAAARETMRMxUBNTMVwMD+gMACQAVA+4DABgDAwAAAAAIAAAPAAkAKgAALAA8AABE1MxEjNSEVIxEzFQE1MxXAwAJAwMD+gMADwMADwMDA/EDABgDAwAAAAQAAA8AAwAeAAAMAABERMxHAA8ADwPxAAAAAAAQAAAPABsAJAAADAAcAEwAXAAABNSEVJTUzFQU1MxEjNSEVIxEzFSURMxEDwAJA/QDA/EDAwAJAwMADwMADwMDAwMDAwMADwMDA/EDAwASA+4AAAAYAAAJABUAJAAADAAcACwAPABMAFwAAATUhFSU1MxUlETMRBREzEQE1MxUhNTMVAkACQP0AwP3AwAPAwPrAwAPAwAJAwMDAwMDAA8D8QMAEgPuABUDAwMDAAAAABgAAA8ADwAqAAAMABwALAA8AEwAXAAATNSEVJTUzFSERMxEBNTMVMzUzFSU1MxXAAkD9AMACQMD9AMDAwP6AwAPAwMDAwMAEgPuABIDAwMDAwMDAAAAAAAYAAAMABIAJwAADAAcACwAPABMAFwAAEzUhFSU1MxUhETMRATUzFTM1MxUlNTMVwAJA/QDAAkDA/oDAwMD+gMADAMDAwMDAA8D8QASAwMDAwMDAwAAAAAAGAAACQAPACQAAAwAHAAsADwAXABsAAAERMxETETMRATUzFQM1MxUBETMRIRUhEQE1MxUBgMDAwP6AwMDA/QDAAYD+gAJAwAJAAYD+gAGAAkD9wAJAwMABgMDA/EAFQP6AwP0ABIDAwAAAAAAGAAACQAMACQAAAwAHAAsADwATABsAAAERMxERNTMVJTUzFQM1MxU1NTMVAREzETMVIxEBgMDA/oDAwMDA/QDAwMACQAGA/oABgMDAwMDAAYDAwMDAwP0ABUD9AMD+gAAFAAADwAMAB4AAAwAHAAsAEwAXAAABNTMVJTUzFQM1MxUBETMRMxUjEQE1MxUCQMD+gMDAwP3AwMDAAYDAA8DAwMDAwAGAwMD9wAPA/oDA/oADAMDAAAAAAwAAA8ADwAqAAAUACQANAAARETMRIRUBNTMVNTUzFcADAP3AwMADwAVA+4DABUDAwMDAwAAAAAADAAADwAGACoAAAwAHAAsAABM1MxUlETMRETUzFcDA/oDAwAPAwMDABUD6wAVAwMAAAAAAAQAAAkADwAkAAAkAAAERIREzESEVIREBgP6AwAMA/oACQAGABUD7gMD+gAADAAACQAGACQAAAwAHAAsAABERMxERNTMVJREzEcDA/oDAAkABgP6AAYDAwMAEgPuAAAAAAgAAA8ADwAnAAAUACQAAEREzESEVAREzEcADAP3AwAPABUD7gMAEgAGA/oAAAAAAAwAAA8ACQAnAAAMABwALAAATNTMVJREzERMRMxHAwP6AwMDAA8DAwMAEgPuAA8ABgP6AAAIAAAPAA8AJAAADAAkAAAE1MxUBETMRIRUBgMD9wMADAAYAwMD9wAVA+4DAAAAAAAMAAAPAAkAJAAADAAcACwAAEzUzFRE1MxUBETMRwMDA/cDAA8DAwAJAwMD+gASA+4AAAAACAAADwASACQAAAwARAAABNTMVAREjNTMRMxEzFSMRIRUCQMD9wMDAwMDAAwAGwMDA/QABgMADAP3AwP6AwAAAAgAAA8ACQAkAAAMADwAAATUzFSU1IzUzETMRMxUjEQGAwP6AwMDAwMADwMDAwMDAAwD+gMD9wAAFAAADwAPACoAAAwALABMAFwAbAAABNTMVAREzFTMVIxEhESM1MxEzEQE1MxU1NTMVAYDA/cDAwMACQMDAwP3AwMAGwMDA/QAFQMDA/EACQMACQPrABUDAwMDAwAAAAAAEAAADwAPACcAAAwAJAA0AEQAAAREzESERIRUhERM1MxU1NTMVAwDA/EADAP3AwMDAA8ADAP0AA8DA/QAEgMDAwMDAAAQAAAJAA8AJAAADAAcADwAXAAABETMRAzUzFQERMxUzFSMRIREjNTMRMxEBgMDAwP3AwMDAAkDAwMACQAGA/oAEgMDA/QAFQMDA/EACQMACQPrAAAMAAAJAA8AHgAADAAcADQAAAREzERMRMxEhESEVIREBgMDAwPxAAwD9wAJAAYD+gAGAAwD9AAPAwP0AAAYAAAPAA8AKgAADAAsAEwAXABsAHwAAATUzFQERMxUzFSMRIREjNTMRMxEBNTMVJTUzFTM1MxUBgMD9wMDAwAJAwMDA/cDA/oDAwMAGwMDA/QAFQMDA/EACQMACQPrABUDAwMDAwMDAAAAAAAUAAAPAA8AJwAADAAkADQARABUAAAERMxEhESEVIRETNTMVJTUzFTM1MxUDAMD8QAMA/cDAwP6AwMDAA8ADAP0AA8DA/QAEgMDAwMDAwMAAAwAAA8AFQAkAAAMACQANAAABETMRIREhFSERAREzEQSAwPxAAwD9wP3AwAPAAwD9AAPAwP0AA8ABgP6AAAAAAAQAAAMAA8AJAAADAAcADwAXAAABNSEVATUzFQERMxUzFSMRIREjNTMRMxEBgAGA/oDA/cDAwMACQMDAwAMAwMADwMDA/QAFQMDA/EACQMACQPrAAAMAAAMAA8AHgAADAAcADQAAATUhFTURMxEhESEVIREBgAGAwPxAAwD9wAMAwMDAAwD9AAPAwP0AAAAAAAUAAAPAA8AKgAADAAcACwAPABMAABM1IRUlETMRIREzEQE1IRUBNSEVwAJA/QDAAkDA/QACQP3AAkADwMDAwAPA/EADwPxAA8DAwAGAwMAABQAAA8ADwAkAAAMABwALAA8AEwAAEzUhFSURMxEhETMRATUhFQE1IRXAAkD9AMACQMD9AAJA/cACQAPAwMDAAkD9wAJA/cACQMDAAYDAwAAEAAADwAPACoAAAwAHAAsAEwAAEzUhFSURMxEhETMRAREzFTM1MxHAAkD9AMACQMD9AMDAwAPAwMDAA8D8QAPA/EADwAJAwMD9wAAABQAAA8ADwAnAAAMABwALAA8AFwAAEzUhFSURMxEhETMRATUhFQERMxUzNTMRwAJA/QDAAkDA/QACQP3AwMDAA8DAwMACQP3AAkD9wAJAwMABgAGAwMD+gAAAAAAGAAADwAPACoAAAwAHAAsAEwAXABsAABM1IRUlETMRIREzEQERMxUzNTMRATUzFTM1MxXAAkD9AMACQMD9AMDAwP6AwMDAA8DAwMADwPxAA8D8QAPAAYDAwP6AAYDAwMDAAAAACAAAA8ADwAnAAAMABwALAA8AEwAXABsAHwAAEzUhFSURMxEhETMRATUhFQE1MxUzNTMVJTUzFTM1MxXAAkD9AMACQMD9AAJA/cDAwMD+gMDAwAPAwMDAAkD9wAJA/cACQMDAAYDAwMDAwMDAwMAAAAIAAAPABsAJAAADABMAABERMxEVNSERITUhFSEVIRUhESEVwAJA/cAGAP0AAYD+gAMABIADwPxAwMADwMDAwMD9wMAABgAAA8AGwAeAAAMABwALABUAGQAdAAATNSEVMzUhFSURMxEhETMVITUzESEVATUhFTM1IRXAAkDAAwD5QMACQMACQMD9AP0AAkDAAkADwMDAwMDAAkD9wAJAwMD+gMACQMDAwMAAAAAEAAADwAPACoAAAwAHABUAGQAAAREzEQM1MxUBESE1MxUzFSEVIRUhEQE1MxUDAMDAwPxAAYDAwP3AAkD9wAGAwAPAAwD9AAPAwMD8QAVAwMDAwMD9AAYAwMAAAAUAAAPAA8AJwAADAAsADwATABcAAAE1MxUBETMVMxUjERM1IRUBNTMVNTUzFQMAwPxAwMDAwAGA/oDAwAYAwMD9wAPAwMD9wAMAwMABgMDAwMDAAAQAAAJAA8AJAAADAAcACwAVAAABETMRExEzEQM1MxUBESEVIRUhFSERAYDAwMDAwPxAAwD9wAJA/cACQAGA/oABgAMA/QADwMDA/EAFQMDAwP0AAAQAAAJAA8AHgAADAAcADwATAAABETMREzUzFQERMxUzFSMREzUhFQGAwMDA/EDAwMDAAYACQAGA/oADwMDA/cADwMDA/cADAMDAAAAFAAADwAPACoAAAwAHABUAGQAdAAABETMRAzUzFQERITUzFTMVIRUhFSERETUzFTM1MxUDAMDAwPxAAYDAwP3AAkD9wMDAwAPAAwD9AAPAwMD8QAVAwMDAwMD9AAYAwMDAwAAABgAAA8ADwAnAAAMACwAPABMAFwAbAAABNTMVAREzFTMVIxETNSEVATUzFSU1MxUzNTMVAwDA/EDAwMDAAYD+gMD+gMDAwAYAwMD9wAPAwMD9wAMAwMABgMDAwMDAwMAABwAAA8ADwAqAAAMABwALAA8AEwAbAB8AABM1IRUlNTMVIREzEQE1IRUlNTMVNTUzNTMVIRUBNTMVwAJA/QDAAkDA/QACQP0AwMDAAYD+gMADwMDAwMDAAkD9wAJAwMDAwMDAwMDAwAGAwMAABwAAA8ADwAnAAAMABwALAA8AEwAXABsAABE1IRU1NTMVJTUhFSU1MxU1NSEVATUzFTU1MxUDAMD9AAJA/QDAAwD9wMDAA8DAwMDAwMDAwMDAwMDAwAGAwMDAwMAAAAAABwAAA8ADwAqAAAMABwALAA8AEwAdACEAABM1IRUlNTMVIREzEQE1IRUlNTMVNREzFTM1MxUzFQE1MxXAAkD9AMACQMD9AAJA/QDAwMDAwP3AwAPAwMDAwMACQP3AAkDAwMDAwMABgMDAwMABgMDAAAgAAAPAA8AJwAADAAcACwAPABMAFwAbAB8AABE1IRU1NTMVJTUhFSU1MxU1NSEVATUzFTM1MxUlNTMVAwDA/QACQP0AwAMA/QDAwMD+gMADwMDAwMDAwMDAwMDAwMDAAYDAwMDAwMDAAAAAAAYAAAJAA8AJAAAJAA0AEQAVABkAHQAAEzUzNSM1IRUjEQE1MxUhETMRATUhFSU1MxU1NSEVwMDAAkDA/cDAAkDA/QACQP0AwAMAAkDAwMDA/oACQMDAAkD9wAJAwMDAwMDAwMAAAAAABQAAAkADwAeAAAkADQARABUAGQAAEzUzNSE1IRUjERM1MxUlNSEVJTUzFTU1IRXAwP6AAwDAwMD9AAJA/QDAAwACQMDAwMD+gAJAwMDAwMDAwMDAwMAAAAgAAAPAA8AKgAADAAcACwAPABMAGwAfACMAABM1IRUlNTMVIREzEQE1IRUlNTMVNTUzNTMVIRUBNTMVMzUzFcACQP0AwAJAwP0AAkD9AMDAwAGA/QDAwMADwMDAwMDAAkD9wAJAwMDAwMDAwMDAwAGAwMDAwAAAAAgAAAPAA8AJwAADAAcACwAPABMAFwAbAB8AABE1IRU1NTMVJTUhFSU1MxU1NSEVATUzFSU1MxUzNTMVAwDA/QACQP0AwAMA/cDA/oDAwMADwMDAwMDAwMDAwMDAwMDAAYDAwMDAwMDAAAAAAAIAAAJAA8AJAAAFAA0AAAE1MzUzEQERITUhFSERAYDAwP6A/oADwP6AAkDAwP6AAYAEgMDA+4AAAgAAAkACQAkAAAUAEQAAEzUzETMRAREjNTM1MxUzFSMRwMDA/oDAwMDAwAJAwAGA/cACQAMAwMDAwP0AAAAAAAMAAAPAA8AKgAALAA8AEwAAAREhNSE1MxUhFSERATUzFTM1MxUBgP6AAYDAAYD+gP6AwMDAA8AEgMDAwMD7gAYAwMDAwAAAAAMAAAPAA8AJwAADAA8AEwAAATUzFSURIzUzNTMVMxUjEQERMxEBgMD+gMDAwMDAAYDAA8DAwMADAMDAwMD9AAPAAYD+gAAAAAEAAAPAA8AJAAAPAAABESM1MxEhNSEVIREzFSMRAYDAwP6AA8D+gMDAA8ACQMABgMDA/oDA/cAAAgAAA8ACQAkAAAMAFwAAATUzFSURIzUzNSM1MzUzFTMVIxUzFSMRAYDA/oDAwMDAwMDAwMADwMDAwAGAwMDAwMDAwMD+gAAABQAAA8ADwAqAAAMABwALABMAFwAAEzUhFTURMxEhETMREzUjNSEVMxU1NTMVwAJAwPxAwMDAAYDAwAPAwMDABID7gAVA+sAEgMDAwMDAwMAAAAAABQAAA8ADwAnAAAMACQANABUAGQAAEREzERU1IREzEQE1MxUzNSM1IRUzFTU1MxXAAkDA/EDAwMABgMDABIADAP0AwMADAPxABIDAwMDAwMDAwMAABAAAA8ADwAqAAAMABwALAA8AABM1IRUlETMRIREzEQE1IRXAAkD9AMACQMD9AAJAA8DAwMAEgPuABID7gAVAwMAAAAADAAADwAPACQAAAwAJAA0AABERMxEVNSERMxEBNSEVwAJAwP0AAkAEgAMA/QDAwAMA/EAEgMDAAAQAAAPAA8AKgAADAAcACwATAAATNSEVJREzESERMxEBETMVMzUzEcACQP0AwAJAwP0AwMDAA8DAwMAEgPuABID7gASAAYDAwP6AAAADAAADwAPACcAAAwAJABEAABERMxEVNSERMxEBETMVMzUzEcACQMD9AMDAwASAAwD9AMDAAwD8QASAAYDAwP6AAAAAAAMAAAPAA8AKgAADAAcAEwAAEzUhFQM1IxUBETMRIREzESMRIRHAAkDAwP6AwAJAwMD9wAPAwMAFQMDA+4AEgAGA/oD7gAPA/EAAAAAEAAADwAPACoAAAwAJAA0AEQAAEREzERU1IREzEQE1IxUHESERwAJAwP6AwMACQASAAwD9AMDAAwD8QAVAwMDAAkD9wAAAAAAHAAADwAPACoAAAwAHAAsADwATABcAGwAAEzUhFSURMxEhETMRATUzFTM1MxUlNTMVMzUzFcACQP0AwAJAwP0AwMDA/oDAwMADwMDAwASA+4AEgPuABIDAwMDAwMDAwMAAAAAABgAAA8ADwAnAAAMACQANABEAFQAZAAARETMRFTUhETMRATUzFTM1MxUlNTMVMzUzFcACQMD9AMDAwP6AwMDABIADAP0AwMADAPxABIDAwMDAwMDAwMAAAAMAAAJAA8AJAAAJAA0AEQAAAREjNSEVIxUzFQERMxEhETMRAYDAAkDAwP0AwAJAwAJAAYDAwMDAAkAEgPuABID7gAAAAgAAAkADwAeAAAMADwAAEREzEQERITUhETMRIxUzFcABgP6AAkDAwMAEgAMA/QD9wAGAwAMA/EDAwAAABgAAA8ADwAqAAAMACwATABcAGwAfAAABNTMVAREzETMVIxUhNSM1MxEzEQE1MxUzNTMVJTUzFQGAwP3AwMDAAkDAwMD9AMDAwP6AwAVAwMD+gAVA/EDAwMDAA8D6wAVAwMDAwMDAwAAFAAADwAPACcAAAwANABEAFQAZAAARETMRFTUzETMRMxEzEQE1MxUzNTMVJTUzFcDAwMDA/QDAwMD+gMAEgAMA/QDAwAGA/oADAPxABIDAwMDAwMDAAAAACAAAA8ADwAqAAAMABwALAA8AEwAXABsAHwAAAREzEQE1MxUzNTMVJTUzFSE1MxUlNTMVMzUzFSU1MxUBgMD+gMDAwP0AwAJAwP0AwMDA/oDAA8ADwPxAA8DAwMDAwMDAwMDAwMDAwMDAwAAABgAAAwADwAnAAAMABwAPABMAFwAbAAARNSEVAREzEQE1ITUhETMRATUzFTM1MxUlNTMVAwD9AMACQP3AAkDA/QDAwMD+gMADAMDAAkACQP3A/oDAwAJA/EAEgMDAwMDAwMAAAAcAAAPAA8AKgAADAAcACwAPABMAFwAbAAABETMRATUzFTM1MxUlNTMVITUzFQE1MxUzNTMVAYDA/oDAwMD9AMACQMD9AMDAwAPAA8D8QAPAwMDAwMDAwMDAAYDAwMDAAAYAAAPAA8AKgAAFAAkADQARABsAHwAAEREzFSEVATUzFTU1MxU1NTMVNTUhNSE1MxUhEQE1MxXAAwD9AMDAwP0AAYDAAYD+gMADwAGAwMABgMDAwMDAwMDAwMDAwMD+gAJAwMAAAAAABQAAA8ADwAnAAAcACwATABcAGwAAETUzNTMVIRUBNTMVNTUhNSEVIxUBNTMVNTUzFcDAAkD9wMD9wAPAwP6AwMADwMDAwMABgMDAwMDAwMACQMDAwMDAAAYAAAPAA8AKgAAFAAkADQARABcAGwAAEREzFSEVATUzFTU1MxU1NTMVNTUhNSERATUzFcADAP0AwMDA/QADwP3AwAPAAYDAwAGAwMDAwMDAwMDAwMD+gAJAwMAABAAAA8ADwAkAAAcACwATABcAABE1MzUzFSEVATUzFTU1ITUhFSMVATUzFcDAAkD9wMD9wAPAwP6AwAPAwMDAwAGAwMDAwMDAwAJAwMAAAAAHAAADwAPACoAABQAJAA0AEQAbAB8AIwAAEREzFSEVATUzFTU1MxU1NTMVNTUhNSE1MxUhEQE1MxUzNTMVwAMA/QDAwMD9AAGAwAGA/QDAwMADwAGAwMABgMDAwMDAwMDAwMDAwMD+gAJAwMDAwAAABgAAA8ADwAnAAAcACwATABcAGwAfAAARNTM1MxUhFQE1MxU1NSE1IRUjFQE1MxUlNTMVMzUzFcDAAkD9wMD9wAPAwP6AwP6AwMDAA8DAwMDAAYDAwMDAwMDAAkDAwMDAwMDAAAIAAAPAAwAJAAAHAAsAABMRIzUzNTMRETUhFcDAwMABgAPAAwDAwPuABIDAwAAAAAEAAAPAA8AJAAANAAARESEVIREhFSERIREzEQPA/QACQP3AAkDAA8AFQMD+gMD+gAGA/cAAAAAAAgAAA8ADAAkAAAMADwAAAREzEQURIRUhESEVIREhFQJAwP0AAwD9wAGA/oABgASAAYD+gMAFQMD+gMD+gMAAAAMAAAPAA8AJAAADAA0AEQAAEzUhFSURITUzESMRIRERNSEVwAJA/QADAMDA/cACQAPAwMDAAwDA/EACQP3AA8DAwAAAAwAAAwADwAkAAAMADwATAAARNSEVNREjNTM1MxUhFSERETUhFQGAwMDAAYD+gAGAAwDAwMADAMDAwMD9AASAwMAAAAADAAADwAPACQAABQARABcAABERMxUhFQE1IzUhNTMVMxUhFQE1ITUhEcADAP0AwAJAwMD9wAGA/QADwAPAAYDAwAGAwMDAwMDAAkDAwP6AAAEAAAPAA8AHgAATAAARNTM1IzUhNSE1IRUjFTMVIRUhFcDAAkD9wAPAwMD9wAJAA8DAwMDAwMDAwMDAAAQAAAPAA8AJAAADAAcACwAVAAATNSEVJTUzFSERMxEBNTM1ITUhFSMRwAJA/QDAAkDA/cDA/cADwMADwMDAwMDAAkD9wAJAwMDAwP6AAAAABAAAA8AEgAkAAAMAEQAVABkAABM1IRU1NSE1ITUjNSERMxUjFSERMxERNSEVwAJA/oABgMABgMDA/EDAAwADwMDAwMDAwMD+gMDAA8D8QAPAwMAAAwAAAwAEgAeAAAMABwAXAAATNSEVAREzEQE1ITUhNSE1IzUhFTMVIxHAAkD9AMACQP3AAkD+gMADAMDAAwDAwAJAAYD+gP6AwMDAwMDAwP3AAAAABgAAA8ADwAqAAAMACQANABUAGQAdAAATNSEVNREjNSERIREzERE1MzUzFSEVATUzFTM1MxXAAkDAAYD8QMDAwAGA/QDAwMADwMDAwAJAwP0AA8D8QAPAwMDAwAGAwMDAwAAAAAYAAAMAA8AJwAADAAcAEQAVABkAHQAAETUhFQERMxEBNSE1IREhNSERATUzFSU1MxUzNTMVAwD9AMACQP3AAkD9wAMA/cDA/oDAwMADAMDAAkABgP6A/oDAwAGAwPxABIDAwMDAwMDAAAAAAAgAAAPAA8AKgAADAAcACwATABcAGwAfACMAAAERMxEBNTMVAzUzFQERMxEhFSERATUzFSU1MxUlNTMVMzUzFQMAwP6AwMDA/QDAAYD+gAJAwP3AwP6AwMDAA8ACQP3AAkDAwAGAwMD8QAVA/oDA/QAEgMDAwMDAwMDAwMAAAAAACAAAA8ADAAqAAAMABwALAA8AFwAbAB8AIwAAATUzFSU1MxUDNTMVNTUzFQERMxEzFSMREzUzFSU1MxUzNTMVAkDA/oDAwMDA/QDAwMDAwP6AwMDAA8DAwMDAwAGAwMDAwMD9AAVA/QDA/oAFQMDAwMDAwMAAAAAABAAAAkADwAkAAAkADQARABUAAAERIzUhFSMVMxUBETMRIREzEQE1IRUBgMACQMDA/QDAAkDA/QACQAJAAYDAwMDAAkADwPxAA8D8QAPAwMAAAAAABAAAAkADwAeAAAkADQARABUAAAERIzUhFSMVMxUBETMRIREzEQE1IRUBgMACQMDA/QDAAkDA/QACQAJAAYDAwMDAAkACQP3AAkD9wAJAwMAAAAAABgAAA8ADwAqAAAMABwALABkAHQAhAAATNSEVJTUzFSERMxEBNTM1ITUhNTMVIRUjEQE1MxUzNTMVwAJA/QDAAkDA/cDA/cABgMABgMD9wMDAwAPAwMDAwMACQP3AAkDAwMDAwMD+gAMAwMDAwAAAAAYAAAMAA8AJwAADAAcAEQAVABkAHQAAETUhFTURMxEBNTM1ITUhFSMRATUzFSU1MxUzNTMVAwDA/cDA/cADwMD+gMD+gMDAwAMAwMDAAYD+gAGAwMDAwP6AAwDAwMDAwMDAAAADAAADwAPACoAAAwATABcAAAE1IxUDESEVMxEhFSE1MxEjESERATUzFQGAwMACQMD9wAJAwMD9wAJAwAkAwMD6wAbAwP6AwMD7gAMA/QAGAMDAAAAFAAADwAPACoAAAwANABEAGQAdAAARNTMVFTUhNSE1ITUzEQE1IxUHETM1MxUzEQM1MxXAAkD9wAJAwP6AwMDAwMDAwASAwMDAwMDAwP0AA8DAwMACQMDA/cADAMDAAAACAAADwAbACoAAGQAdAAARETMVITUhNSE1MxUhFSEVIRUhESEVIREhEQE1MxXAAkD9wAJAwAMA/QABgP6AAwD8QP3AAwDAA8AEgMDAwMDAwMDA/cDAAwD9AAYAwMAAAAAIAAADwAbACcAAAwAHAAsAGQAdACEAJQApAAATNSEVMzUhFSU1MxUhNSE1ITUzFSE1MxEhFQE1IRUzNSEVATUzFTU1MxXAAkDAAwD5QMACQP3AAkDAAkDA/QD9AAJAwAJA/QDAwAPAwMDAwMDAwMDAwMDA/oDAAkDAwMDAAYDAwMDAwAAKAAADwAPACoAAAwAHAAsADwATABcAGwAfACUAKQAAETUzFTM1IRUlNTMVNREzERcRMxElETMRATUzFTU1MxUhNTM1MxERNTMVwMABgP3AwMDAwPxAwAGAwMD9AMDAwAPAwMDAwMDAwMACQP3AwAMA/QDAAwD9AAJAwMDAwMDAwP6AAYDAwAAACwAAA8ADwAnAAAMABwALAA8AEwAXABsAHwAjACcAKwAAETUzFTM1IRUlNTMVNTUzFRcRMxElETMRJTUzFSU1IRUzNTMVATUzFTU1MxXAwAGA/cDAwMDA/EDAAYDA/cABgMDA/cDAwAPAwMDAwMDAwMDAwMABgP6AwAGA/oDAwMDAwMDAwAGAwMDAwMAAAAAABgAAAkADwAkAAAcACwAPABMAFwAbAAABESM1IRUjEQE1MxUhETMRATUhFSU1MxU1NSEVAYDAAkDA/cDAAkDA/QACQP0AwAMAAkABgMDA/oACQMDAAkD9wAJAwMDAwMDAwMAAAAUAAAJAA8AHgAAHAAsADwATABcAAAERITUhFSMREzUzFSU1IRUlNTMVNTUhFQGA/oADAMDAwP0AAkD9AMADAAJAAYDAwP6AAkDAwMDAwMDAwMDAwAAAAAACAAACQAPACQAAAwALAAABETMRAREhNSEVIRECQMD+gP6AA8D+gAJAAYD+gAGABIDAwPuAAAAAAAMAAAJAAkAJAAADAAcAEwAAExEzERE1MxUlESM1MzUzFTMVIxHAwMD+gMDAwMDAAkABgP6AAYDAwMADAMDAwMD9AAAAAwAAAwADwAeAAAMABwALAAATNSEVJTUzFSERMxHAAkD9AMACQMADAMDAwMDAA8D8QAAAAAMAAAPAA8AHgAADAA0AEQAAEzUhFSURITUzESM1IRUDNSEVwAJA/QADAMDA/cDAAwADwMDAwAGAwP3AwMACQMDAAAAAAwAAAwADwAeAAAMABwARAAARNSEVNREzEQE1MzUhNSEVIxEDAMD9wMD9wAPAwAMAwMDAAYD+gAGAwMDAwP6AAAMAAAhAAkAJwAADAAcACwAAETUzFTM1MxUlNTMVwMDA/oDACEDAwMDAwMDAAAAAAAMAAAhAAkAJwAADAAcACwAAEzUzFSU1MxUzNTMVwMD+gMDAwAhAwMDAwMDAwAAAAAEAAAhAAkAJAAADAAARNSEVAkAIQMDAAAIAAAhAAYAJwAADAAcAABE1MxU1NTMVwMAIQMDAwMDAAAAAAAIAAAhAAYAJwAADAAcAABM1MxUlNTMVwMD+gMAIQMDAwMDAAAEAAAhAAkAJwAAHAAARETMVMzUzEcDAwAhAAYDAwP6AAAAAAAEAwAhAAYAJAAADAAATNTMVwMAIQMDAAAIAAAhAAkAKgAADAAcAAAE1IxUHESERAYDAwAJACQDAwMACQP3AAAABAAACQAGAA8AABQAAEREzFTMVwMACQAGAwMAAAwAACEADwAnAAAMACwAPAAARNTMVMzUjNSEVMxU1NTMVwMDAAYDAwAhAwMDAwMDAwMDAAAQAAAhAAwAJwAADAAcACwAPAAARNTMVMzUzFSU1MxUzNTMVwMDA/oDAwMAIQMDAwMDAwMDAwAAAAgAABsABgAkAAAMABwAAETUzFTURMxHAwAbAwMDAAYD+gAAAAgAAAwABgAVAAAMABwAAETUzFTURMxHAwAMAwMDAAYD+gAAAAgAAAwAAwAeAAAMABwAAEREzEQMRMxHAwMADAAJA/cADAAGA/oAAAAEAAAhAAMAJwAADAAARETMRwAhAAYD+gAAAAAADAAAIQAPACcAAAwAHAAsAABE1MxUhNTMVIREzEcACQMD9wMAIQMDAwMABgP6AAAADAAADwAVACQAACwAPABMAAAERMxUhNTMRIxEhEQERMxElNSEVAYDAAkDAwP3A/cDAAYACQAPABIDAwPuAAwD9AAPAAYD+gMDAwAAAAQAABUAAwAYAAAMAABE1MxXABUDAwAAAAgAAA8AFQAkAAAMADwAAEREzERMRIRUhFSEVIREhFcDAA8D9AAGA/oADAAeAAYD+gPxABUDAwMD9wMAAAgAAA8AFQAkAAAMADwAAEREzERMRMxEhETMRIxEhEcDAwAJAwMD9wAeAAYD+gPxABUD+gAGA+sADAP0AAAAAAAIAAAPAA8AJAAADAA8AABERMxETNTMRIzUhFSMRMxXAwMDAAkDAwAeAAYD+gPxAwAPAwMD8QMAABQAAA8AFQAkAAAMABwALAA8AEwAAATUhFSURMxEhETMRAREzESU1IRUCQAJA/QDAAkDA+sDAAYACQAPAwMDAA8D8QAPA/EADAAGA/oDAwMAAAAAABgAAA8AFQAkAAAMABwALAA8AEwAXAAABETMRATUzFTM1MxUhETMRNzUzFSE1MxUDAMD+gMDAwPuAwMDAAkDAA8ADwPxAA8DAwMDAAYD+gMDAwMDAAAAAAAYAAAPABUAJAAAFAAsADwATABcAGwAAATUzNTMRMxEzFTMVAREzESERMxEBETMRJTUhFQGAwMDAwMD8QMACQMD6wMABgAJAA8DAwP6AAYDAwAGAAwD9AAMA/QACQAGA/oDAwMAAAAAABP9AA8ADAAnAAAMABwALAA8AABMRMxEBNTMVITUzFSERMxHAwP3AwAJAwP3AwAPAA8D8QASAwMDAwAGA/oAAAAIAAAPAA8AJAAALAA8AABERMxUhNTMRIxEhERE1IRXAAkDAwP3AAkADwASAwMD7gAMA/QAEgMDAAAAAAAMAAAPAA8AJAAADAAcAEwAAAREzEQM1MxUBESEVIRUhFSERIRUDAMDAwPxAAwD9wAJA/cACQASAAkD9wAMAwMD8QAVAwMDA/cDAAAABAAADwAPACQAABQAAEREhFSERA8D9AAPABUDA+4AAAAQAAAPAA8AJAAAHAAsADwATAAARETMRIREzEQERMxEzETMRATUzFcACQMD9AMDAwP6AwAPAAwD9wAJA/QADAAGA/oABgP6AAYDAwAABAAADwAPACQAACwAAEREhFSEVIRUhESEVA8D9AAGA/oADAAPABUDAwMD9wMAAAAAFAAADwAPACQAABQAJAA0AEQAXAAARETMVIRUBNTMVNTUzFTU1MxU1NSE1IRHAAwD9AMDAwP0AA8ADwAGAwMABgMDAwMDAwMDAwMDA/oAAAAEAAAPAA8AJAAALAAARETMRIREzESMRIRHAAkDAwP3AA8AFQP6AAYD6wAMA/QAAAAUAAAPAA8AJAAADAAcACwAPABMAABM1IRUBNTMVAREzESERMxEBNSEVwAJA/oDA/cDAAkDA/QACQAPAwMACQMDA/oADwPxAA8D8QAPAwMAAAQAAA8ACQAkAAAsAABE1MxEjNSEVIxEzFcDAAkDAwAPAwAPAwMD8QMAAAAAFAAADwAPACQAAAwAHAAsAEwAXAAABETMRATUzFQM1MxUBETMRIRUhEQE1MxUDAMD+gMDAwP0AwAGA/oACQMADwAJA/cACQMDAAYDAwPxABUD+gMD9AASAwMAAAAUAAAPAA8AJAAADAAcACwAPABMAABERMxEhETMRAREzETMRMxEBNTMVwAJAwP0AwMDA/oDAA8ADAP0AAwD9AAMAAYD+gAGA/oABgMDAAAAAAwAAA8ADwAkAAAMACwATAAABNTMVAREzFTMVIxEhESM1MzUzEQGAwP3AwMDAAkDAwMAGwMDA/QAFQMDA/EADwMDA+sAAAAAAAwAAA8ADwAkAAAMACwATAAABNTMVAREzFTMVIxEhESM1MxEzEQGAwP3AwMDAAkDAwMAGwMDA/QAFQMDA/EACQMACQPrAAAAAAQAAA8ADwAkAABMAABE1IREjNTM1ITUhFSEVMxUjESEVAYDAwP6AA8D+gMDAAYADwMACQMDAwMDAwP3AwAAAAAQAAAPAA8AJAAADAAcACwAPAAATNSEVJREzESERMxEBNSEVwAJA/QDAAkDA/QACQAPAwMDAA8D8QAPA/EADwMDAAAAAAQAAA8ADwAkAAAcAABERIREjESERA8DA/cADwAVA+sAEgPuAAAAAAAIAAAPAA8AJAAADAA0AAAE1MxUBESEVIRUhFSERAwDA/EADAP3AAkD9wAeAwMD8QAVAwMDA/QAABQAAA8ADwAkAAAUACQANABEAFwAAEREzFSEVATUzFTU1MxUlNTMVJREhFSEVwAMA/QDAwP6AwP6AA8D9AAPAAYDAwAGAwMDAwMDAwMDAAYDAwAAAAQAAA8ADwAkAAAcAAAERITUhFSERAYD+gAPA/oADwASAwMD7gAAAAAUAAAPAA8AJAAADAAcACwAPABMAAAERMxEBNTMVMzUzFSU1MxUhNTMVAYDA/oDAwMD9AMACQMADwAPA/EADwMDAwMDAwMDAwAAAAAADAAADwAPACQAAAwAHABsAABERMxEhETMRAREjNTMRIzUzNTMVMxUjETMVIxHAAkDA/cDAwMDAwMDAwMAGAAGA/oABgP6A/cABgMABgMDAwMD+gMD+gAAACQAAA8ADwAkAAAMABwALAA8AEwAXABsAHwAjAAARETMRIREzEQE1MxUzNTMVJTUzFSU1MxUzNTMVJTUzFSE1MxXAAkDA/QDAwMD+gMD+gMDAwP0AwAJAwAPAAkD9wAJA/cACQMDAwMDAwMDAwMDAwMDAwMDAAAAAAwAAA8ADwAkAAAMADwATAAARETMRExEjNTMRMxEzFSMRExEzEcDAwMDAwMDAwAeAAYD+gPxAAwDAAYD+gMD9AAPAAYD+gAAABQAAA8ADwAkAAAUACwAPABMAFwAAETUzNTMRMxEzFTMVAREzESERMxEBNSEVwMDAwMD8QMACQMD9AAJAA8DAwP6AAYDAwAGAAwD9AAMA/QADAMDAAAAAAAMAAAPAAkAKgAALAA8AEwAAETUzESM1IRUjETMVATUzFTM1MxXAwAJAwMD9wMDAwAPAwAPAwMD8QMAGAMDAwMAAAAAABwAAA8ADwAqAAAMABwALAA8AEwAXABsAAAERMxEBNTMVMzUzFSU1MxUhNTMVATUzFTM1MxUBgMD+gMDAwP0AwAJAwP0AwMDAA8ADwPxAA8DAwMDAwMDAwMABgMDAwMAABAAAA8ADwAnAAAMABwARABUAABM1IRUlETMRBTUjNTMRITUhEQERMxHAAYD9wMACQMDA/cADAP3AwAPAwMDAAkD9wMDAwAGAwPxABIABgP6AAAAABgAAA8ADwAnAAAMABwALAA8AEwAXAAATNSEVJTUzFTU1IRUlNTMVNTUhFQERMxHAAwD8QMABgP3AwAMA/cDAA8DAwMDAwMDAwMDAwMDAwAGAAYD+gAAAAAMAAAPAA8AJwAADAAkADQAAAREzESERIRUhERMRMxEDAMD8QAMA/cDAwAPAAwD9AAPAwP0ABIABgP6AAAIAAAPAAMAJwAADAAcAABERMxEDETMRwMDAA8ADwPxABIABgP6AAAAGAAADwAPACcAAAwAHAAsADwATABcAABM1IRUlETMRIREzEQE1MxUhNTMVIREzEcACQP0AwAJAwPxAwAJAwP3AwAPAwMDAAwD9AAMA/QADwMDAwMABgP6AAAAAAAMAAAPAA8AHgAADAAcAEQAAEzUhFSURMxEFNSM1MxEhNSERwAGA/cDAAkDAwP3AAwADwMDAwAJA/cDAwMABgMD8QAAABQAAAwADwAkAAAMABwALABEAFQAAATUhFTURMxEBETMREzUzNTMRATUhFQGAAYDA/EDAwMDA/cABgAPAwMDAAkD9wP6ABUD6wAPAwMD+gAGAwMAABQAAAwADwAeAAAMABwALAA8AEwAAAREzEQE1MxUzNTMVJREzESERMxEBgMD+gMDAwP0AwAJAwAMAAkD9wAJAwMDAwMABgP6AAYD+gAAAAAAEAAADwAPACQAAAwAHAAsAFwAAEzUhFSURMxEhETMRATUzNSM1IRUhFTMVwAJA/QDAAkDA/QDAwAMA/oDAA8DAwMACQP3AAkD9wAJAwMDAwMDAAAAFAAADwAPAB4AAAwAHAAsADwATAAATNSEVJTUzFTU1IRUlNTMVNTUhFcADAPxAwAGA/cDAAwADwMDAwMDAwMDAwMDAwMDAAAAFAAADAAPACQAAAwAHAAsADwAXAAABETMRATUhFSURMxERNSEVNTUhNSEVIxUDAMD9AAJA/QDAAYD9wAPAwAMAAYD+gAGAwMDAAYD+gAGAwMDAwMDAwAAAAgAAA8ADwAeAAAMACQAAAREzESERIRUhEQMAwPxAAwD9wAPAAwD9AAPAwP0AAAAAAwAAA8ADAAkAAAMADwATAAATNSEVJREzESERMxEjESERETUhFcABgP3AwAGAwMD+gAGAA8DAwMADwP6AAYD8QAGA/oADwMDAAAAAAAEAAAPAAMAHgAADAAARETMRwAPAA8D8QAAAAAAFAAADwAMAB4AAAwAHAAsAEwAXAAABNTMVJTUzFQM1MxUBETMRMxUjEQE1MxUCQMD+gMDAwP3AwMDAAYDAA8DAwMDAwAGAwMD9wAPA/oDA/oADAMDAAAAAAwAAA8ADwAkAAAMACwAPAAARETMRIREhNSE1MxEBNSEVwAJA/cACQMD8QAMAA8ADAP0AAwDAwPuABIDAwAAAAAIAAAMAA8AHgAAHAA8AABERMxEhFSEVJTUjNTMRMxHAAYD+gAJAwMDAAwAEgP0AwMDAwMACQPxAAAAAAAUAAAPAA8AHgAADAAcACwAPABMAAAE1MxU1NTMVIREzEQERMxEFETMRAYDAwP3AwP6AwAJAwAPAwMDAwMABgP6AAYABgP6AwAJA/cAAAAAABgAAAwADwAkAAAMABwALAA8AEwAXAAABETMRATUhFSURMxERNSEVJTUzFTU1IRUDAMD9AAJA/QDAAkD9AMADAAMAAYD+gAGAwMDAAYD+gAGAwMDAwMDAwMAAAAAEAAADwAPAB4AAAwAHAAsADwAAEzUhFSURMxEhETMRATUhFcACQP0AwAJAwP0AAkADwMDAwAJA/cACQP3AAkDAwAAAAAEAAAPAA8AHgAAHAAARESERIxEhEQPAwP3AA8ADwPxAAwD9AAAAAAADAAADAAPAB4AABwALAA8AABERMxEhFSERAREzEQE1IRXAAkD9wAJAwP0AAkADAAPA/oDA/oACQAGA/oABgMDAAAAAAAQAAAMAA8AHgAADAAcACwAPAAABETMRATUhFSURMxERNSEVAwDA/QACQP0AwAMAAwABgP6AAYDAwMABgP6AAYDAwAAAAwAAA8ADwAeAAAMABwAPAAATNSEVJREzESERITUhFSMRwAGA/cDAAYD+gAMAwAPAwMDAAkD9wAJAwMD9wAAAAAEAAAPAA8AHgAAHAAABESE1IRUhEQGA/oADwP6AA8ADAMDA/QAAAAADAAADwAPAB4AAAwAHAAsAABM1IRUlETMRIREzEcACQP0AwAJAwAPAwMDAAwD9AAMA/QAAAwAAAwADwAeAAAMABwAVAAABETMRIREzERMRIzUzESEVIxEzFSMRAwDA/EDAwMDAAYDAwMAFQAGA/oACQP3A/cABgMACQMD+gMD+gAAAAAAJAAADAAPAB4AAAwAHAAsADwATABcAGwAfACMAABERMxEhETMRATUzFTM1MxUlNTMVJTUzFTM1MxUlNTMVITUzFcACQMD9AMDAwP6AwP6AwMDA/QDAAkDAAwABgP6AAYD+gAGAwMDAwMDAwMDAwMDAwMDAwMAAAAADAAADAAPAB4AAAwAPABMAABERMxETESM1MxEzETMVIxETETMRwMDAwMDAwMDABUACQP3A/cABgMACQP3AwP6AAkACQP3AAAAFAAADwAPAB4AAAwAHAAsADwATAAATNTMVMzUzFSURMxEhETMRIREzEcDAwMD+gMD9wMACQMADwMDAwMDAAYD+gAMA/QADAP0AAAAAAwAAA8ACQAkAAAMABwALAAATETMRATUzFTM1MxXAwP6AwMDAA8ADwPxABIDAwMDAAAAAAAUAAAPAA8AJAAADAAcACwAPABMAABM1IRUlETMRIREzEQE1MxUzNTMVwAJA/QDAAkDA/QDAwMADwMDAwAMA/QADAP0AA8DAwMDAAAAEAAADwAPAB4AAAwAHAAsADwAAEzUhFSURMxEhETMRATUhFcACQP0AwAJAwP0AAkADwMDAwAJA/cACQP3AAkDAwAAAAAQAAAPAA8AJwAADAAcACwAPAAATNSEVJREzESERMxEBETMRwAJA/QDAAkDA/cDAA8DAwMADAP0AAwD9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AADDrAAAxEAAAMTIAADFYAAAxggAAMacAADHOAAAx9gAAMhwAADIyAAAySAAAMl4AADJ1AAAyjwAAMqoAADLDAAAy2QAAMvIAADMJAAAzMwAAM0YAADNdAAAzdwAAM4MAADOPAAAzqgAAM7sAADPRAAAz5wAAM+4AADP4AAA0AwAANBUAADQhAAA0NQAANFIAADRhAAA0eQAANI0AADSYAAA0pwAANLoAADTLAAA03AAANPMAADUBAAA1DwAANSEAADU0AABAAAAAgAANpQQ/l8PPPUACwYAAAAAANA0HEwAAAAA0DOsHP6AAkAIQAqAAAAACAACAAEAAAAAAYAAAAAAAAABgAAAAYAAAAGAAAADAAAABIAAAASAAAAEgAAABIAAAAGAAAADwAAAA8AAAAPAAAAEgAAAAYAAAASAAAABgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAABgAAAAYAAAAPAAAAEgAAAA8AAAASAAAAFQAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAADAAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAADAAAABIAAAAMAAAAEgAAABIAAAAJAAAAEgAAABIAAAASAAAAEgAAABIAAAAPAAAAEgAAABIAAAAGAAAAEgAAAA8AAAAJAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAAAwAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAPAAAABgAAAA8AAAAVAAAABgAAAA8AAAASAAAAEgAAABIAAAAGAAAAEgAAAA8AAwAYAAAADAAAAA8AAAAPAAAAGAAAABIAAAAMAAAAEgAAAAwAAAAMAAAACQAAABIAAAASAAAABgAAAAwAAwAMAAAADAAAAA8AAAAbAAAAGwAAABsAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAHgAAABIAAAASAAAAEgAAABIAAAASAAAADAAAAAwAAAAMAAAADAAAABUAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAPAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAeAAAAEgAAABIAAAASAAAAEgAAABIAAAAGA/0ACQAAAAkD/QAJA/0AEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABgAAAAVAAAAFQAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABUAAAAPA/0ADwP9AAwAAAAJA/0ADAAAAAkD/QAMAAAACQAAAAwAAAAGAAAAHgAAABgAAAASAAAAFQAAABIAAAAPAAAADwAAABIAAAAJAAAAEgAAAAkAAAASAAAADAAAABIAAAAMAAAAFQAAAAwAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAYAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAeAAAAHgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAAAwAAAASAAAAEgAAABIAAAAMAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAPAAAAEgAAAA8AAAASAAAAEgAAABIAAAASAAAAEgAAABUAAAAVAAAAEgAAABIAAAASAAAADwAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAAB4AAAAeAAAAEgAAABIAAAASAAAAEgAAABIAAAAMAAAAEgAAABIAAAASAAAADAAAAAwAAAAMAAAACQAAAAkAAAAMAAAACQADAAwAAAAJAAAAEgAAAA8AAAAJAAAACQAAAAYAAAAGAAAAEgAAABgAAAAGAAAAGAAAABgAAAASAAAAGAAAABgAAAAYAAAADwP9ABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAADAAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAAAwAAAASAAAAEgAAABIAAAASAAAABgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAADwAAAAYAAAAPAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAADAAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAVAAAAEgAAABIAAAASAAAADAAAAAwAAAASAAAAHgAAAB4AAAAVAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAVAAAAEgAAABIAAAAVAAAAFQAAABgAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAAA8AAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAYAAAAEgAAABUAAAASAAAAEgAAABUAAAASAAAAFQAAAA8AAAASAAAAEgAAABIAAAASAAAAEgAAABUAAAASAAAAEgAAABIAAAAGAAAADAAAABIAAAAbAAAAGwAAABUAAAAPAAAAEgAAABIAAAASAAAAFQAAABUAAAASAAAAEgAAABIAAAASAAAAFQAAABUAAAAVAAAAEgAAABIAAAASAAAAEgAAABIAAAAVAAAAFQAAABUAAAAVAAAAEgAAABIAAAAVAAAADwAAABIAAAASAAAAFQAAABIAAAAVAAAAFQAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABUAAAAVAAAAFQAAABUAAAASAAAAEgAAABIAAAASAAAABgAAABIAAAASAAAAFQAAABUAAAASAAAAEgAAABUAAAAVAAAAFQAAABIAAAAGAAAAEgAAABIAAAAeAAAAHgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAJAAAACQAAAAkAAAAJAAAADwAAAA8AAAAPAAAADwAAAAwAAAAMAAAACQAAAAwAAAASAAAAGAAAAAwAAAASAAAADAAAABIAAAAJAAAACQAAAAwD+gAMAAAABgAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABgAAAAPAAAAGwAAABgAAAAYAAAAGAAAABUAAAAbAAAAGwAAACQAAAAbAAAAGwAAABsAAAAbAAAAGwAAABsAAAAbAAAAGwAAABsAAAAbAAAAGwAAABsAAAAYAAAAGAAAABgAAAAYAAAAGAAAABUAAwAYAAAAGAAAABgAAAAYAAAAGAAAABIAAAAbAAAAGAAAABIAAAASAAAAFQAAABIAAAAVAAAAFQAAAAwAAAAMAAAAEgAAABIAAAAPAAAADwAAABUAAAAVAAAAEgAAABUAAAAPAAAAFQAAABUAAAAPAAAADwAAABIAAAAJAAAACQAAABUAAAAYAAAAAAQAB//8AAgAAAAEAAAAAAAEAAAAOAAAAGAAgAAAAAgABAAEC1AABAAQAAAACAAAAAQAAAAEAAAAAABoBPgABAAAAAAAAABsAAAABAAAAAAABAAsAGwABAAAAAAACAAcAJgABAAAAAAADAA8ALQABAAAAAAAEAA8APAABAAAAAAAFAAsASwABAAAAAAAGABMAVgABAAAAAAAIABYAaQABAAAAAAAJAAwAfwABAAAAAAALABYAiwABAAAAAAAMABYAoQABAAAAAAANACgAtwABAAAAAAATACkA3wADAAEECQAAADYBCAADAAEECQABABYBPgADAAEECQACAA4BVAADAAEECQADAB4BYgADAAEECQAEAB4BgAADAAEECQAFABYBngADAAEECQAGACYBtAADAAEECQAIACwB2gADAAEECQAJABgCBgADAAEECQALACwCHgADAAEECQAMACwCSgADAAEECQANAFACdgADAAEECQATAFICxkNvcHlyaWdodCBBbmRyZXcgVHlsZXIgMjAxNE1pbmVjcmFmdGlhUmVndWxhck1pbmVjcmFmdGlhIDIuME1pbmVjcmFmdGlhIDIuMFZlcnNpb24gMi4wTWluZWNyYWZ0aWEtUmVndWxhcmh0dHA6Ly9hbmRyZXd0eWxlci5uZXRBbmRyZXcgVHlsZXJodHRwOi8vYW5kcmV3dHlsZXIubmV0aHR0cDovL2FuZHJld3R5bGVyLm5ldENyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gU2hhcmUgQWxpa2VGaXZlIGJpZyBxdWFja2luZyB6ZXBoeXJzIGpvbHQgbXkgd2F4IGJlZABDAG8AcAB5AHIAaQBnAGgAdAAgAEEAbgBkAHIAZQB3ACAAVAB5AGwAZQByACAAMgAwADEANABNAGkAbgBlAGMAcgBhAGYAdABpAGEAUgBlAGcAdQBsAGEAcgBNAGkAbgBlAGMAcgBhAGYAdABpAGEAIAAyAC4AMABNAGkAbgBlAGMAcgBhAGYAdABpAGEAIAAyAC4AMABWAGUAcgBzAGkAbwBuACAAMgAuADAATQBpAG4AZQBjAHIAYQBmAHQAaQBhAC0AUgBlAGcAdQBsAGEAcgBoAHQAdABwADoALwAvAGEAbgBkAHIAZQB3AHQAeQBsAGUAcgAuAG4AZQB0AEEAbgBkAHIAZQB3ACAAVAB5AGwAZQByAGgAdAB0AHAAOgAvAC8AYQBuAGQAcgBlAHcAdAB5AGwAZQByAC4AbgBlAHQAaAB0AHQAcAA6AC8ALwBhAG4AZAByAGUAdwB0AHkAbABlAHIALgBuAGUAdABDAHIAZQBhAHQAaQB2AGUAIABDAG8AbQBtAG8AbgBzACAAQQB0AHQAcgBpAGIAdQB0AGkAbwBuACAAUwBoAGEAcgBlACAAQQBsAGkAawBlAEYAaQB2AGUAIABiAGkAZwAgAHEAdQBhAGMAawBpAG4AZwAgAHoAZQBwAGgAeQByAHMAIABqAG8AbAB0ACAAbQB5ACAAdwBhAHgAIABiAGUAZAAAAAAAAwAAAAMAAAAeAAEAAAAAAyYAAwABAAAFMAAAAAQDCAAAAK4AgAAGAC4AfgCsAX8BgwGPAZIBtwHrAe8B/wIbAjcCWQKSAscCywLdA3UDfgOKA4wDoQPOA9cEXwRjBHUEkwSdBKMEqwSzBLsEwgTKBM8E1QTZBOkE8R6FHp4e8yAjICYgMCAzIDYgOiBEIHEgeSCJIKkgrCCuILEgtCC6IQUhEyEXISAhIiEuIV4hmSIG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"
		)));
		fonts.silkscreen = Font.new(register('silkscreen', 200, 'normal', crypt.base64.decode(
			""
		)));
		fonts.graph = Font.new(register('graph', 200, 'normal', crypt.base64.decode(
			""
		)));
		fonts.templeos = Font.new(register('templeos', 200, 'normal', crypt.base64.decode(
			""
		)));

		-- ☆ //   sounds   // ☆ --

		local assets = {
			tarkov = ',uyZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuMTAwqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy4xMDCqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq';
			neverlose = '
		};

		for name, sound in assets do
			local name = 'eternal/sounds/' .. name .. '.mp3';

			if (not isfile(name)) then
				writefile(name, crypt.base64.decode(sound));

				repeat fwait(); until isfile(name);
			end;
			
			sounds[name] = getcustomasset(name .. '.mp3');
		end;
	end));
end;

-- ☆ //   functions   // ☆ --

local run_on_other_thread = LPH_NO_VIRTUALIZE(function(to_run, ...)
    fspawn(function(...)
        local thread = coroutine.create(to_run);
        coroutine.resume(thread, ...);
    end, ...);
end);

local run_on_fixed_thread = LPH_NO_VIRTUALIZE(function(identity, to_run, ...)
	local old = to_run; to_run = function(...)
		setthreadidentity(identity);
		return old(...);
	end;

    fspawn(function(...)
        local thread = coroutine.create(to_run);
        coroutine.resume(thread, ...);
    end, ...);
end);

local animate = LPH_NO_VIRTUALIZE(function(...)
	tween:Create(...):Play();
end);

local lerp = LPH_NO_VIRTUALIZE(function(number, goal, value)
    return (number + (goal - number) * value);
end);

local physics_ignore = (
    game.name == 'Phantom Forces'   and {workspace.Terrain; workspace.Ignore; workspace.Players; camera} or 
    game.name == 'Rivals'           and {workspace.Terrain; camera} or
    game.name == 'Counter Blox'     and {workspace.Terrain; camera; workspace.Ray_Ignore; workspace.Map.Clips; workspace.Map.SpawnPoints; workspace.Debris} or
    game.name == 'Trident Survival' and {camera} or
    {workspace.Terrain; camera}
);

local parameters = raycastparams_new();
parameters.IgnoreWater = true;

local raycast = LPH_NO_VIRTUALIZE(function(mode, origin, direction, ignore, whitelist)
	if (mode == 1) then
		parameters.FilterType = Enum.RaycastFilterType[whitelist and 'Whitelist' or 'Blacklist'];
		parameters.FilterDescendantsInstances = ignore;

		local result = workspace:Raycast(origin, direction, parameters);
		return (result and result.Instance), (result and result.Position), (result and result.Normal);
	elseif (mode == 2) then
		return workspace:FindPartOnRayWithIgnoreList(ray_new(origin, direction), {client.Character; unpack(ignore or physics_ignore)}, nil, nil, nil, nil, nil, nil, nil, true);
	end;
end);

local play_sound = LPH_NO_VIRTUALIZE(function(soundid, volume)
	if (soundid == '') then return; end;

	local instance = draw('Sound');
	instance.SoundId = (typeof(soundid) == 'string' and getcustomasset(soundid) or soundid);
	instance.Volume = volume;

	sound:PlayLocalSound(instance);
	instance:Destroy();
end);

local append_unhook = LPH_NO_VIRTUALIZE(function(to_append)
	local old = getgenv().eternal_unhook;

	getgenv().eternal_unhook = function()
		old();
		to_append();
	end;
end);

local translate_list = {
	['ru'] = {
		['NoClip'] = 'Проходить сквозь стены';
	};
};

local current_language = 'en';
local translate = LPH_NO_VIRTUALIZE(function(text)
	local data = translate_list[current_language];

	if (data) then
		return data[text];
	else
		return text;
	end;
end);

local get_bounding_box = LPH_NO_VIRTUALIZE(function(parts)
	local min, max;
	for _, part in parts do
		local cframe, size = part.CFrame, vector3_one;

		min = vector3_zero_min(min or cframe.Position, (cframe - size * 0.5).Position);
		max = vector3_zero_max(max or cframe.Position, (cframe + size * 0.5).Position);
	end;

	local center = (min + max) * 0.5;
	local front = vector3_new(center.X, center.Y, max.Z);
	return cframe_new(center, front), (max - min);
end);

-- ☆ //   utilities   // ☆ --

local drawing = {}; LPH_NO_VIRTUALIZE(function()

    local found = core:FindFirstChild('eternal drawing');
    if (found) then
        found:Destroy();
    end;

    local screen = draw('ScreenGui');
    screen.Name = 'eternal drawing';
    screen.IgnoreGuiInset = true;
    screen.DisplayOrder = 0x7fffffff - 1;
    screen.ZIndexBehavior = Enum.ZIndexBehavior.Global;
    screen.Parent = core;

    local base = setmetatable({
        visible = true;
        zindex = 0;
        alpha = 0;
        color = color3_new();
        gradient_rotation = 0,
        remove = function(self)
            setmetatable(self, nil);
            table_clear(self);
            table_freeze(self);
		end;
    }, {
        __add = function(t1, t2)
            local result = table_clone(t1);

            for index, value in t2 do
                result[index] = value;
            end;
            return result;
        end;
    });

    function drawing.new(type, parent)
        if (type == 'line') then
            local instance = ({
                from = vector2_zero;
                to = vector2_zero;
                thickness = 1;
                outline_thickness = 0;
            } + base);

            local line = draw('Frame');

            line.AnchorPoint = (vector2_one / 2);
            line.BorderSizePixel = 0;
            line.BorderColor3 = color3_fromrgb(0, 0, 0);
            line.BackgroundColor3 = instance.color;
            line.Visible = instance.visible;
            line.ZIndex = instance.zindex;
            line.BackgroundTransparency = instance.alpha;
            line.Size = udim2_new();
            line.Parent = (parent or screen);

            local metatable; metatable = setmetatable(table_create(0), {
                __newindex = function(_, index, value)
					if (index == 'parent') then
						line.Parent = value or screen;
                    elseif (index == 'from') then
                        local direction = (instance.to - value);
                        local center = (instance.to + value) / 2;
                        local distance = direction.Magnitude;
                        local theta = math_deg(math_atan2(direction.Y, direction.X));

                        line.Position = udim2_fromoffset(center.X, center.Y);
                        line.Rotation = theta;
                        line.Size = udim2_fromoffset(distance, instance.Thickness);
                    elseif (index == 'to') then
                        local direction = (value - instance.from);
                        local center = (value + instance.from) / 2;
                        local distance = direction.Magnitude;
                        local theta = math_deg(math_atan2(direction.Y, direction.X));

                        line.Position = udim2_fromoffset(center.X, center.Y);
                        line.Rotation = theta;
                        line.Size = udim2_fromoffset(distance, instance.thickness);
                    elseif (index == 'thickness') then
                        local distance = (instance.to - instance.from).Magnitude;

                        line.Size = udim2_fromoffset(distance, value);
                    elseif (index == 'visible') then
                        line.Visible = value;
                    elseif (index == 'zindex') then
                        line.ZIndex = value;
                    elseif (index == 'alpha') then
                        if (typeof(value) == 'table') then
                            line.BackgroundTransparency = 0;

							if (not gradient) then
								local gradient = draw('UIGradient');
								gradient.Parent = line;
            					gradient.Enabled = true;
							end;

                            gradient.Transparency = numbersequence_new({numbersequencekeypoint_new(0, value[1]), numbersequencekeypoint_new(1, value[2])});
                        else
                            line.BackgroundTransparency = value;

							if (gradient) then
								gradient:Destroy();
							end;
                        end;
                    elseif (index == 'color') then
                        if (typeof(value) == 'table') then
                            line.BackgroundColor3 = color3_new(1,1,1);

							if (not gradient) then
								local gradient = draw('UIGradient');
								gradient.Parent = line;
            					gradient.Enabled = true;
							end;

                            gradient.Enabled = true;
                            gradient.Color = colorsequence_new({colorsequencekeypoint_new(0, value[1]), colorsequencekeypoint_new(1, value[2])});
                        else
                            line.BackgroundColor3 = value;

							if (gradient) then
								gradient:Destroy();
							end;
                        end;
                    elseif (index == 'outline_thickness') then
                        line.BorderSizePixel = value;
                    end;

                    instance[index] = value;
                end;
                __index = function(self, index)
                    if (index == 'destroy') then
                        return function()
                            line:Destroy();
                            instance.remove(metatable);
                            return line:Remove();
                        end;
                    end;
                    return instance[index];
                end;
            });

            return metatable;
        elseif (type == 'text') then
            local instance = ({
                text = '';
                font = Enum.Font.Code;
                size = 0;
                position = vector2_zero;
                outline_thickness = 0;
                alignment = 'center';
            } + base);

            local text = draw('TextLabel');
            local outline = draw('UIStroke');
            local gradient = draw('UIGradient');

            text.AnchorPoint = (vector2_one / 2);
            text.BorderSizePixel = 0;
            text.BackgroundTransparency = 1;
            text.Size = udim2_fromoffset(100, 100);
            text.Visible = instance.visible;
            text.TextColor3 = instance.color;
            text.TextTransparency = instance.alpha;
            text.ZIndex = instance.zindex;
            text.Font = instance.font;
            text.TextSize = instance.size;
            text.TextXAlignment = Enum.TextXAlignment.Center;
            text.TextYAlignment = Enum.TextYAlignment.Center;
            text.Parent = (parent or screen);

            outline.Parent = text;
            outline.Thickness = 0;

            gradient.Parent = text;
            gradient.Enabled = false;

            local metatable; metatable = setmetatable(table_create(0), {
                __newindex = function(_, index, value)
                    if (index == 'parent') then
						text.Parent = value or screen;
                    elseif (index == 'text') then
                        text.Text = value;
                    elseif (index == 'font') then
                        if (typeof(value) == 'EnumItem') then
                            text.Font = value;
                        else
                            text.FontFace = value;
                        end;
                    elseif (index == 'size') then
                        text.TextSize = value;
                    elseif (index == 'position') then
                        text.Position = udim2_fromoffset(value.X, value.Y);
                    elseif (index == 'outline_thickness') then
                        outline.Thickness = value;
                    elseif (index == 'visible') then
                        text.Visible = value;
                    elseif (index == 'zindex') then
                        text.ZIndex = value;
                    elseif (index == 'alpha') then
                        if (typeof(value) == 'table') then
                            text.TextTransparency = 0;

                            gradient.Enabled = true;
                            gradient.Transparency = numbersequence_new({numbersequencekeypoint_new(0, value[1]), numbersequencekeypoint_new(1, value[2])});
                        else
                            text.TextTransparency = value;

                            gradient.Enabled = false;
                        end;
                    elseif (index == 'color') then
                        if (typeof(value) == 'table') then
                            text.TextColor3 = color3_new(1, 1, 1);

                            gradient.Enabled = true;
                            gradient.Color = colorsequence_new({colorsequencekeypoint_new(0, value[1]), colorsequencekeypoint_new(1, value[2])});
                        else
                            text.TextColor3 = value;

                            gradient.Enabled = false;
                        end;
                    elseif (index == 'gradient_rotation') then
                        gradient.Rotation = value;
                    elseif (index == 'alignment') then
                        text.TextXAlignment = (value == 'left' and Enum.TextXAlignment.Left or value == 'right' and Enum.TextXAlignment.Right or Enum.TextXAlignment.Center);

                        if (value ~= 'center') then
                            text.AnchorPoint = vector2_new(0, 0.5);
                        else
                            text.AnchorPoint = vector2_new(0.5, 0.5);
                        end;
                    end;

                    instance[index] = value;
                end;
                __index = function(self, index)
                    if (index == 'destroy') then
                        return function()
                            text:Destroy();
                            instance.remove(metatable);
                            return text:Remove();
                        end;
                    end;
                    return instance[index];
                end;
            });

            return metatable;
        elseif (type == 'circle') then
            local instance = ({
                radius = 150,
                position = udim2_new(),
                size = 1,
                outline_thickness = 0,
                fill_color = color3_new(1, 1, 1),
                fill_alpha = 0,
            } + base)

            local outline = draw('Frame')
            local outliner = draw('UIStroke')
            local circle = draw('Frame')
            local rounder = draw('UICorner')
            local circle_outliner = draw('UIStroke')
            local outline_rounder = draw('UICorner')
            local circle_gradient = draw('UIGradient')
            local fill_gradient = draw('UIGradient')

            circle.Parent = screen
            circle.AnchorPoint = (vector2_one / 2)
            circle.Size = udim2_fromoffset(instance.radius, instance.radius)
            circle.BorderSizePixel = 0
            circle.BackgroundTransparency = 1
            circle.BackgroundColor3 = instance.color
            circle.Visible = instance.visible
            circle.ZIndex = 2

            rounder.CornerRadius = udim_new(1, 0)
            rounder.Parent = circle

            circle_outliner.Parent = circle
            circle_outliner.Thickness = instance.size
            circle_outliner.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

            outline.Parent = screen
            outline.BackgroundTransparency = 1

            outline_rounder.CornerRadius = udim_new(1, 0)
            outline_rounder.Parent = outline

            outliner.Parent = outline
            outliner.Thickness = instance.outline_thickness
            outliner.Color = color3_new(0, 0, 0)
            outliner.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

            circle_gradient.Parent = circle_outliner
            circle_gradient.Enabled = false

            fill_gradient.Parent = circle
            fill_gradient.Enabled = false

            local metatable; metatable = setmetatable(table_create(0), {
                __newindex = function(_, index, value)
                    if (index == 'parent') then
						outline.Parent = value or screen;
						circle.Parent = value or screen;
                    elseif (index == 'radius') then
                        local radius = value * 2

                        circle.Size = udim2_fromoffset(radius, radius)
                    elseif (index == 'position') then
                        circle.Position = udim2_fromoffset(value.X, value.Y)
                    elseif (index == 'size') then
                        circle_outliner.Thickness = value
                    elseif (index == 'visible') then
                        circle.Visible = value
                        outline.Visible = value
                    elseif (index == 'zindex') then
                        circle.ZIndex = value
                    elseif (index == 'alpha') then
                        if (typeof(value) == 'table') then
                            circle_outliner.Transparency = 0

                            circle_gradient.Enabled = true
                            circle_gradient.Transparency = numbersequence_new({numbersequencekeypoint_new(0, value[1]), numbersequencekeypoint_new(1, value[2])})
                        else
                            circle_outliner.Transparency = value

                            circle_gradient.Enabled = false
                        end
                    elseif (index == 'color') then
                        if (typeof(value) == 'table') then
                            circle_outliner.Color = color3_new(1, 1, 1)

                            circle_gradient.Enabled = true
                            circle_gradient.Color = colorsequence_new({colorsequencekeypoint_new(0, value[1]), colorsequencekeypoint_new(1, value[2])})
                        else
                            circle_outliner.Color = value

                            circle_gradient.Enabled = false
                        end
                    elseif (index == 'fill_alpha') then
                        if (typeof(value) == 'table') then
                            circle.BackgroundTransparency = 0

                            fill_gradient.Enabled = true
                            fill_gradient.Transparency = numbersequence_new({numbersequencekeypoint_new(0, value[1]), numbersequencekeypoint_new(1, value[2])})
                        else
                            circle.BackgroundTransparency = value

                            fill_gradient.Enabled = false
                        end
                    elseif (index == 'fill_color') then
                        if (typeof(value) == 'table') then
                            circle.BackgroundColor3 = color3_new(1, 1, 1)

                            fill_gradient.Enabled = true
                            fill_gradient.Color = colorsequence_new({colorsequencekeypoint_new(0, value[1]), colorsequencekeypoint_new(1, value[2])})
                        else
                            circle.BackgroundColor3 = value

                            fill_gradient.Enabled = false
                        end
                    elseif (index == 'outline_thickness') then
                        if (value ~= 0) then
                            outliner.Thickness = (value * 2) + instance.size
                        else
                            outliner.Thickness = 0
                        end

                        local radius = instance.radius

                        outline.Size = circle.Size - udim2_fromoffset(value * 2, value * 2)
                        outline.Position = (circle.Position + udim2_fromoffset(value, value)) - udim2_fromoffset(radius, radius)
                    elseif (index == 'gradient_rotation') then
                        circle_gradient.Rotation = value
                        fill_gradient.Rotation = value
                    end

                    instance[index] = value
                end,
                __index = function(self, index)
                    if (index == 'destroy') then
                        return function()
                            circle:Destroy()
                            instance.remove(metatable)
                            return circle:Remove()
                        end
                    end
                    return instance[index]
                end
            })

            return metatable
        elseif (type == 'square') then
            local instance = ({
                size = udim2_new(),
                position = udim2_new(),
                thickness = 1,
                outline_thickness = 0,
                fill_color = color3_new(1, 1, 1),
                fill_alpha = 0,
            } + base)

			local outline;
            local outliner;

            local square = draw('Frame');
			local square_outliner = draw('UIStroke');
            local square_gradient = draw('UIGradient');
            local fill_gradient = draw('UIGradient');

            square.Parent = (parent or screen)
            square.Size = instance.size
            square.BorderSizePixel = 0
            square.BackgroundTransparency = 1
            square.BackgroundColor3 = instance.color
            square.Visible = instance.visible
            square.ZIndex = 2

			square_outliner.Parent = square;
			square_outliner.Thickness = instance.thickness;
			square_outliner.ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
			square_outliner.LineJoinMode = Enum.LineJoinMode.Miter;

            square_gradient.Parent = square_outliner
            square_gradient.Enabled = false

            fill_gradient.Parent = square
            fill_gradient.Enabled = false

            local metatable; metatable = setmetatable(table_create(0), {
                __newindex = function(_, index, value)
                    if (index == 'parent') then
						if (outline) then
							outline.Parent = value or screen;
						end;

						square.Parent = value or screen;
                    elseif (index == 'size') then
                        square.Size = value;
                    elseif (index == 'position') then
                        square.Position = value;

						if (outline) then
							outline.Position = (value + udim2_fromoffset(instance.outline_thickness, instance.outline_thickness));
						end;
                    elseif (index == 'thickness') then
						square_outliner.Thickness = value;
                    elseif (index == 'visible') then
                        square.Visible = value;

						if (outline) then
                        	outline.Visible = value;
						end;
                    elseif (index == 'zindex') then
                        square.ZIndex = value;
                    elseif (index == 'alpha') then
                        if (typeof(value) == 'table') then
                            square_outliner.Transparency = 0;

                            square_gradient.Enabled = true;
                            square_gradient.Transparency = numbersequence_new({numbersequencekeypoint_new(0, value[1]), numbersequencekeypoint_new(1, value[2])});
                        else
                            square_outliner.Transparency = value;

                            square_gradient.Enabled = false;
                        end;
                    elseif (index == 'color') then
                        if (typeof(value) == 'table') then
                            square_outliner.Color = color3_new(1, 1, 1);

                            square_gradient.Enabled = true;
                            square_gradient.Color = colorsequence_new({colorsequencekeypoint_new(0, value[1]), colorsequencekeypoint_new(1, value[2])});
                        else
                            square_outliner.Color = value;

                            square_gradient.Enabled = false;
                        end;
                    elseif (index == 'fill_alpha') then
                        if (typeof(value) == 'table') then
                            square.BackgroundTransparency = 0;

                            fill_gradient.Enabled = true;
                            fill_gradient.Transparency = numbersequence_new({numbersequencekeypoint_new(0, value[1]), numbersequencekeypoint_new(1, value[2])});
                        else
                            square.BackgroundTransparency = value;

                            fill_gradient.Enabled = false;
                        end;
                    elseif (index == 'fill_color') then
                        if (typeof(value) == 'table') then
                            square.BackgroundColor3 = color3_new(1, 1, 1);

                            fill_gradient.Enabled = true;
                            fill_gradient.Color = colorsequence_new({colorsequencekeypoint_new(0, value[1]), colorsequencekeypoint_new(1, value[2])});
                        else
                            square.BackgroundColor3 = value;

                            fill_gradient.Enabled = false;
                        end;
                    elseif (index == 'outline_thickness') then
						if (value == 0) then
							if (outline) then
								outline:Destroy();
								outline = nil;
							end;

							if (outliner) then
								outliner:Destroy();
								outliner = nil;
							end;
						else
							if (not outline) then
								outline = draw('Frame');
								outline.Visible = square.Visible;
								outline.Parent = (parent or screen);
								outline.BackgroundTransparency = 1;
								outline.ZIndex = 1;

								outliner = draw('UIStroke');
								outliner.Parent = outline;
								outliner.Thickness = instance.outline_thickness;
								outliner.ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
								outliner.LineJoinMode = Enum.LineJoinMode.Miter;
							end;

							outliner.Thickness = (value * 2) + instance.thickness;

                        	outline.Size = square.Size - udim2_fromoffset(value * 2, value * 2);
                        	outline.Position = (square.Position + udim2_fromoffset(value, value));
						end;
                    elseif (index == 'gradient_rotation') then
                        square_gradient.Rotation = value;
                        fill_gradient.Rotation = value;
                    end;

                    instance[index] = value;
                end;
                __index = function(self, index)
                    if (index == 'destroy') then
                        return function()
							if (outline) then
								outline:Destroy();
							end;
                            square:Destroy();
                            instance.remove(metatable);
                            return square:Remove();
                        end
                    end
                    return instance[index];
                end;
            });

            return metatable
        elseif (type == 'image') then
            local instance = ({
                image = '',
                size = Vector2.zero,
                position = Vector2.zero
            } + base)

            local image = draw('ImageLabel')
            local gradient = draw('UIGradient')

            image.BorderSizePixel = 0
            image.ScaleType = Enum.ScaleType.Stretch
            image.BackgroundTransparency = 1
            image.Visible = false
            image.ImageTransparency = 1
            image.Parent = parent or screen

            gradient.Parent = image
            gradient.Enabled = false

            local metatable; metatable = setmetatable(table.create(0), {
                __newindex = function(_, index, value)
					if (index == 'parent') then
						image.Parent = value or screen;
                    elseif (index == 'image') then
                        image.Image = value
                    elseif (index == 'size') then
                        image.Size = udim2_fromoffset(value.X, value.Y)
                    elseif (index == 'position') then
                        image.Position = udim2_fromoffset(value.X, value.Y)
                    elseif (index == 'visible') then
                        image.Visible = value
                    elseif (index == 'rotation') then
                        image.Rotation = value
                    elseif (index == 'zindex') then
                        image.ZIndex = value
                    elseif (index == 'alpha') then
                        if (typeof(value) == 'table') then
                            image.ImageTransparency = 0

                            gradient.Enabled = true
                            gradient.Transparency = numbersequence_new({numbersequencekeypoint_new(0, value[1]), numbersequencekeypoint_new(1, value[2])})
                        else
                            image.ImageTransparency = value

                            gradient.Enabled = false
                        end
                    elseif (index == 'color') then
                        if (typeof(value) == 'table') then
                            image.ImageColor3 = color3_new(1, 1, 1)

                            gradient.Enabled = true
                            gradient.Color = colorsequence_new({colorsequencekeypoint_new(0, value[1]), colorsequencekeypoint_new(1, value[2])})
                        else
                            image.ImageColor3 = value

                            gradient.Enabled = false
                        end
                    elseif (index == 'gradient_rotation') then
                        gradient.Rotation = value
                    end

                    instance[index] = value
                end,
                __index = function(self, index)
                    if (index == 'destroy') then
                        return function()
                            image:Destroy()
                            instance.remove(metatable)
                            return image:Remove()
                        end
                    end
                    return instance[index]
                end
            });

            return metatable;
        end;
    end;

    function drawing:destroy()
        for _, instance in screen:GetDescendants() do
            instance:Destroy();
        end;

        screen:Destroy();
    end;
end)();

local ui, flags; LPH_NO_VIRTUALIZE(function()

	ui = {};
	flags = {};

	local drag_count = 0;
	local drag_speed = 0.1;
	local function hook_drag(dragger, parent)
		local dragger_start = udim2_new();
		local parent_start  = udim2_new(); 
		local drag_input;

		table_insert(connections, dragger.InputBegan:Connect(function(input)
			if (drag_count == 0 and ((input.UserInputType == Enum.UserInputType.MouseButton1) or (input.UserInputType == Enum.UserInputType.Touch))) then
				drag_count += 1;
				dragger_start  = input.Position;
				parent_start   = (parent or dragger).Position;
				drag_input = input;

				local hook; hook = input.Changed:Connect(function()
					if (input.UserInputState == Enum.UserInputState.End) then
						hook:Disconnect();

						drag_input  = nil;
						drag_count -= 1;
					end;
				end);

				table_insert(connections, hook);
			end;
		end));

		table_insert(connections, uis.InputChanged:Connect(function(input)
			if (drag_input and (input.UserInputType == Enum.UserInputType.MouseMovement) or (input.UserInputType == Enum.UserInputType.Touch)) then
				local viewport = camera.ViewportSize;
				local delta = input.Position - dragger_start;
				local position = udim2_new(parent_start.X.Scale, parent_start.X.Offset + delta.X, parent_start.Y.Scale, parent_start.Y.Offset + delta.Y);

				--tween:Create((parent or dragger), tweeninfo_new(drag_speed, Enum.EasingStyle.Circular), {Position = position}):Play();
				(parent or dragger).Position = position;
			end;
		end));
	end;

	local function round(gui, scale, offset)
		local rounder = draw('UICorner');

		rounder.Parent = gui;
		rounder.CornerRadius = udim_new(scale or 0, offset or 0);
	end;

	local hotkeys = {};

	local function update_color(position, color) end;
	local function set_config(config) end;
	local function tab_transition() end;
	local function set_language() end;

	local copyied_color;
	local gradient_rotation = 0;
	
	local function loop(time, to_loop)
		fspawn(function()
			local last_answer = tick();
			local cap = 0;

			repeat
				local time = (typeof(time) == 'function' and time() or time);
				
				cap = (tick() - last_answer);
				for i = 1, (cap / time) do
					to_loop();
				end;

				last_answer = tick();
				fwait(time)
			until (unhooked);
		end);
	end;

	function ui:window()

		local functions = {};
		local is_window_visible = true;

		local colors = {
			color3_fromrgb(92, 87, 191);
			color3_fromrgb(30, 30, 40);
			color3_fromrgb(19, 18, 25);
			color3_fromrgb(23, 23, 30);
			color3_fromrgb(84, 82, 102);
			color3_fromrgb(78, 77, 84);
		};

		local section_shadows = {};

		local screen = draw('ScreenGui');
		local cursor = draw('Frame');
		local main_frame = draw('Frame');
		local logo_bg = draw('Frame');
		local logo_text = draw('TextLabel');
		local tab_holder = draw('Frame');
		local tab_layout = draw('UIListLayout');
		local tabs_outline_bg = draw('Frame');
		local tabs_outline = draw('UIStroke');
		local group_bg = draw('Frame');
		local group_holder = draw('Frame');
		local group_layout = draw('UIListLayout');
		local group_closer = draw('ImageButton');
		local main_holder = draw('Frame');
		local holder_layout = draw('UIListLayout');
		local misc_holder = draw('Frame');
		local mobile_hide = draw('TextButton');
		
		local elements = {}; do
			function elements:toggle(args)
				local bool = args.default;
				if (args.flag) then
					flags[args.flag] = {
						bool = args.default;
						bind = args.bind;
					};
				end;

				local toggle = draw('TextButton');
				local text = draw('TextLabel');
				local bind = draw('TextLabel');
				local path = draw('Frame');
				local circle = draw('Frame');

				toggle.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				toggle.BackgroundTransparency = 1.000;
				toggle.BorderColor3 = color3_fromrgb(0, 0, 0);
				toggle.BorderSizePixel = 0;
				toggle.Size = udim2_new(1, 0, 0, 35);
				toggle.AutoButtonColor = false;
				toggle.Font = Enum.Font.SourceSans;
				toggle.Text = '';
				toggle.TextColor3 = color3_fromrgb(0, 0, 0);
				toggle.TextSize = 14.000;

				local function fire_toggle()
					local value;
					if (args.flag) then
						flags[args.flag].bool = not flags[args.flag].bool;
						value = flags[args.flag].bool;
						
						if (bind.Text ~= '') then
							hotkeys[toggle] = {
								bool = value;
								text = args.text;
								key = bind.Text;
							};
						else
							hotkeys[toggle] = {};
						end;
					else
						bool = not bool;
						value = bool;
					end;

					if (value) then
						tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(233, 233, 233)}):Play();
						tween:Create(circle, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Position = udim2_new(1, -17, 0, 2); BackgroundColor3 = colors[1]}):Play();
					else
						tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
						tween:Create(circle, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Position = udim2_new(0, 3, 0, 2); BackgroundColor3 = color3_fromrgb(47, 45, 65)}):Play();
					end;

					pcall(args.callback, value);
				end;

				table_insert(connections, toggle.MouseButton1Click:Connect(function()
					fire_toggle();
				end));
				
				if (args.flag) then
					local ignore_next;
					table_insert(connections, uis.InputBegan:Connect(function(input)
						if (input.UserInputType == Enum.UserInputType.MouseButton2) then
							if (not is_window_visible) then
								ignore_next = true;
							end;
						end;
					end));

					local binding;
					table_insert(connections, toggle.MouseButton2Up:Connect(function()
						if (ignore_next) then
							ignore_next = false;
							return;
						end;

						binding = true;
						bind.Text = '...';
					end));

					local function get_input_type(input)
						return (input.KeyCode == Enum.KeyCode.Unknown and 'UserInputType' or 'KeyCode')
					end;

					local function get_input_name(input)
						return input[get_input_type(input)].Name
					end;

					table_insert(connections, uis.InputBegan:Connect(function(input)
						if (uis:GetFocusedTextBox()) then return; end;
						fwait();

						if (input.UserInputType == Enum.UserInputType.MouseMovement) then
							return;
						end;

						if (binding) then
							if (input.KeyCode == Enum.KeyCode.Backspace or input.KeyCode == Enum.KeyCode.Delete) then
								flags[args.flag].bind = nil;
								bind.Text = '';
								binding = false;
								hotkeys[toggle] = {};

								return;
							end;

							flags[args.flag].bind = {
								path = get_input_type(input);
								name = get_input_name(input);
							};

							bind.Text = get_input_name(input);

							local released;
							local hook; hook = uis.InputEnded:Connect(function(output)
								if (get_input_type(output) == get_input_type(input) and get_input_name(output) == get_input_name(input)) then
									hook:Disconnect();
									released = true;
									binding = false;
								end;
							end);

							hotkeys[toggle] = {
								bool = flags[args.flag].bool;
								text = args.text;
								key = bind.Text;
							};

							fwait(0.5);
							hook:Disconnect();

							if (not released) then
								flags[args.flag].bind = {
									path = get_input_type(input);
									name = get_input_name(input);
									hold = true;
								};

								bind.Text = (get_input_name(input) .. ' (HOLD)');
							end;

							hotkeys[toggle] = {
								bool = flags[args.flag].bool;
								text = args.text;
								key = bind.Text;
							};

							binding = false;
						else
							local data = flags[args.flag].bind;

							if (data and get_input_type(input) == data.path and get_input_name(input) == data.name) then
								fire_toggle();

								if (data.hold) then
									local hook; hook = uis.InputEnded:Connect(function(output)
										if (get_input_type(output) == data.path and get_input_name(output) == data.name) then
											hook:Disconnect();
											fire_toggle();
										end;
									end);
								end;
							end;
						end;
					end));
				end;

				text.Parent = toggle;
				text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				text.BackgroundTransparency = 1;
				text.BorderColor3 = color3_fromrgb(0, 0, 0);
				text.BorderSizePixel = 0;
				text.Position = udim2_new(0, 10, 0, 0);
				text.Size = udim2_new(1, -10, 1, 0);
				text.Font = Enum.Font.SourceSansBold;
				text.Text = translate(args.text);
				text.TextColor3 = (args.default and color3_fromrgb(233, 233, 233) or color3_fromrgb(78, 77, 84));
				text.TextSize = 15;
				text.TextXAlignment = Enum.TextXAlignment.Left;

				if (string_sub(args.text, 1, 7) == 'Stop if') then
					text.TextScaled = true;
					text.Size = udim2_new(1, -70, 1, 0);
				end;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						text.TextColor3 = ((args.flag and flags[args.flag].bool or bool) and color3_fromrgb(233, 233, 233) or colors[6]);
					end;

					return old(position, color);
				end;

				local old = set_language; set_language = function()
					text.Text = translate(args.text);

					return old();
				end;

				bind.Parent = toggle;
				bind.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				bind.BackgroundTransparency = 1.000;
				bind.BorderColor3 = color3_fromrgb(0, 0, 0);
				bind.BorderSizePixel = 0;
				bind.Position = udim2_new(0, 9, 0, 0);
				bind.Size = udim2_new(1, -80, 1, 0);
				bind.Font = Enum.Font.SourceSansBold;
				bind.Text = (args.bind and (args.bind.name .. (args.bind.hold and ' (HOLD)' or '')) or '');
				bind.TextColor3 = color3_fromrgb(81, 82, 192);
				bind.TextSize = 15.000;
				bind.TextXAlignment = Enum.TextXAlignment.Right;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						bind.TextColor3 = colors[1];
					end;

					return old(position, color);
				end;

				path.Parent = toggle;
				path.BackgroundColor3 = color3_fromrgb(24, 24, 33);
				path.BorderColor3 = color3_fromrgb(0, 0, 0);
				path.BorderSizePixel = 0;
				path.Position = udim2_new(1, -53, 0.5, -9);
				path.Size = udim2_new(0, 40, 0, 18);

				round(path, 1);

				circle.Parent = path;
				circle.BackgroundColor3 = (args.default and color3_fromrgb(92, 87, 191) or color3_fromrgb(47, 45, 65));
				circle.BorderColor3 = color3_fromrgb(0, 0, 0);
				circle.BorderSizePixel = 0;
				circle.Position = (args.default and udim2_new(1, -17, 0, 2) or udim2_new(0, 3, 0, 2));
				circle.Size = udim2_new(0, 14, 0, 14);

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						circle.BackgroundColor3 = ((args.flag and flags[args.flag].bool or bool) and colors[1] or color3_fromrgb(47, 45, 65));
					end;

					return old(position, color);
				end;

				round(circle, 1);

				local old = tab_transition; tab_transition = function()
					local bool = not (args.flag and flags[args.flag].bool or bool);

					text.TextColor3 = (bool and color3_fromrgb(233, 233, 233) or colors[6]);
					circle.BackgroundColor3 = (bool and colors[1] or color3_fromrgb(47, 45, 65));
					circle.Position = (bool and udim2_new(1, -17, 0, 2) or udim2_new(0, 3, 0, 2));

					if (not bool) then
						tween:Create(text, tweeninfo_new(0.65, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(233, 233, 233)}):Play();
						tween:Create(circle, tweeninfo_new(0.65, Enum.EasingStyle.Circular), {Position = udim2_new(1, -17, 0, 2); BackgroundColor3 = colors[1]}):Play();
					else
						tween:Create(text, tweeninfo_new(0.65, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
						tween:Create(circle, tweeninfo_new(0.65, Enum.EasingStyle.Circular), {Position = udim2_new(0, 3, 0, 2); BackgroundColor3 = color3_fromrgb(47, 45, 65)}):Play();
					end;

					return old();
				end;

				local functions = {};

				function functions:set_enabled(bool)
					flags[args.flag].bool = (not bool);
					fire_toggle();
				end;
				
				local old = set_config; set_config = function(config)
					fspawn(function()
						if (args.flag) then
							functions:set_enabled(config[args.flag].bool);
							
							local data = flags[args.flag].bind;
							if (data and data.name) then
								bind.Text = ((data.name) .. (data.hold and ' (HOLD)' or ''));
							else
								bind.Text = '';
							end;
						end;
					end);

					return old(config);
				end;

				return functions, toggle;
			end;

			function elements:textbox(args)
				flags[args.flag] = args.default;

				local bg = draw('TextButton');
				local text = draw('TextLabel');
				local box = draw('TextBox');

				bg.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				bg.BackgroundTransparency = 1.000;
				bg.BorderColor3 = color3_fromrgb(0, 0, 0);
				bg.BorderSizePixel = 0;
				bg.Size = udim2_new(1, 0, 0, 35);
				bg.AutoButtonColor = false;
				bg.Font = Enum.Font.SourceSans;
				bg.Text = '';
				bg.TextColor3 = color3_fromrgb(0, 0, 0);
				bg.TextSize = 14.000;

				text.Parent = bg;
				text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				text.BackgroundTransparency = 1;
				text.BorderColor3 = color3_fromrgb(0, 0, 0);
				text.BorderSizePixel = 0;
				text.Position = udim2_new(0, 10, 0, 0);
				text.Size = udim2_new(1, -10, 1, 0);
				text.Font = Enum.Font.SourceSansBold;
				text.Text = translate(args.text);
				text.TextColor3 = colors[6];
				text.TextSize = 15;
				text.TextXAlignment = Enum.TextXAlignment.Left;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						text.TextColor3 = colors[6];
					end;

					return old(position, color);
				end;

				local old = set_language; set_language = function()
					text.Text = translate(args.text);

					return old();
				end;

				box.Parent = bg;
				box.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				box.BackgroundTransparency = 1.000;
				box.BorderColor3 = color3_fromrgb(0, 0, 0);
				box.BorderSizePixel = 0;
				box.Position = udim2_new(0, 9, 0, 0);
				box.Size = udim2_new(1, -24, 1, 0);
				box.Font = Enum.Font.SourceSansBold;
				box.Text = args.default;
				box.TextColor3 = color3_fromrgb(233, 233, 233);
				box.TextSize = 15.000;
				box.TextXAlignment = Enum.TextXAlignment.Right;
				box.FocusLost:Connect(function()
					flags[args.flag] = box.Text;
				end);

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						box.TextColor3 = color3_fromrgb(233, 233, 233);
					end;

					return old(position, color);
				end;

				local functions = {};
				
				local old = set_config; set_config = function(config)
					fspawn(function()
						if (args.flag) then
							box.Text = flags[args.flag];
						end;
					end);

					return old(config);
				end;

				return functions, bg;
			end;

			function elements:slider(args)
				local slider_value = args.default;
				if (args.flag) then
					flags[args.flag] = args.default;
				end;

				local dragging;

				local slider = draw('TextButton');
				local text = draw('TextLabel');
				local custom_value = draw('TextBox');
				local path = draw('Frame');
				local positive_progress = draw('Frame');
				local negative_progress = draw('Frame');
				local positive_circle = draw('Frame');
				local negative_circle = draw('Frame');
				local minus = draw('TextButton');
				local plus = draw('TextButton');

				slider.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				slider.BackgroundTransparency = 1.000;
				slider.BorderColor3 = color3_fromrgb(0, 0, 0);
				slider.BorderSizePixel = 0;
				slider.Position = udim2_new(-5.58930076e-08, 0, 0.246102229, 0);
				slider.Size = udim2_new(1, 0, 0, 75);
				slider.AutoButtonColor = false;
				slider.Font = Enum.Font.SourceSans;
				slider.Text = '';
				slider.TextColor3 = color3_fromrgb(0, 0, 0);
				slider.TextSize = 14.000;

				local function update(...)
					local percent, value;

					if (typeof(...) == 'Vector2') then
						percent = (math_clamp(((...).X - path.AbsolutePosition.X) / path.AbsoluteSize.X, 0, 1) * 100);
						value = ((args.max - args.min) * (percent / 100) + args.min);
					elseif (typeof(...) == 'number') then
						local divider = args.max - math_abs(args.min);
						if (args.min < 0) then
							divider = args.max + math_abs(args.min);
						end;

						percent = ((((...) - args.min) / divider) * 100);
						value = (...);	
					else
						return;
					end;

					value = math_round(value * (args.float or 1)) / (args.float or 1);

					if (args.flag) then
						flags[args.flag] = value;
					else
						slider_value = value;
					end;

					if (args.callback) then
						fspawn(pcall, args.callback, value);
					end;

					custom_value.Text = (value .. translate(args.suffix));

					tween:Create(positive_progress, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Size = udim2_new(math_clamp((percent / 100), 0, 1) - (math_abs(args.min) / (math_abs(args.min) + args.max)), 0, 1, 0)}):Play();
				end; update(args.default);

				table_insert(connections, slider.MouseButton1Down:Connect(function()
					dragging = true;

					update(uis:GetMouseLocation());
				end));

				table_insert(connections, uis.InputEnded:Connect(function(input)
					if (input.UserInputType == Enum.UserInputType.MouseButton1) or (input.UserInputType == Enum.UserInputType.Touch) then
						dragging = false;
					end;
				end));

				table_insert(connections, uis.InputChanged:Connect(function(input)
					if (not is_window_visible) then return; end;
					if (dragging and ((input.UserInputType == Enum.UserInputType.MouseMovement) or (input.UserInputType == Enum.UserInputType.Touch))) then
						update(uis:GetMouseLocation());
					end;
				end));

				text.Parent = slider;
				text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				text.BackgroundTransparency = 1.000;
				text.BorderColor3 = color3_fromrgb(0, 0, 0);
				text.BorderSizePixel = 0;
				text.Position = udim2_new(0, 10, 0, 0);
				text.Size = udim2_new(1, 0, 0, 35);
				text.Font = Enum.Font.SourceSansBold;
				text.Text = translate(args.text);
				text.TextColor3 = color3_fromrgb(78, 77, 84);
				text.TextSize = 15.000;
				text.TextXAlignment = Enum.TextXAlignment.Left;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						text.TextColor3 = colors[6];
					end;

					return old(position, color);
				end;

				custom_value.Parent = slider;
				custom_value.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				custom_value.BackgroundTransparency = 1.000;
				custom_value.BorderColor3 = color3_fromrgb(0, 0, 0);
				custom_value.BorderSizePixel = 0;
				custom_value.Position = udim2_new(0.5, -20, 0, 5);
				custom_value.Size = udim2_new(0.5, 0, 0, 25);
				custom_value.Font = Enum.Font.SourceSansBold;
				custom_value.TextColor3 = color3_fromrgb(255, 255, 255);
				custom_value.TextSize = 15.000;
				custom_value.TextXAlignment = Enum.TextXAlignment.Right;

				local old = set_language; set_language = function()
					text.Text = translate(args.text);
					custom_value.Text = ((flags[args.flag] or slider_value) .. translate(args.suffix));

					return old();
				end;

				local old = tab_transition; tab_transition = function()
					local old_size = positive_progress.Size;
					positive_progress.Size = udim2_new(0, 0, 1, 0);
					tween:Create(positive_progress, tweeninfo_new(0.65, Enum.EasingStyle.Circular), {Size = old_size}):Play();	

					return old();
				end;

				table_insert(connections, custom_value:GetPropertyChangedSignal('Text'):Connect(function()
					update(tonumber(string_sub(custom_value.Text, 1, (#custom_value.Text - #translate(args.suffix)))))
				end));

				path.Parent = slider;
				path.BackgroundColor3 = color3_fromrgb(23, 23, 30);
				path.BorderColor3 = color3_fromrgb(0, 0, 0);
				path.BorderSizePixel = 0;
				path.Position = udim2_new(0, 35, 0, 50);
				path.Size = udim2_new(1, -70, 0, 8);

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						path.BackgroundColor3 = colors[4];
					end;

					return old(position, color);
				end;

				round(path, 1);

				positive_progress.Parent = path;
				positive_progress.Position = udim2_new((math_abs(args.min) / (math_abs(args.min) + args.max)), 0, 0, 0);
				positive_progress.BackgroundColor3 = color3_fromrgb(81, 82, 192);
				positive_progress.BorderColor3 = color3_fromrgb(0, 0, 0);
				positive_progress.BorderSizePixel = 0;

				round(positive_progress, 1);

				positive_circle.Parent = positive_progress;
				positive_circle.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				positive_circle.BorderColor3 = color3_fromrgb(0, 0, 0);
				positive_circle.BorderSizePixel = 0;
				positive_circle.Position = udim2_new(1, -6, 0, -2);
				positive_circle.Size = udim2_new(0, 12, 0, 12);

				round(positive_circle, 1);

				negative_progress.Parent = path;
				negative_progress.Position = udim2_new((math_abs(args.min) / (math_abs(args.min) + args.max)), 0, 0, 0);
				negative_progress.BackgroundColor3 = color3_fromrgb(81, 82, 192);
				negative_progress.BorderColor3 = color3_fromrgb(0, 0, 0);
				negative_progress.BorderSizePixel = 0;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						positive_progress.BackgroundColor3 = colors[1];
						negative_progress.BackgroundColor3 = colors[1];
					end;

					return old(position, color);
				end;

				round(negative_progress, 1);

				negative_circle.Parent = negative_progress;
				negative_circle.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				negative_circle.BorderColor3 = color3_fromrgb(0, 0, 0);
				negative_circle.BorderSizePixel = 0;
				negative_circle.Position = udim2_new(0, -6, 0, -2);
				negative_circle.Size = udim2_new(0, 12, 0, 12);

				round(negative_circle, 1);

				local function update_negative()
					if (not is_window_visible) then return; end
					if (positive_progress.Size.X.Scale < 0) then
						positive_progress.Visible = false;

						negative_progress.Visible = true;
						negative_progress.Position = udim2_new(0, math_abs(path.AbsolutePosition.X - positive_progress.AbsolutePosition.X - positive_progress.AbsoluteSize.X), 0, 0);
						negative_progress.Size = udim2_new(0, math_abs(positive_progress.AbsoluteSize.X), 1, 0);
					else
						positive_progress.Visible = true;
						negative_progress.Visible = false;
					end;
				end;

				table_insert(connections, run.Heartbeat:Connect(update_negative));
				update_negative();

				minus.Parent = slider;
				minus.BackgroundColor3 = color3_fromrgb(23, 23, 30);
				minus.BorderColor3 = color3_fromrgb(0, 0, 0);
				minus.BorderSizePixel = 0;
				minus.Position = udim2_new(0, 10, 0, 46);
				minus.Size = udim2_new(0, 16, 0, 16);
				minus.AutoButtonColor = false;
				minus.Font = Enum.Font.SourceSansBold;
				minus.Text = '-';
				minus.TextColor3 = color3_fromrgb(255, 255, 255);
				minus.TextSize = 17.000;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						minus.BackgroundColor3 = colors[4];
					end;

					return old(position, color);
				end;

				round(minus, 0.3);

				table_insert(connections, minus.MouseButton1Click:Connect(function()
					update((flags[args.flag] or slider_value) - (1 / args.float)
					);

					tween:Create(minus, tweeninfo_new(0.05, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
					fwait(0.05);
					tween:Create(minus, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[4]}):Play();
				end));

				plus.Parent = slider;
				plus.BackgroundColor3 = color3_fromrgb(23, 23, 30);
				plus.BorderColor3 = color3_fromrgb(0, 0, 0);
				plus.BorderSizePixel = 0;
				plus.Position = udim2_new(1, -27, 0, 45);
				plus.Size = udim2_new(0, 16, 0, 16);
				plus.AutoButtonColor = false;
				plus.Font = Enum.Font.SourceSansBold;
				plus.Text = '+';
				plus.TextColor3 = color3_fromrgb(255, 255, 255);
				plus.TextSize = 17.000;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						plus.BackgroundColor3 = colors[4];
					end;

					return old(position, color);
				end;

				round(plus, 0.3);

				table_insert(connections, plus.MouseButton1Click:Connect(function()
					update((flags[args.flag] or slider_value) + (1 / args.float));

					tween:Create(plus, tweeninfo_new(0.05, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
					fwait(0.05);
					tween:Create(plus, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[4]}):Play();
				end));

				local functions = {};
				
				function functions:set_value(value)
					update(value);
				end;
				
				local old = set_config; set_config = function(config)
					if (args.flag) then
						fspawn(update, flags[args.flag]);
					end;

					return old(config);
				end;

				return functions, slider;
			end;

			function elements:dropdown(args)
				local dropdown_value = args.default;
				if (args.flag) then
					flags[args.flag] = args.default;
				end;

				local function get_selected()
					local result = '';

					if (not args.multi and (not args.giant or typeof(flags[args.flag] or dropdown_value) ~= 'table')) then
						result = (flags[args.flag] or dropdown_value);
					else
						local total = 0;
						for _, option in (flags[args.flag] or dropdown_value) do
							total += 1;
							result = (result .. (result ~= '' and ', ' or '') .. option);
						end;

						if (args.text == 'Silent Hooks' and total > 0 or total >= 5) then
							result = total .. ' Selected';
						elseif (result == '') then
							result = 'Select';
						end;
					end;

					return result;
				end;

				local dropdown = draw('TextButton');
				local text = draw('TextLabel');
				local selected_bg = draw('Frame');
				local open = draw('ImageButton');
				local selected = draw('TextLabel');
				local holder = draw(args.giant and 'ScrollingFrame' or 'Frame');
				local holder_layout = draw('UIListLayout');							
				local search = draw('TextBox');

				dropdown.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				dropdown.BackgroundTransparency = 1.000;
				dropdown.BorderColor3 = color3_fromrgb(0, 0, 0);
				dropdown.BorderSizePixel = 0;
				dropdown.Size = udim2_new(1, 0, 0, 35);
				dropdown.AutoButtonColor = false;
				dropdown.Font = Enum.Font.SourceSans;
				dropdown.Text = '';
				dropdown.TextColor3 = color3_fromrgb(0, 0, 0);
				dropdown.TextSize = 14.000;

				local letters = {
					'a';'b';'c';'d';'e';'f';'g';'h';'i';'j';'k';'l';'m';'n';'o';'p';'q';'r';'s';'t';'u';'v';'w';'x';'y';'z';'1';'2';'3';'4';'5';'6';'7';'8';'9';'0';
					'0';'1';'2';'3';'4';'5';'6';'7';'8';'9';
				};

				local opened = false;
				local function on_open()
					opened = not opened;

					if (opened) then
						open.Rotation = 180;

						holder.BackgroundTransparency = 1;
						local tween_list = {BackgroundTransparency = 0};
						if (args.giant) then
							tween_list.ScrollBarImageTransparency = 0;
						end;
						tween:Create(holder, tweeninfo_new(0.55, Enum.EasingStyle.Circular), tween_list):Play();

						for _, letter in letters do
							if (letter ~= 'a' and not args.giant) then continue; end;

							for _, option in args.options do
								if (args.giant and string_sub(string_lower(option), 1, 1) ~= letter) then continue; end;

								local is_option_selected = (((not args.multi and (not args.giant or typeof(flags[args.flag] or dropdown_value) ~= 'table')) and option == (flags[args.flag] or dropdown_value)) or ((args.multi or (args.giant and typeof(flags[args.flag] or dropdown_value) == 'table')) and table_find(flags[args.flag] or dropdown_value, option)));

								local hitbox = draw('TextButton');
								local text = draw('TextLabel');
								local dot = draw('Frame');

								hitbox.Parent = holder;
								hitbox.BackgroundColor3 = color3_fromrgb(255, 255, 255);
								hitbox.BackgroundTransparency = 1.000;
								hitbox.BorderColor3 = color3_fromrgb(0, 0, 0);
								hitbox.BorderSizePixel = 0;
								hitbox.Size = udim2_new(1, 0, 0, 25);
								hitbox.AutoButtonColor = false;
								hitbox.Font = Enum.Font.SourceSans;
								hitbox.Text = '';
								hitbox.TextColor3 = color3_fromrgb(0, 0, 0);
								hitbox.TextSize = 14.000;

								if (args.giant) then
									local lowered = string_lower(option);
									local hook; hook = run.Heartbeat:Connect(function()
										if (not is_window_visible) then return; end;
										if (hitbox and hitbox.Parent) then
											local text = search.Text;
											if (text == '' or string_find(lowered, string_lower(text))) then
												hitbox.Visible = true;
											else
												hitbox.Visible = false;
											end;
										else
											hook:Disconnect();
										end;
									end);
								end;

								text.Parent = hitbox;
								text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
								text.BackgroundTransparency = 1.000;
								text.BorderColor3 = color3_fromrgb(0, 0, 0);
								text.BorderSizePixel = 0;
								text.Position = udim2_new(0, 10, 0, 0);
								text.Size = udim2_new(1, -10, 1, 0);
								text.Font = Enum.Font.SourceSansBold;
								text.Text = option;
								text.TextColor3 = (is_option_selected and color3_fromrgb(233, 233, 233) or color3_fromrgb(78, 77, 84));
								text.TextSize = 15.000;
								text.TextXAlignment = Enum.TextXAlignment.Left;
								text.TextTransparency = 1;

								dot.Parent = hitbox;
								dot.BackgroundTransparency = 1;
								dot.BackgroundColor3 = color3_fromrgb(92, 87, 191);
								dot.BorderColor3 = color3_fromrgb(0, 0, 0);
								dot.BorderSizePixel = 0;
								dot.Position = udim2_new(1, -12, 0.360000014, 0);
								dot.Size = udim2_new(0, 6, 0, 6);

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										text.TextColor3 = (((args.multi or (args.giant and typeof(flags[args.flag] or dropdown_value) == 'table')) and table_find(flags[args.flag] or dropdown_value, option) or (flags[args.flag] or dropdown_value) == option) and color3_fromrgb(233, 233, 233) or colors[6]);
										dot.BackgroundColor3 = colors[1];
									end;

									return old(position, color);
								end;

								fdelay(0.05, function()
									tween:Create(text, tweeninfo_new(0.2, Enum.EasingStyle.Circular), {TextTransparency = 0}):Play();
									tween:Create(dot, tweeninfo_new(0.2, Enum.EasingStyle.Circular), {BackgroundTransparency = (is_option_selected and 0 or 1)}):Play();
								end);

								round(dot, 1);

								table_insert(connections, hitbox.MouseButton1Click:Connect(function()
									if (not args.multi and (not args.giant or typeof(flags[args.flag] or dropdown_value) ~= 'table')) then
										if (args.flag) then
											flags[args.flag] = option;
										else
											dropdown_value = option;
										end;
										selected.Text = get_selected();

										tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(233, 233, 233)}):Play()
										tween:Create(dot, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundTransparency = 0}):Play()

										for _, option in holder:GetChildren() do
											if (not option:IsA('TextButton') or (option == hitbox)) then continue; end;

											tween:Create(option.TextLabel, tweeninfo_new(0.2, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play()
											tween:Create(option.Frame, tweeninfo_new(0.2, Enum.EasingStyle.Circular), {BackgroundTransparency = 1}):Play()
										end;

										pcall(args.callback, option);
									else
										local found = table_find(flags[args.flag] or dropdown_value, option);
										if (not found) then
											table_insert(flags[args.flag] or dropdown_value, option);

											tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(233, 233, 233)}):Play()
											tween:Create(dot, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundTransparency = 0}):Play()
										else
											table_remove(flags[args.flag] or dropdown_value, found)

											tween:Create(text, tweeninfo_new(0.2, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play()
											tween:Create(dot, tweeninfo_new(0.2, Enum.EasingStyle.Circular), {BackgroundTransparency = 1}):Play()
										end;

										selected.Text = get_selected();
									end;
								end));

							end;
						end;

						tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(233, 233, 233)}):Play()
						holder.Visible = true;

						if (args.giant) then
							search.Visible = true;
							tween:Create(search, tweeninfo_new(0.55, Enum.EasingStyle.Circular), {BackgroundTransparency = 0; TextTransparency = 0}):Play();
						end;
					else
						open.Rotation = 0;

						tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();

						for _, instance in (function()
								local list = {holder, search};

								for _, instance in holder:GetDescendants() do
									table_insert(list, instance);
								end;

								return list;
							end)() do

							tween:Create(instance, tweeninfo_new(0.15, Enum.EasingStyle.Circular), (function()
								local list = {};

								if (instance:IsA('Frame') or instance:IsA('ImageLabel') or instance:IsA('ImageButton') or instance:IsA('TextLabel') or instance:IsA('TextButton') or instance:IsA('TextBox') or instance:IsA('ScrollingFrame')) then
									list.BackgroundTransparency = 1;
								end;

								if (instance:IsA('ScrollingFrame')) then
									list.ScrollBarImageTransparency = 1;
								end;

								if (instance:IsA('ImageLabel') or instance:IsA('ImageButton')) then
									list.ImageTransparency = 1;
								end;

								if (instance:IsA('TextLabel') or instance:IsA('TextButton') or instance:IsA('TextBox')) then
									list.TextTransparency = 1;
								end;

								if (instance:IsA('UIStroke')) then 
									list.Transparency = 1;
								end;

								return list;
							end)()):Play();

							fdelay(0.15, function()
								if (instance ~= holder and instance ~= search and instance ~= holder_layout and (instance:IsA('UICorner') and instance.Parent ~= holder or not instance:IsA('UICorner'))) then
									instance:Destroy();
								end;	
							end);
						end;

						fwait(0.15);
						holder.Visible = false;
						search.Visible = false;
					end;
				end;
				table_insert(connections, dropdown.MouseButton1Click:Connect(on_open));

				text.Parent = dropdown;
				text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				text.BackgroundTransparency = 1.000;
				text.BorderColor3 = color3_fromrgb(0, 0, 0);
				text.BorderSizePixel = 0;
				text.Position = udim2_new(0, 10, 0, 0);
				text.Size = udim2_new(1, -10, 1, 0);
				text.Font = Enum.Font.SourceSansBold;
				text.Text = translate(args.text);
				text.TextColor3 = color3_fromrgb(78, 77, 84);
				text.TextSize = 15.000;
				text.TextXAlignment = Enum.TextXAlignment.Left;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						text.TextColor3 = colors[6];
					end;

					return old(position, color);
				end;

				selected_bg.Parent = dropdown;
				selected_bg.BackgroundColor3 = color3_fromrgb(24, 24, 33);
				selected_bg.BorderColor3 = color3_fromrgb(0, 0, 0);
				selected_bg.BorderSizePixel = 0;
				selected_bg.Position = udim2_new(1, -78, 0.5, -11);
				selected_bg.Size = udim2_new(0, 0, 0, 22);

				round(selected_bg, 0, 5);

				open.Parent = selected_bg;
				open.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				open.BackgroundTransparency = 1.000;
				open.BorderColor3 = color3_fromrgb(0, 0, 0);
				open.BorderSizePixel = 0;
				open.Position = udim2_new(1, -17, 0.5, -7);
				open.Size = udim2_new(0, 15, 0, 15);
				open.Image = 'rbxassetid://18762643214';

				selected.Parent = selected_bg;
				selected.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				selected.BackgroundTransparency = 1.000;
				selected.BorderColor3 = color3_fromrgb(0, 0, 0);
				selected.BorderSizePixel = 0;
				selected.Position = udim2_new(0, 10, 0, 0);
				selected.Size = udim2_new(0.442542136, 0, 1, 0);
				selected.Font = Enum.Font.SourceSansBold;
				selected.Text = get_selected();
				selected.TextColor3 = color3_fromrgb(233, 233, 233);
				selected.TextSize = 15.000;
				selected.TextXAlignment = Enum.TextXAlignment.Left;

				holder.Parent = misc_holder;
				holder.Visible = false;
				holder.BorderSizePixel = 0;
				holder.BackgroundColor3 = color3_fromrgb(26, 26, 35);

				if (args.giant) then
					holder.ScrollingDirection = Enum.ScrollingDirection.Y;
					holder.AutomaticCanvasSize = Enum.AutomaticSize.Y;
					holder.ScrollBarImageColor3 = colors[1];
					holder.ScrollBarThickness = 5;
				end;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						holder.ScrollBarImageColor3 = colors[1];
					end;

					return old(position, color);
				end;

				holder_layout.Parent = holder;

				round(holder, 0, 5);

				search.Parent = misc_holder;
				search.Visible = false;
				search.BackgroundColor3 = color3_fromrgb(26, 26, 35);
				search.Font = Enum.Font.SourceSansBold;
				search.PlaceholderColor3 = color3_fromrgb(78, 77, 84);
				search.PlaceholderText = 'Search';
				search.TextColor3 = color3_fromrgb(233, 233, 233);
				search.TextSize = 15;
				search.Text = '';
				search.BackgroundTransparency = 1;
				search.TextTransparency = 1;

				round(search, 0, 5);

				table_insert(connections, run.Heartbeat:Connect(function()
					if (not is_window_visible) then return; end;

					tween:Create(selected_bg, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Size = udim2_new(0, selected.TextBounds.X + 30, 0, 22)}):Play();
					selected_bg.Position = udim2_new(1, -15 - selected_bg.Size.X.Offset, 0.5, -11);

					local x = (function()
						local biggest = 0;

						for _, option in holder:GetChildren() do
							if (option:IsA('TextButton')) then
								if (option.TextLabel.TextBounds.X > biggest) then
									biggest = option.TextLabel.TextBounds.X;
								end;
							end;
						end;

						biggest = (biggest + 35);
						return (biggest > selected_bg.AbsoluteSize.X and biggest or selected_bg.AbsoluteSize.X);
					end)();

					holder.Size = udim2_new(0, x, 0, args.giant and 200 or (#args.options * 25));
					holder.Position = udim2_new(0, (selected_bg.AbsolutePosition.X - misc_holder.AbsolutePosition.X) - (x - selected_bg.AbsoluteSize.X), 0, ((selected_bg.AbsolutePosition.Y - misc_holder.AbsolutePosition.Y) + 10 + selected_bg.AbsoluteSize.Y));

					search.Position = (holder.Position + udim2_fromoffset(-holder.Size.X, 210));
					search.Size = udim2_fromoffset(x, 25);
				end));

				local functions = {};

				function functions:set_options(options)
					args.options = options;
				end;
				
				function functions:set_selected(options)
					dropdown_value = options;
					selected.Text = dropdown_value;
				end;
				
				local old = set_config; set_config = function(config)
					if (args.flag) then
						selected.Text = get_selected();

						fspawn(pcall, args.callback, flags[args.flag]);
					end;

					return old(config);
				end;

				return functions, dropdown;
			end;

			function elements:colorpicker(args)
				if (args.flag) then
					flags[args.flag] = {
						color = {};
						alpha = {};
						anim_color = {{};{}};
						anim_alpha = {{};{}};
						current = {};
						gradient = {};
						rotation = {};
						animation = {};
						animation_speed = {};
					};
				end;

				local colorpicker = draw('TextButton');
				local text = draw('TextLabel');

				colorpicker.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				colorpicker.BackgroundTransparency = 1.000;
				colorpicker.BorderColor3 = color3_fromrgb(0, 0, 0);
				colorpicker.BorderSizePixel = 0;
				colorpicker.Size = udim2_new(1, 0, 0, 35);
				colorpicker.Text = '';

				text.Parent = colorpicker;
				text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				text.BackgroundTransparency = 1.000;
				text.BorderColor3 = color3_fromrgb(0, 0, 0);
				text.BorderSizePixel = 0;
				text.Position = udim2_new(0, 10, 0, 0);
				text.Size = udim2_new(1, -10, 1, 0);
				text.Font = Enum.Font.SourceSansBold;
				text.Text = translate(args.text);
				text.TextColor3 = color3_fromrgb(78, 77, 84);
				text.TextSize = 15.000;
				text.TextXAlignment = Enum.TextXAlignment.Left;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						text.TextColor3 = colors[6];
					end;

					return old(position, color);
				end;

				local old = set_language; set_language = function()
					text.Text = translate(args.text);

					return old();
				end;

				for i = 1, #args.colors do

					local button = draw('TextButton');
					local holder = draw('Frame');
					local color_page = draw('Frame');
					local animation_page = draw('Frame');
					local holder_outline = draw('UIStroke');

					button.Parent = colorpicker;
					button.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					button.BorderColor3 = color3_fromrgb(0, 0, 0);
					button.BorderSizePixel = 0;
					button.Position = udim2_new(1, (-9 - (38 * i)), 0.571, -9);
					button.Size = udim2_new(0, 29, 0, 13);
					button.AutoButtonColor = false;
					button.Font = Enum.Font.SourceSans;
					button.Text = '';
					button.TextColor3 = color3_fromrgb(0, 0, 0);
					button.TextSize = 14.000;
					
					local parent = args.parent;
					table_insert(connections, button.MouseButton1Click:Connect(function()
						holder.Visible = not holder.Visible;

						if (holder.Visible) then
							for _, instance in misc_holder:GetChildren() do
								if (instance:IsA('Frame') and instance ~= holder and (not parent or parent ~= instance)) then
									instance.Visible = false;
								end;
							end;
						end;
					end));
					
					holder.Parent = misc_holder;
					holder.Visible = false;
					holder.BackgroundColor3 = color3_fromrgb(20, 19, 26);
					holder.BorderColor3 = color3_fromrgb(0, 0, 0);
					holder.BorderSizePixel = 0;

					round(holder, nil, 5);
					
					table_insert(connections, run.Heartbeat:Connect(function()
						if (not is_window_visible) then return; end;
						if (parent and not parent.Visible) then
							holder.Visible = false;
						else
							holder.Position = udim2_new(0, (button.AbsolutePosition.X - misc_holder.AbsolutePosition.X), 0, ((button.AbsolutePosition.Y - misc_holder.AbsolutePosition.Y) + 10 + button.AbsoluteSize.Y));
						end;	
					end));

					holder_outline.Parent = holder;
					holder_outline.Color = color3_fromrgb(30, 30, 40)

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							holder_outline.Color = colors[2];
						end;

						return old(position, color);
					end;

					round(button, 0, 5);

					color_page.Parent = holder;
					color_page.Size = udim2_fromscale(1, 1);
					color_page.BackgroundTransparency = 1;

					animation_page.Parent = holder;
					animation_page.Visible = false;
					animation_page.Size = udim2_fromscale(1, 1);
					animation_page.BackgroundTransparency = 1;
					
					if (args.special) then
						local h,s,v = args.colors[i].color:ToHSV();
						local a = args.colors[i].alpha;
						
						local main_functions, colorpicker2 = elements:colorpicker_1({h = h; s = s; v = v; a = a; callback = function(color, alpha)
							local h,s,v = color:ToHSV();

							button.BackgroundColor3 = color;
							button.BackgroundTransparency = (alpha or 0);
							
							pcall(args.callback, color, alpha);
						end});
						colorpicker2.Parent = holder;
						colorpicker2.Position = udim2_fromoffset(10, 10);
						colorpicker2.Size = udim2_fromoffset(100, 100);
						
						holder.Position = udim2_new(0, 0, 1, 10);
						holder.Size = udim2_new(0, 151 - (a and 0 or 13), 0, 187);

						main_functions:update();
						
						return main_functions, colorpicker;
					else
						flags[args.flag].anim_color[i] = {};
						flags[args.flag].anim_alpha[i] = {};
						
						if (args.colors[i].gradient) then
							
							local rotation_allowed = (args.colors[i].rotation and not args.colors[i].rotation.disabled);
							local auto_rotation = (rotation_allowed and args.colors[i].rotation.auto);
							local rotate_speed = (rotation_allowed and (args.colors[i].rotation.speed or 1));
							local rotation = (rotation_allowed and (args.colors[i].rotation.value or 0));
							local gradient_enabled = (not args.colors[i].disable_gradient);
							
							flags[args.flag].color[i] = {};
							flags[args.flag].alpha[i] = {};
							
							flags[args.flag].animation[i] = {'None'; 'None'};
							flags[args.flag].animation_speed[i] = {100; 100};
							
							flags[args.flag].rotation[i] = {auto_rotation, rotation; rotate_speed};
							
							flags[args.flag].anim_color[i][1] = {};
							flags[args.flag].anim_color[i][2] = {};
							flags[args.flag].anim_alpha[i][1] = {};
							flags[args.flag].anim_alpha[i][2] = {};

							flags[args.flag].current[i] = 1;
							
							local current = 1;
							
							local animation_progress1 = 0;
							local animation_direction1 = 1;

							local h1,s1,v1 = args.colors[i].color[1]:ToHSV();
							local a1 = args.colors[i].alpha[1];
							
							local a1h1,a1s1,a1v1 = h1,s1,v1;
							local a1a1 = a1;

							local a2h1,a2s1,a2v1 = 0,0,0;
							local a2a1 = 0;
							
							local animation_progress2 = 0;
							local animation_direction2 = 1;
							
							local h2,s2,v2 = args.colors[i].color[2]:ToHSV();
							local a2 = args.colors[i].alpha[2];
							
							local a1h2,a1s2,a1v2 = h2,s2,v2;
							local a1a2 = a2;

							local a2h2,a2s2,a2v2 = 0,0,0;
							local a2a2 = 0;

							holder.Position = udim2_new(516, 0, 273.999969, 0);
							holder.Size = udim2_new(0, 151 - (a1 and 0 or 13), 0, 410);
							
							local gradient = draw('UIGradient');
							gradient.Parent = button;
							
							button.BackgroundColor3 = color3_fromrgb(255, 255, 255);
							
							local main_functions, colorpicker; main_functions, colorpicker = elements:colorpicker_1({h = h1; s = s1; v = v1; a = a1; callback = function()
								local h,s,v,a;
								if (current == 1) then
									h,s,v,a = main_functions:get_hsva();
									h1,s1,v1,a1 = h,s,v,a;
								else
									h,s,v,a = main_functions:get_hsva();
									h2,s2,v2,a2 = h,s,v,a;
								end;
								
								gradient.Enabled = gradient_enabled;
								if (gradient_enabled) then
									button.BackgroundColor3 = color3_fromrgb(255, 255, 255);
								else
									button.BackgroundColor3 = color3_fromhsv(h,s,v);
								end;
								
								gradient.Rotation = rotation;
								gradient.Color = colorsequence_new({colorsequencekeypoint_new(0, color3_fromhsv(h1,s1,v1)); colorsequencekeypoint_new(1, color3_fromhsv(h2,s2,v2))});
								gradient.Transparency = numbersequence_new({numbersequencekeypoint_new(0, a1); numbersequencekeypoint_new(1, a2)});
								
								flags[args.flag].color[i][current] = {h,s,v};
								flags[args.flag].alpha[i][current] = a;
								
								flags[args.flag].gradient[i] = gradient_enabled;
								flags[args.flag].rotation[i][1] = auto_rotation;
								flags[args.flag].rotation[i][2] = rotation;
								flags[args.flag].rotation[i][3] = rotate_speed;
							end});
							colorpicker.Parent = color_page;
							colorpicker.Position = udim2_new(0, 10, 0, 40);
							colorpicker.Size = udim2_new(0, 100, 0, 100);
							
							local functions, toggle = elements:toggle({text = 'Gradient'; default = gradient_enabled; callback = function(bool)
								gradient_enabled = bool;
								flags[args.flag].gradient[i] = bool;
								main_functions:update();
							end});
							toggle.Parent = color_page;
							toggle.Position = udim2_new(0, 0, 0, 210);
							
							local speed_functions, slider = elements:slider({text = 'Rotation'; min = 0; max = 360; float = 1; default = rotation; suffix = ''; callback = function(value)
								rotation = value;
								flags[args.flag].rotation[i][2] = value;
								main_functions:update();
							end});
							slider.Parent = color_page;
							slider.Position = udim2_new(0, 0, 0, 240);
							slider.Size = udim2_new(1, 0, 0, 75);
							
							local functions, toggle = elements:toggle({text = 'Auto Rotate'; default = auto_rotation; callback = function(bool)
								auto_rotation = bool;
								flags[args.flag].rotation[i][1] = bool;
								main_functions:update();
							end});
							toggle.Parent = color_page;
							toggle.Position = udim2_new(0, 0, 0, 305);
							
							local speed_functions, slider = elements:slider({text = 'Rotate Speed'; min = 0; max = 5; float = 1000; default = rotate_speed; suffix = ''; callback = function(value)
								rotate_speed = value;
								flags[args.flag].rotation[i][3] = value;
								main_functions:update();
							end});
							slider.Parent = color_page;
							slider.Position = udim2_new(0, 0, 0, 335);
							slider.Size = udim2_new(1, 0, 0, 75);
							
							do
								local button = draw('TextButton');
								local bg = draw('Frame');
								local text = draw('TextLabel');
								local button_2 = draw('TextButton');
								local bg_2 = draw('Frame');
								local text_2 = draw('TextLabel');

								button.Parent = holder;
								button.BackgroundTransparency = 1.000;
								button.BorderColor3 = color3_fromrgb(0, 0, 0);
								button.BorderSizePixel = 0;
								button.Position = udim2_new(0, 0, 0, 2);
								button.Size = udim2_new(0.52, 0, 0, 30);
								button.AutoButtonColor = false;
								button.Font = Enum.Font.SourceSans;
								button.Text = '';
								button.TextColor3 = color3_fromrgb(0, 0, 0);
								button.TextSize = 14.000;

								table_insert(connections, button.MouseButton1Click:Connect(function()
									color_page.Visible = true;
									animation_page.Visible = false;

									holder.Size = udim2_new(0, 151 - ((current == 1 and a1 or a2) and 0 or 13), 0, 410);

									tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(255, 255, 255)}):Play();
									tween:Create(bg, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();

									tween:Create(text_2, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
									tween:Create(bg_2, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(30, 30, 40)}):Play();
								end));

								bg.Parent = button;
								bg.BackgroundColor3 = colors[1];
								bg.BorderColor3 = color3_fromrgb(0, 0, 0);
								bg.BorderSizePixel = 0;
								bg.Position = udim2_new(0, 5, 0, 3);
								bg.Size = udim2_new(1, -10, 1, -6);

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										bg.BackgroundColor3 = colors[2];
									end;

									return old(position, color);
								end;

								round(bg, 0, 5);

								text.Parent = button;
								text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
								text.BackgroundTransparency = 1.000;
								text.BorderColor3 = color3_fromrgb(0, 0, 0);
								text.BorderSizePixel = 0;
								text.Position = udim2_new(0, 10, 0, 5);
								text.Size = udim2_new(1, -20, 1, -10);
								text.Font = Enum.Font.SourceSansBold;
								text.Text = 'Color';
								text.TextColor3 = color3_fromrgb(255, 255, 255);
								text.TextSize = 15.000;

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										text.TextColor3 = colors[6];
									end;

									return old(position, color);
								end;

								local old = set_language; set_language = function()
									text.Text = translate('Color');

									return old();
								end;

								button_2.Parent = holder;
								button_2.BackgroundTransparency = 1.000;
								button_2.BorderColor3 = color3_fromrgb(0, 0, 0);
								button_2.BorderSizePixel = 0;
								button_2.Position = udim2_new(0.48, 0, 0, 2);
								button_2.Size = udim2_new(0.52, 0, 0, 30);
								button_2.AutoButtonColor = false;
								button_2.Font = Enum.Font.SourceSans;
								button_2.Text = '';
								button_2.TextColor3 = color3_fromrgb(0, 0, 0);
								button_2.TextSize = 14.000;

								table_insert(connections, button_2.MouseButton1Click:Connect(function()
									color_page.Visible = false;
									animation_page.Visible = true;
									
									holder.Size = udim2_new(0, 151 - ((current == 1 and a1 or a2) and 0 or 13), 0, 200);

									tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
									tween:Create(bg, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(30, 30, 40)}):Play();

									tween:Create(text_2, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(255, 255, 255)}):Play();
									tween:Create(bg_2, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
								end));

								bg_2.Parent = button_2;
								bg_2.BackgroundColor3 = color3_fromrgb(30, 30, 40);
								bg_2.BorderColor3 = color3_fromrgb(0, 0, 0);
								bg_2.BorderSizePixel = 0;
								bg_2.Position = udim2_new(0, 5, 0, 3);
								bg_2.Size = udim2_new(1, -10, 1, -6);

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										bg_2.BackgroundColor3 = colors[2];
									end;

									return old(position, color);
								end;

								round(bg_2, 0, 5);

								text_2.Parent = button_2;
								text_2.BackgroundColor3 = color3_fromrgb(255, 255, 255);
								text_2.BackgroundTransparency = 1.000;
								text_2.BorderColor3 = color3_fromrgb(0, 0, 0);
								text_2.BorderSizePixel = 0;
								text_2.Position = udim2_new(0, 10, 0, 5);
								text_2.Size = udim2_new(1, -20, 1, -10);
								text_2.Font = Enum.Font.SourceSansBold;
								text_2.Text = 'Animation';
								text_2.TextColor3 = color3_fromrgb(78, 77, 84);
								text_2.TextSize = 15.000;

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										text_2.TextColor3 = colors[6];
									end;

									return old(position, color);
								end;

								local old = set_language; set_language = function()
									text_2.Text = translate('Animation');

									return old();
								end;
							end;

							local animation_functions, dropdown = elements:dropdown({text = 'Animation'; default = 'None'; options = {'None'; 'Rainbow'; 'Fade'; 'Flash'}; callback = function(value)
								flags[args.flag].animation[i][current] = value;
							end});
							dropdown.Parent = animation_page;
							dropdown.Position = udim2_new(0, 0, 0, 35);
							dropdown.Size = udim2_new(1, 0, 0, 35);

							local speed_functions, slider = elements:slider({text = 'Speed'; min = 0; max = 150; float = 1; default = 1; suffix = ''; callback = function(value)
								flags[args.flag].animation_speed[i][current] = value;
							end});
							slider.Parent = animation_page;
							slider.Position = udim2_new(0, 0, 0, 65);
							slider.Size = udim2_new(1, 0, 0, 75);
							
							loop(0.05, function()
								if (auto_rotation) then
									local new = (rotation + rotate_speed);
									if (new > 360) then
										new = 0;
									end;
									
									rotation = new;
									main_functions:update();
								end;
							end);

							local fir_functions, colorpicker; fir_functions, colorpicker = elements:colorpicker({text = 'Color 1'; special = true; colors = {{color = color3_fromhsv(a1h1,a1s1,a1v1); alpha = a1a1}}; parent = holder; callback = function(color, alpha)
								local h,s,v,a;
								if (current == 1) then
									h,s,v,a = fir_functions:get_hsva();
									a1h1,a1s1,a1v1,a1a1 = h,s,v,a;
								else
									h,s,v,a = fir_functions:get_hsva();
									a2h1,a2s1,a2v1,a2a1 = h,s,v,a;
								end;
								
								flags[args.flag].anim_color[i][current][1] = {h,s,v};
								flags[args.flag].anim_alpha[i][current][1] = a;
							end});
							colorpicker.Parent = animation_page;
							colorpicker.Position = udim2_new(0, 5, 0, 130);

							local sec_functions, colorpicker; sec_functions, colorpicker = elements:colorpicker({text = 'Color 2'; special = true; colors = {{color = color3_fromhsv(a2h1,a2s1,a2v1); alpha = a2a1}}; parent = holder; callback = function(color, alpha)
								local h,s,v,a;
								if (current == 1) then
									h,s,v,a = sec_functions:get_hsva();
									a1h2,a1s2,a1v2,a1a2 = h,s,v,a;
								else
									h,s,v,a = sec_functions:get_hsva();
									a2h2,a2s2,a2v2,a2a2 = h,s,v,a;
								end;

								flags[args.flag].anim_color[i][current][2] = {h,s,v};
								flags[args.flag].anim_alpha[i][current][2] = a;
							end});
							colorpicker.Parent = animation_page;
							colorpicker.Position = udim2_new(0, 5, 0, 160);

							loop(function()
								local result = (1 / flags[args.flag].animation_speed[i][1]);
								if (result > 4) then
									result = 4;
								end;

								return (result);
							end, function()
								local animation = flags[args.flag].animation[i][1];

								if (animation == 'Rainbow') then
									local h = (h1 + 0.005);
									if (h > 1) then
										h = 0;
									end;

									h1 = h;
								elseif (animation == 'Fade') then
									if (animation_direction1 == 1) then
										animation_progress1 += 0.005;

										if (animation_progress1 > 1) then
											animation_progress1 = 1;
											animation_direction1 = 0;
										end;
									else
										animation_progress1 -= 0.005;

										if (animation_progress1 < 0) then
											animation_progress1 = 0;
											animation_direction1 = 1;
										end;
									end;

									local color1 = color3_fromhsv(a1h1, a1s1, a1v1);
									local color2 = color3_fromhsv(a1h2, a1s2, a1v2);
									local h,s,v = color1:Lerp(color2, animation_progress1):ToHSV();

									h1,s1,v1,a1 = h,s,v, a1a2 + (a1a2 - a1a2) * animation_progress1;
								elseif (animation == 'Flash') then
									local h,s,v,a;
									if (animation_progress1 < 0.5) then
										animation_progress1 = 1;
										h,s,v,a = a1h1, a1s1, a1v1, a1a1;
									else
										animation_progress1 = 0;
										h,s,v,a = a1h2, a1s2, a1v2, a1a2;
									end;

									h1,s1,v1,a1 = h,s,v,a;
								end;

								if (animation ~= 'None') then
									flags[args.flag].color[i][1] = {h1,s1,v1};
									flags[args.flag].alpha[i][1] = a1;
									
									if (current == 1) then
										main_functions:set_hsva(h1,s1,v1,a1);
									end;
									main_functions:update();
								end;
							end);
							
							loop(function()
								local result = (1 / flags[args.flag].animation_speed[i][2]);
								if (result > 4) then
									result = 4;
								end;

								return (result);
							end, function()
								local animation = flags[args.flag].animation[i][2];

								if (animation == 'Rainbow') then
									local h = (h2 + 0.005);
									if (h > 1) then
										h = 0;
									end;

									h2 = h;
								elseif (animation == 'Fade') then
									if (animation_direction2 == 1) then
										animation_progress2 += 0.005;

										if (animation_progress2 > 1) then
											animation_progress2 = 1;
											animation_direction2 = 0;
										end;
									else
										animation_progress2 -= 0.005;

										if (animation_progress2 < 0) then
											animation_progress2 = 0;
											animation_direction2 = 1;
										end;
									end;

									local color1 = color3_fromhsv(a2h1, a2s1, a2v1);
									local color2 = color3_fromhsv(a2h2, a2s2, a2v2);
									local h,s,v = color1:Lerp(color2, animation_progress2):ToHSV();

									h2,s2,v2,a2 = h,s,v, a2a2 + (a2a2 - a2a2) * animation_progress2;
								elseif (animation == 'Flash') then
									local h,s,v,a;
									if (animation_progress2 < 0.5) then
										animation_progress2 = 1;
										h,s,v,a = a2h1, a2s1, a2v1, a2a1;
									else
										animation_progress2 = 0;
										h,s,v,a = a2h2, a2s2, a2v2, a2a2;
									end;

									h2,s2,v2,a2 = h,s,v,a;
								end;

								if (animation ~= 'None') then
									flags[args.flag].color[i][2] = {h2,s2,v2};
									flags[args.flag].alpha[i][2] = a2;

									if (current == 2) then
										main_functions:set_hsva(h2,s2,v2,a2);
									end;
									main_functions:update();
								end;
							end);
							
							do
								local side_selecter_1 = draw('TextButton');
								local side_selecter_2 = draw('TextButton');

								side_selecter_1.Parent = holder;
								side_selecter_1.BackgroundColor3 = color3_fromrgb(92, 87, 191);
								side_selecter_1.BorderColor3 = color3_fromrgb(0, 0, 0);
								side_selecter_1.BorderSizePixel = 0;
								side_selecter_1.Position = udim2_new(1, 5, 0, 0);
								side_selecter_1.Size = udim2_new(0, 16, 0, 16);
								side_selecter_1.AutoButtonColor = false;
								side_selecter_1.Font = Enum.Font.SourceSansBold;
								side_selecter_1.Text = '1';
								side_selecter_1.TextColor3 = color3_fromrgb(255, 255, 255);
								side_selecter_1.TextSize = 17.000;

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										side_selecter_1.BackgroundColor3 = (current == 1 and colors[1] or colors[4]);
									end;

									return old(position, color);
								end;

								round(side_selecter_1, 0, 5);

								table_insert(connections, side_selecter_1.MouseButton1Click:Connect(function()
									current = 1;
									flags[args.flag].current[i] = current;

									main_functions:set_hsva(h1,s1,v1,a1);
									main_functions:update();
									
									fir_functions:set_hsva(a1h1,a1s1,a1v1,a1a1);
									fir_functions:update();

									sec_functions:set_hsva(a1h2,a1s2,a1v2,a1a2);
									sec_functions:update();
									
									animation_functions:set_selected(flags[args.flag].animation[i][1]);
									speed_functions:set_value(flags[args.flag].animation_speed[i][1]);

									tween:Create(side_selecter_1, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
									tween:Create(side_selecter_2, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[4]}):Play();
								end));

								side_selecter_2.Parent = holder;
								side_selecter_2.BackgroundColor3 = color3_fromrgb(23, 23, 30);
								side_selecter_2.BorderColor3 = color3_fromrgb(0, 0, 0);
								side_selecter_2.BorderSizePixel = 0;
								side_selecter_2.Position = udim2_new(1, 5, 0, 20);
								side_selecter_2.Size = udim2_new(0, 16, 0, 16);
								side_selecter_2.AutoButtonColor = false;
								side_selecter_2.Font = Enum.Font.SourceSansBold;
								side_selecter_2.Text = '2';
								side_selecter_2.TextColor3 = color3_fromrgb(255, 255, 255);
								side_selecter_2.TextSize = 17.000;

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										side_selecter_2.BackgroundColor3 = (current == 2 and colors[1] or colors[4]);
									end;

									return old(position, color);
								end;

								round(side_selecter_2, 0, 5);

								table_insert(connections, side_selecter_2.MouseButton1Click:Connect(function()
									current = 2;
									flags[args.flag].current[i] = current;

									main_functions:set_hsva(h2,s2,v2,a2);
									main_functions:update();
									
									fir_functions:set_hsva(a2h1,a2s1,a2v1,a2a1);
									fir_functions:update();
									
									sec_functions:set_hsva(a2h2,a2s2,a2v2,a2a2);
									sec_functions:update();
									
									animation_functions:set_selected(flags[args.flag].animation[i][2]);
									speed_functions:set_value(flags[args.flag].animation_speed[i][2]);

									tween:Create(side_selecter_2, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
									tween:Create(side_selecter_1, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[4]}):Play();
								end));
							end;
							
							local old = set_config; set_config = function(config)
								fspawn(function()
									if (args.flag) then
										h1,s1,v1 = unpack(flags[args.flag].color[i][1]);
										a1 = flags[args.flag].alpha[i][1];
										
										h2,s2,v2 = unpack(flags[args.flag].color[i][2]);
										a2 = flags[args.flag].alpha[i][2];

										a1h1,a1s1,a1v1 = unpack(flags[args.flag].anim_color[i][1][1]);
										a1a1 = flags[args.flag].anim_alpha[i][1][1];

										a2h1,a2s1,a2v1 = unpack(flags[args.flag].anim_color[i][2][1]);
										a2a1 = flags[args.flag].anim_alpha[i][1][2];
										
										a1h2,a1s2,a1v2 = unpack(flags[args.flag].anim_color[i][1][2]);
										a1a2 = flags[args.flag].anim_alpha[i][2][1];

										a2h2,a2s2,a2v2 = unpack(flags[args.flag].anim_color[i][2][2]);
										a2a2 = flags[args.flag].anim_alpha[i][2][2];
										
										auto_rotation = flags[args.flag].rotation[i][1];
										rotation = flags[args.flag].rotation[i][2];
										rotate_speed = flags[args.flag].rotation[i][3];
										gradient_enabled = flags[args.flag].gradient[i];
										
										current = flags[args.flag].current[i];
										if (current == 1) then
											main_functions:set_hsva(h1,s1,v1,a1);

											fir_functions:set_hsva(a1h1,a1s1,a1v1,a1a1);
											fir_functions:update();

											sec_functions:set_hsva(a1h2,a1s2,a1v2,a1a2);
											sec_functions:update();
											
											animation_functions:set_selected(flags[args.flag].animation[i][1]);
											speed_functions:set_value(flags[args.flag].animation_speed[i][1]);
										else
											main_functions:set_hsva(h2,s2,v2,a2);

											fir_functions:set_hsva(a2h1,a2s1,a2v1,a2a1);
											fir_functions:update();

											sec_functions:set_hsva(a2h2,a2s2,a2v2,a2a2);
											sec_functions:update();
											
											animation_functions:set_selected(flags[args.flag].animation[i][2]);
											speed_functions:set_value(flags[args.flag].animation_speed[i][2]);
										end;

										main_functions:update();
									end;
								end);

								return old(config);
							end;
							
							current = 2;
							main_functions:set_hsva(h2,s2,v2,a2);
							main_functions:update();
							fir_functions:update();
							sec_functions:update();
							current = 1;
							main_functions:set_hsva(h1,s1,v1,a1);
							main_functions:update();
							fir_functions:update();
							sec_functions:update();
						else
							
							local animation_progress = 0;
							local animation_direction = 1;

							local h,s,v = args.colors[i].color:ToHSV();
							local a = args.colors[i].alpha;
							
							local anim_colors = args.colors[i].anim_color;
							local anim_alphas = args.colors[i].anim_alphas;
							
							local a1h,a1s,a1v = 0,0,0;
							local a1a = 0;

							local a2h,a2s,a2v = 0,0,0;
							local a2a = 0;

							holder.Position = udim2_new(516, 0, 273.999969, 0);
							holder.Size = udim2_new(0, 151 - (a and 0 or 13), 0, 217);

							local main_functions, colorpicker = elements:colorpicker_1({h = h; s = s; v = v; a = a; callback = function(color, alpha)
								local h,s,v = color:ToHSV();

								button.BackgroundColor3 = color;
								button.BackgroundTransparency = (alpha or 0);

								flags[args.flag].color[i] = {h,s,v};
								flags[args.flag].alpha[i] = alpha;
							end});
							colorpicker.Parent = color_page;
							colorpicker.Position = udim2_new(0, 10, 0, 40);
							colorpicker.Size = udim2_new(0, 100, 0, 100);

							main_functions:update();

							do
								local button = draw('TextButton');
								local bg = draw('Frame');
								local text = draw('TextLabel');
								local button_2 = draw('TextButton');
								local bg_2 = draw('Frame');
								local text_2 = draw('TextLabel');

								button.Parent = holder;
								button.BackgroundTransparency = 1.000;
								button.BorderColor3 = color3_fromrgb(0, 0, 0);
								button.BorderSizePixel = 0;
								button.Position = udim2_new(0, 0, 0, 2);
								button.Size = udim2_new(0.52, 0, 0, 30);
								button.AutoButtonColor = false;
								button.Font = Enum.Font.SourceSans;
								button.Text = '';
								button.TextColor3 = color3_fromrgb(0, 0, 0);
								button.TextSize = 14.000;

								table_insert(connections, button.MouseButton1Click:Connect(function()
									color_page.Visible = true;
									animation_page.Visible = false;

									holder.Size = udim2_new(0, 151 - (a and 0 or 13), 0, 217);

									tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(255, 255, 255)}):Play();
									tween:Create(bg, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();

									tween:Create(text_2, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
									tween:Create(bg_2, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(30, 30, 40)}):Play();
								end));

								bg.Parent = button;
								bg.BackgroundColor3 = colors[1];
								bg.BorderColor3 = color3_fromrgb(0, 0, 0);
								bg.BorderSizePixel = 0;
								bg.Position = udim2_new(0, 5, 0, 3);
								bg.Size = udim2_new(1, -10, 1, -6);

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										bg.BackgroundColor3 = colors[2];
									end;

									return old(position, color);
								end;

								round(bg, 0, 5);

								text.Parent = button;
								text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
								text.BackgroundTransparency = 1.000;
								text.BorderColor3 = color3_fromrgb(0, 0, 0);
								text.BorderSizePixel = 0;
								text.Position = udim2_new(0, 10, 0, 5);
								text.Size = udim2_new(1, -20, 1, -10);
								text.Font = Enum.Font.SourceSansBold;
								text.Text = 'Color';
								text.TextColor3 = color3_fromrgb(255, 255, 255);
								text.TextSize = 15.000;

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										text.TextColor3 = colors[6];
									end;

									return old(position, color);
								end;

								local old = set_language; set_language = function()
									text.Text = translate('Color');

									return old();
								end;

								button_2.Parent = holder;
								button_2.BackgroundTransparency = 1.000;
								button_2.BorderColor3 = color3_fromrgb(0, 0, 0);
								button_2.BorderSizePixel = 0;
								button_2.Position = udim2_new(0.48, 0, 0, 2);
								button_2.Size = udim2_new(0.52, 0, 0, 30);
								button_2.AutoButtonColor = false;
								button_2.Font = Enum.Font.SourceSans;
								button_2.Text = '';
								button_2.TextColor3 = color3_fromrgb(0, 0, 0);
								button_2.TextSize = 14.000;

								table_insert(connections, button_2.MouseButton1Click:Connect(function()
									color_page.Visible = false;
									animation_page.Visible = true;

									holder.Size = udim2_new(0, 151 - (a and 0 or 13), 0, 200);

									tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
									tween:Create(bg, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(30, 30, 40)}):Play();

									tween:Create(text_2, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(255, 255, 255)}):Play();
									tween:Create(bg_2, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
								end));

								bg_2.Parent = button_2;
								bg_2.BackgroundColor3 = color3_fromrgb(30, 30, 40);
								bg_2.BorderColor3 = color3_fromrgb(0, 0, 0);
								bg_2.BorderSizePixel = 0;
								bg_2.Position = udim2_new(0, 5, 0, 3);
								bg_2.Size = udim2_new(1, -10, 1, -6);

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										bg_2.BackgroundColor3 = colors[2];
									end;

									return old(position, color);
								end;

								round(bg_2, 0, 5);

								text_2.Parent = button_2;
								text_2.BackgroundColor3 = color3_fromrgb(255, 255, 255);
								text_2.BackgroundTransparency = 1.000;
								text_2.BorderColor3 = color3_fromrgb(0, 0, 0);
								text_2.BorderSizePixel = 0;
								text_2.Position = udim2_new(0, 10, 0, 5);
								text_2.Size = udim2_new(1, -20, 1, -10);
								text_2.Font = Enum.Font.SourceSansBold;
								text_2.Text = 'Animation';
								text_2.TextColor3 = color3_fromrgb(78, 77, 84);
								text_2.TextSize = 15.000;

								local old = update_color; update_color = function(position, color)
									if (is_window_visible) then
										text_2.TextColor3 = colors[6];
									end;

									return old(position, color);
								end;

								local old = set_language; set_language = function()
									text_2.Text = translate('Animation');

									return old();
								end;
							end;

							local functions, dropdown = elements:dropdown({text = 'Animation'; default = 'None'; options = {'None'; 'Rainbow'; 'Fade'; 'Flash'}; callback = function(value)
								flags[args.flag].animation[i] = value;
							end});
							dropdown.Parent = animation_page;
							dropdown.Position = udim2_new(0, 0, 0, 35);
							dropdown.Size = udim2_new(1, 0, 0, 35);

							local functions, slider = elements:slider({text = 'Speed'; min = 0; max = 150; float = 1; default = 1; suffix = ''; callback = function(value)
								flags[args.flag].animation_speed[i] = value;
							end});
							slider.Parent = animation_page;
							slider.Position = udim2_new(0, 0, 0, 65);
							slider.Size = udim2_new(1, 0, 0, 75);

							local fir_functions, colorpicker; fir_functions, colorpicker = elements:colorpicker({text = 'Color 1'; special = true; colors = {{color = color3_fromhsv(a1h,a1s,a1v); alpha = a1a}}; parent = holder; callback = function(color, alpha)
								a1h,a1s,a1v,a1a = fir_functions:get_hsva();
								flags[args.flag].anim_color[i][1] = {a1h,a1s,a1v};
								flags[args.flag].anim_alpha[i][1] = a1a;
							end});
							colorpicker.Parent = animation_page;
							colorpicker.Position = udim2_new(0, 5, 0, 130);

							fir_functions:update();
							
							local sec_functions, colorpicker; sec_functions, colorpicker = elements:colorpicker({text = 'Color 2'; special = true; colors = {{color = color3_fromhsv(a2h,a2s,a2v); alpha = a2a}}; parent = holder; callback = function(color, alpha)
								a2h,a2s,a2v,a2a = sec_functions:get_hsva();
								flags[args.flag].anim_color[i][2] = {a2h,a2s,a2v};
								flags[args.flag].anim_alpha[i][2] = a2a;
							end});
							colorpicker.Parent = animation_page;
							colorpicker.Position = udim2_new(0, 5, 0, 160);

							sec_functions:update();

							loop(function()
								local result = (1 / flags[args.flag].animation_speed[i]);
								if (result > 4) then
									result = 4;
								end;
								
								return (result);
							end, function()
								local animation = flags[args.flag].animation[i];

								if (animation == 'Rainbow') then
									local h = (main_functions:get_h() + 0.005);
									if (h > 1) then
										h = 0;
									end;
									
									main_functions:set_h(h);
									main_functions:update();
								elseif (animation == 'Fade') then
									if (animation_direction == 1) then
										animation_progress += 0.005;

										if (animation_progress > 1) then
											animation_progress = 1;
											animation_direction = 0;
										end;
									else
										animation_progress -= 0.005;

										if (animation_progress < 0) then
											animation_progress = 0;
											animation_direction = 1;
										end;
									end;
									
									local color1 = color3_fromhsv(a1h, a1s, a1v);
									local color2 = color3_fromhsv(a2h, a2s, a2v);
									local h,s,v = color1:Lerp(color2, animation_progress):ToHSV();
									
									main_functions:set_hsva(h,s,v, a1a + (a2a - a1a) * animation_progress);
									main_functions:update();
								elseif (animation == 'Flash') then
									local h,s,v,a;
									if (animation_progress < 0.5) then
										animation_progress = 1;
										h,s,v,a = a1h, a1s, a1v, a1a;
									else
										animation_progress = 0;
										h,s,v,a = a2h, a2s, a2v, a2a;
									end;
									
									main_functions:set_hsva(h,s,v,a);
									main_functions:update();
								end;
							end);
						
							local old = set_config; set_config = function(config)
								fspawn(function()
									if (args.flag) then
										h,s,v = unpack(flags[args.flag].color[i]);
										a = flags[args.flag].alpha[i];
										
										a1h,a1s,a1v = unpack(flags[args.flag].anim_color[i][1]);
										a1a = flags[args.flag].anim_alpha[i][1];
										
										a2h,a2s,a2v = unpack(flags[args.flag].anim_color[i][2]);
										a2a = flags[args.flag].anim_alpha[i][2];
										
										main_functions:update();
									end;
								end);

								return old(config);
							end;
						end;
					end;
				end;
				
				local functions = {};
				
				
				return functions, colorpicker;
			end;

			function elements:colorpicker_1(args)
				local is_dragging_color;
				local is_dragging_hue;
				local is_dragging_alpha;
				
				local i = args.i;
				local h,s,v,a = args.h, args.s, args.v, args.a;
				
				local color_button = draw('TextButton');
				local button_gradient = draw('UIGradient');
				local color_dragger = draw('Frame');
				local dragger_outline = draw('UIStroke');
				local shadow_frame = draw('Frame');
				local shadow = draw('UIGradient');
				local hue = draw('TextButton');
				local hue_gradient = draw('UIGradient');
				local hue_dragger = draw('Frame');
				local alpha = draw('TextButton');
				local alpha_gradient = draw('UIGradient');
				local alpha_dragger = draw('Frame');

				color_button.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				color_button.BorderColor3 = color3_fromrgb(0, 0, 0);
				color_button.BorderSizePixel = 0;
				color_button.Position = udim2_new(0, 10, 0, 40);
				color_button.Size = udim2_new(0, 100, 0, 100);
				color_button.AutoButtonColor = false;
				color_button.Font = Enum.Font.SourceSans;
				color_button.Text = '';
				color_button.TextColor3 = color3_fromrgb(0, 0, 0);
				color_button.TextSize = 14.000;

				round(color_button, nil, 5);

				table_insert(connections, color_button.MouseButton1Down:Connect(function()
					is_dragging_color = true;	
				end));

				button_gradient.Color = colorsequence_new{colorsequencekeypoint_new(0.00, color3_fromrgb(255, 0, 0)); colorsequencekeypoint_new(1.00, color3_fromrgb(255, 255, 255))};
				button_gradient.Parent = color_button;

				color_dragger.Parent = color_button;
				color_dragger.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				color_dragger.BackgroundTransparency = 1.000;
				color_dragger.BorderColor3 = color3_fromrgb(0, 0, 0);
				color_dragger.BorderSizePixel = 0;
				color_dragger.Size = udim2_new(0, 6, 0, 6);
				color_dragger.ZIndex = 2;

				round(color_dragger, 1);

				dragger_outline.Parent = color_dragger;
				dragger_outline.Color = color3_fromrgb(255, 255, 255);

				shadow_frame.Parent = color_button;
				shadow_frame.BackgroundColor3 = color3_fromrgb(0, 0, 0);
				shadow_frame.BorderColor3 = color3_fromrgb(0, 0, 0);
				shadow_frame.BorderSizePixel = 0;
				shadow_frame.Size = udim2_new(1, 0, 1, 0);

				round(shadow_frame, nil, 4);

				shadow.Rotation = -90;
				shadow.Transparency = numbersequence_new{numbersequencekeypoint_new(0.00, 0.00); numbersequencekeypoint_new(1.00, 1.00)};
				shadow.Parent = shadow_frame;

				hue.Parent = color_button;
				hue.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				hue.BorderColor3 = color3_fromrgb(0, 0, 0);
				hue.BorderSizePixel = 0;
				hue.Position = udim2_new(1.09000003, 0, 0, 0);
				hue.Size = udim2_new(0, 7, 1, 0);
				hue.AutoButtonColor = false;
				hue.Font = Enum.Font.SourceSans;
				hue.Text = '';
				hue.TextColor3 = color3_fromrgb(0, 0, 0);
				hue.TextSize = 14.000;

				round(hue, nil, 6);

				table_insert(connections, hue.MouseButton1Down:Connect(function()
					is_dragging_hue = true;	
				end));

				hue_gradient.Color = colorsequence_new((function()
					local list = {};

					for i = 1, 20 do
						if (i == 1) then
							table_insert(list, colorsequencekeypoint_new(0, color3_fromhsv(1, 1, 1)));
						else
							table_insert(list, colorsequencekeypoint_new(i / 20, color3_fromhsv(i / 20, 1, 1)));
						end;
					end;

					return list;
				end)());
				hue_gradient.Rotation = 90;
				hue_gradient.Parent = hue;

				hue_dragger.Parent = hue;
				hue_dragger.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				hue_dragger.BorderColor3 = color3_fromrgb(0, 0, 0);
				hue_dragger.BorderSizePixel = 0;
				hue_dragger.Position = udim2_new(0, -1, 0, 0);
				hue_dragger.Size = udim2_new(1, 2, 0, 3);

				round(hue_dragger, nil, 6);

				alpha.Parent = color_button;
				alpha.Visible = (a ~= nil);
				alpha.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				alpha.BorderColor3 = color3_fromrgb(0, 0, 0);
				alpha.BorderSizePixel = 0;
				alpha.Position = udim2_new(1.23000002, 0, 0, 0);
				alpha.Size = udim2_new(0, 7, 1, 0);
				alpha.AutoButtonColor = false;
				alpha.Font = Enum.Font.SourceSans;
				alpha.Text = '';
				alpha.TextColor3 = color3_fromrgb(0, 0, 0);
				alpha.TextSize = 14.000;

				round(alpha, 1);

				table_insert(connections, alpha.MouseButton1Down:Connect(function()
					is_dragging_alpha = true;	
				end));

				alpha_gradient.Color = colorsequence_new{colorsequencekeypoint_new(0.00, color3_fromrgb(255, 255, 255)), colorsequencekeypoint_new(1.00, color3_fromrgb(0, 0, 0))};
				alpha_gradient.Rotation = 90;
				alpha_gradient.Parent = alpha;

				alpha_dragger.Parent = alpha;
				alpha_dragger.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				alpha_dragger.BorderColor3 = color3_fromrgb(0, 0, 0);
				alpha_dragger.BorderSizePixel = 0;
				alpha_dragger.Position = udim2_new(0, -1, 0, 0);
				alpha_dragger.Size = udim2_new(1, 2, 0, 3);

				round(alpha_dragger, 1);

				local function update()
					button_gradient.Color = colorsequence_new({colorsequencekeypoint_new(0, color3_fromhsv(h, 1, 1)); colorsequencekeypoint_new(1, color3_fromrgb(255, 255, 255))})

					color_dragger.Position = udim2_new(1 - math_abs(s), -3, 1 - math_abs(v), -3)
					hue_dragger.Position = udim2_new(0, -1, h, 0)
					alpha_dragger.Position = udim2_new(0, -1, a, 0)

					pcall(args.callback, color3_fromhsv(h,s,v), a)
				end;

				table_insert(connections, uis.InputEnded:Connect(function(input)
					if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
						is_dragging_color = false;
						is_dragging_hue = false;
						is_dragging_alpha = false;
					end;
				end));

				local function on_drag(input)
					if (not is_window_visible) then return; end;
					if (input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch) then
						return;
					end;

					if (is_dragging_color) then
						s = (1 - math_abs(math_clamp((input.Position.X - color_button.AbsolutePosition.X) / color_button.AbsoluteSize.X, 0, 1)));
						v = (1 - math_abs(math_clamp((input.Position.Y - color_button.AbsolutePosition.Y) / color_button.AbsoluteSize.Y, 0, 1)));

						update();
					end;

					if (is_dragging_hue) then
						h = math_clamp((input.Position.Y - hue.AbsolutePosition.Y) / hue.AbsoluteSize.Y, 0, 1);

						update();
					end;

					if (is_dragging_alpha) then
						a = math_clamp((input.Position.Y - alpha.AbsolutePosition.Y) / alpha.AbsoluteSize.Y, 0, 1);

						update();
					end;
				end;

				table_insert(connections, uis.InputBegan:Connect(on_drag));
				table_insert(connections, uis.InputChanged:Connect(on_drag));
				
				do
					local button = draw('TextButton');
					local bg = draw('Frame');
					local text = draw('TextLabel');

					button.Parent = color_button;
					button.BackgroundTransparency = 1.000;
					button.BorderColor3 = color3_fromrgb(0, 0, 0);
					button.BorderSizePixel = 0;
					button.Position = udim2_new(0, -10, 1, 5);
					button.Size = udim2_new(1, (a and 51 or 20), 0, 35);
					button.AutoButtonColor = false;
					button.Font = Enum.Font.SourceSans;
					button.Text = '';
					button.TextColor3 = color3_fromrgb(0, 0, 0);
					button.TextSize = 14.000;

					table_insert(connections, button.MouseButton1Click:Connect(function()
						copyied_color = {{h;s;v};a};

						tween:Create(text, tweeninfo_new(0.1, Enum.EasingStyle.Circular), {TextColor3 = colors[1]}):Play();
						fwait(0.1);
						tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
					end));

					bg.Parent = button;
					bg.BackgroundColor3 = color3_fromrgb(30, 30, 40);
					bg.BorderColor3 = color3_fromrgb(0, 0, 0);
					bg.BorderSizePixel = 0;
					bg.Position = udim2_new(0, 5, 0, 3);
					bg.Size = udim2_new(1, -10, 1, -6);

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							bg.BackgroundColor3 = colors[2];
						end;

						return old(position, color);
					end;

					round(bg, 0, 5);

					text.Parent = button;
					text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					text.BackgroundTransparency = 1.000;
					text.BorderColor3 = color3_fromrgb(0, 0, 0);
					text.BorderSizePixel = 0;
					text.Position = udim2_new(0, 10, 0, 5);
					text.Size = udim2_new(1, -20, 1, -10);
					text.Font = Enum.Font.SourceSansBold;
					text.Text = 'Copy Color';
					text.TextColor3 = color3_fromrgb(78, 77, 84);
					text.TextSize = 15.000;

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							text.TextColor3 = colors[6];
						end;

						return old(position, color);
					end;

					local old = set_language; set_language = function()
						text.Text = translate('Copy Color');

						return old();
					end;

					local button = draw('TextButton');
					local bg = draw('Frame');
					local text = draw('TextLabel');

					button.Parent = color_button;
					button.BackgroundTransparency = 1.000;
					button.BorderColor3 = color3_fromrgb(0, 0, 0);
					button.BorderSizePixel = 0;
					button.Position = udim2_new(0, -10, 1, 40);
					button.Size = udim2_new(1, (a and 51 or 20), 0, 35);
					button.AutoButtonColor = false;
					button.Font = Enum.Font.SourceSans;
					button.Text = '';
					button.TextColor3 = color3_fromrgb(0, 0, 0);
					button.TextSize = 14.000;

					table_insert(connections, button.MouseButton1Click:Connect(function()
						if (copyied_color) then
							h,s,v = unpack(copyied_color[1]);
							a = copyied_color[2];
							update();
						end;

						tween:Create(text, tweeninfo_new(0.1, Enum.EasingStyle.Circular), {TextColor3 = colors[1]}):Play();
						fwait(0.1);
						tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
					end));

					bg.Parent = button;
					bg.BackgroundColor3 = color3_fromrgb(30, 30, 40);
					bg.BorderColor3 = color3_fromrgb(0, 0, 0);
					bg.BorderSizePixel = 0;
					bg.Position = udim2_new(0, 5, 0, 3);
					bg.Size = udim2_new(1, -10, 1, -6);

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							bg.BackgroundColor3 = colors[2];
						end;

						return old(position, color);
					end;

					round(bg, 0, 5);

					text.Parent = button;
					text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					text.BackgroundTransparency = 1.000;
					text.BorderColor3 = color3_fromrgb(0, 0, 0);
					text.BorderSizePixel = 0;
					text.Position = udim2_new(0, 10, 0, 5);
					text.Size = udim2_new(1, -20, 1, -10);
					text.Font = Enum.Font.SourceSansBold;
					text.Text = 'Paste Color';
					text.TextColor3 = color3_fromrgb(78, 77, 84);
					text.TextSize = 15.000;

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							text.TextColor3 = colors[6];
						end;

						return old(position, color);
					end;

					local old = set_language; set_language = function()
						text.Text = translate('Paste Color');

						return old();
					end;
				end;
				
				local functions = {};
				
				function functions:set_h(new)
					h = new;
				end;

				function functions:set_s(new)
					s = new;
				end;

				function functions:set_v(new)
					v = new;
				end;

				function functions:set_a(new)
					a = new;
				end;

				function functions:set_hsv(a,b,c)
					h,s,v = a,b,c;
				end;

				function functions:set_hsva(a,b,c,d)
					h,s,v,a = a,b,c,d;
				end;
				
				function functions:get_h()
					return (h);
				end;

				function functions:get_s()
					return (s);
				end;

				function functions:get_v()
					return (v);
				end;

				function functions:get_a()
					return (a);
				end;

				function functions:get_hsv()
					return h,s,v;
				end;

				function functions:get_hsva()
					return h,s,v,a;
				end;
				
				function functions:update()
					update();
				end;
				
				return functions, color_button;
			end;
		end;

		if (not pcall(function()
				screen.Parent = core;
			end)) then
			screen.Parent = client.PlayerGui;
		end;

		screen.DisplayOrder   = 0x7fffffff;
		screen.IgnoreGuiInset = true;
		screen.Name           = 'eternal ui';
		screen.ResetOnSpawn   = false;

		cursor.Parent = screen;
		cursor.Size = udim2_fromoffset(6, 6);
		cursor.BackgroundColor3 = color3_fromrgb(255, 255, 255);
		cursor.ZIndex = 0x7fffffff;

		round(cursor, 1);

		main_frame.Parent = screen;
		main_frame.BackgroundColor3 = color3_fromrgb(19, 18, 25);
		main_frame.BorderColor3 = color3_fromrgb(0, 0, 0);
		main_frame.BorderSizePixel = 0;
		main_frame.AnchorPoint = vector2_new(0.5, 0.5);
		main_frame.Position = udim2_new(0.5, 0, 0.5, 0);
		main_frame.Size = udim2_new(0, 710, 0, 442);

		local old = update_color; update_color = function(position, color)
			if (is_window_visible) then
				main_frame.BackgroundColor3 = colors[3];
			end;

			return old(position, color);
		end;

		hook_drag(main_frame);
		round(main_frame, 0.02);

		mobile_hide.Parent = screen;
		mobile_hide.Visible = (uis:GetPlatform() ~= Enum.Platform.Windows);
		mobile_hide.BackgroundColor3 = color3_fromrgb(19, 18, 25);
		mobile_hide.Size = udim2_new(0.1, 0, 0.1, 0);
		mobile_hide.Parent = screen;
		mobile_hide.Text = '   eternal   ';
		mobile_hide.TextScaled = true;
		mobile_hide.TextColor3 = color3_fromrgb(255, 255, 255);
		mobile_hide.MouseButton1Click:Connect(function()
			functions:hide(main_frame.Visible);
		end);

		local old = update_color; update_color = function(position, color)
			if (is_window_visible) then
				mobile_hide.BackgroundColor3 = colors[3];
			end;

			return old(position, color);
		end;

		hook_drag(mobile_hide);
		round(mobile_hide, 0.25);

		local last_state = {MouseBehavior = uis.MouseBehavior};
		table_insert(connections, run.Heartbeat:Connect(function()
			if (is_window_visible) then
				cursor.Visible = true;
				cursor.BackgroundTransparency = 0;
			else
				cursor.Visible = false;
			end;
		end));

		table_insert(connections, uis.InputChanged:Connect(function()
			if (not is_window_visible) then return; end;

			local mouse_location = uis:GetMouseLocation();
			cursor.Position = udim2_fromoffset(mouse_location.X - 3, mouse_location.Y - 3);
		end));

		logo_bg.Parent = main_frame;
		logo_bg.BackgroundColor3 = color3_fromrgb(81, 82, 192);
		logo_bg.BorderColor3 = color3_fromrgb(0, 0, 0);
		logo_bg.BorderSizePixel = 0;
		logo_bg.Position = udim2_new(0.024, 0, 0.033, 0);
		logo_bg.Size = udim2_new(0, 34, 0, 34);

		local old = update_color; update_color = function(position, color)
			if (is_window_visible) then
				logo_bg.BackgroundColor3 = colors[1];
			end;

			return old(position, color);
		end;

		round(logo_bg, 0.2);

		logo_text.Parent = logo_bg;
		logo_text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
		logo_text.BackgroundTransparency = 1.000;
		logo_text.BorderColor3 = color3_fromrgb(0, 0, 0);
		logo_text.BorderSizePixel = 0;
		logo_text.Size = udim2_new(0.95, 0, 1, 0);
		logo_text.Font = Enum.Font.GothamBold;
		logo_text.Text = 'E';
		logo_text.TextColor3 = color3_fromrgb(255, 255, 255);
		logo_text.TextScaled = true;
		logo_text.TextSize = 14;
		logo_text.TextWrapped = true;

		tab_holder.Parent = main_frame;
		tab_holder.BackgroundColor3 = color3_fromrgb(255, 255, 255);
		tab_holder.BackgroundTransparency = 1.000;
		tab_holder.BorderColor3 = color3_fromrgb(0, 0, 0);
		tab_holder.BorderSizePixel = 0;
		tab_holder.Position = udim2_new(0, 13, 0, 62);
		tab_holder.Size = udim2_new(0.0577464774, 0, 0.757918537, -2);

		round(tab_holder, 0.15);

		tab_layout.Parent = tab_holder;
		tab_layout.SortOrder = Enum.SortOrder.LayoutOrder;
		tab_layout.Padding = udim_new(0, 5);

		tabs_outline_bg.Parent = main_frame;
		tabs_outline_bg.BackgroundColor3 = color3_fromrgb(255, 255, 255);
		tabs_outline_bg.BackgroundTransparency = 1.000;
		tabs_outline_bg.BorderColor3 = color3_fromrgb(0, 0, 0);
		tabs_outline_bg.BorderSizePixel = 0;
		tabs_outline_bg.Position = udim2_new(0.0179999974, -2, 0.143000051, -3);
		tabs_outline_bg.Size = udim2_new(0.0580000021, 4, 0.823063374, 4);

		round(tabs_outline_bg, nil, 5);

		tabs_outline.Parent = tabs_outline_bg;
		tabs_outline.Color = color3_fromrgb(30, 30, 40);

		local old = update_color; update_color = function(position, color)
			if (is_window_visible) then
				tabs_outline.Color = colors[2];
			end;

			return old(position, color);
		end;

		group_bg.Parent = main_frame;
		group_bg.BackgroundColor3 = color3_fromrgb(23, 23, 30);
		group_bg.BorderColor3 = color3_fromrgb(0, 0, 0);
		group_bg.BorderSizePixel = 0;
		group_bg.Position = udim2_new(0.0985915512, 0, 0.0329999961, 0);
		group_bg.Size = udim2_new(0.228169009, 0, 0.935325801, 0);
		group_bg.ZIndex = 2;

		local old = update_color; update_color = function(position, color)
			if (is_window_visible) then
				group_bg.BackgroundColor3 = colors[4];
			end;

			return old(position, color);
		end;

		round(group_bg, nil, 3);

		group_holder.Parent = group_bg;
		group_holder.BackgroundColor3 = color3_fromrgb(255, 255, 255);
		group_holder.BackgroundTransparency = 1.000;
		group_holder.BorderColor3 = color3_fromrgb(0, 0, 0);
		group_holder.BorderSizePixel = 0;
		group_holder.Position = udim2_new(0.0802469105, 0, 0.024188716, 0);
		group_holder.Size = udim2_new(0.919753075, 0, 0.975811243, 0);

		group_layout.Parent = group_holder;
		group_layout.SortOrder = Enum.SortOrder.LayoutOrder;
		group_layout.Padding = udim_new(0, 7);

		group_closer.Parent = group_bg;
		group_closer.BackgroundColor3 = color3_fromrgb(255, 255, 255);
		group_closer.BackgroundTransparency = 1.000;
		group_closer.BorderColor3 = color3_fromrgb(0, 0, 0);
		group_closer.BorderSizePixel = 0;
		group_closer.Position = udim2_new(1, 0, 0, 0);
		group_closer.Rotation = 90;
		group_closer.Size = udim2_new(0, 15, 0, 15);
		group_closer.Image = 'rbxassetid://18762643214';
		group_closer.ZIndex = 2;

		main_holder.Parent = main_frame;
		main_holder.BackgroundTransparency = 1;
		main_holder.BorderColor3 = color3_fromrgb(0, 0, 0);
		main_holder.BorderSizePixel = 0;
		main_holder.Position = udim2_new(0.183098629, 0, 0.0330000296, 0);
		main_holder.Size = udim2_new(0.797183037, 0, 0.935325742, 0);
		main_holder.ClipsDescendants = true;

		round(main_holder, nil, 3);

		holder_layout.Parent = main_holder;
		holder_layout.SortOrder = Enum.SortOrder.LayoutOrder;
		holder_layout.FillDirection = Enum.FillDirection.Horizontal;
		holder_layout.Padding = udim_new(0, 10);

		misc_holder.Parent = main_frame;
		misc_holder.BackgroundTransparency = 1;
		misc_holder.Size = udim2_new(0, 1, 0, 1);

		local is_groups_closed = false;
		local function close_groups()
			is_groups_closed = not is_groups_closed;

			group_closer.Rotation = (is_groups_closed and -90 or 90);
			for _, instance in group_holder:GetDescendants() do
				if (instance:IsA('TextLabel')) then
					local tween_data = {TextTransparency = (is_groups_closed and 1 or 0)};

					if (instance.Parent == group_holder) then
						tween_data.Size = (is_groups_closed and udim2_new(1, 0, 0, 0) or udim2_new(1, 0, -0.00247884286, 20));
					end;

					tween:Create(instance, tweeninfo_new(0.15, Enum.EasingStyle.Circular), tween_data):Play();
				elseif (instance:IsA('TextButton')) then
					tween:Create(instance, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Size = (is_groups_closed and udim2_new(0, 30, 0, 30) or udim2_new(0, 141, 0, 30))}):Play();
					tween:Create(instance.ImageLabel, tweeninfo_new(0.15, Enum.EasingStyle.Circular), {Position = (is_groups_closed and udim2_new(0.5, -10, 0.5, -10) or udim2_new(0.055, 0, 0.5, -10))}):Play();
				end;
			end;

			for _, shadow in section_shadows do
				tween:Create(shadow, tweeninfo_new(0.4, Enum.EasingStyle.Circular), {BackgroundTransparency = (is_groups_closed and 1 or 0.9)}):Play();
			end;

			if (is_groups_closed) then
				tween:Create(group_layout, tweeninfo_new(0.25, Enum.EasingStyle.Circular), {Padding = udim_new(0, 2)}):Play();

				tween:Create(group_bg, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Size = udim2_new(0.0663, 0, 0.935, 0)}):Play();
				tween:Create(group_holder, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Position = udim2_new(0, 7, 0.024188716, 0); Size = udim2_new(1, 0, 1, 0)}):Play();
			else
				tween:Create(group_layout, tweeninfo_new(0.25, Enum.EasingStyle.Circular), {Padding = udim_new(0, 7)}):Play();

				tween:Create(group_bg, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Size = udim2_new(0.228169009, 0, 0.935325801, 0)}):Play();
				tween:Create(group_holder, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Position = udim2_new(0.0802469105, 0, 0.024188716, 0); Size = udim2_new(0.919753075, 0, 0.975811243, 0)}):Play();
			end;
		end;

		table_insert(connections, group_closer.MouseButton1Click:Connect(close_groups));

		local groups_closed_due_to_transition;
		local saved_alpha = {};
		local function start_transition(transition_type)
			if (true) then
				return;
			end;

			tween:Create(main_holder, tweeninfo_new(0.25, Enum.EasingStyle.Circular, Enum.EasingDirection.In), {Position = udim2_new(0.183, 0, 0.083, 0)}):Play()

			local list = {};

			if (transition_type == 'tab') then
				for _, instance in group_bg:GetDescendants() do
					table_insert(list, instance);
				end;
			elseif (transition_type == 'gui') then
				for _, instance in main_frame:GetDescendants() do
					table_insert(list, instance);
				end;

				tween:Create(main_frame, tweeninfo_new(0.55, Enum.EasingStyle.Circular, Enum.EasingDirection.In), {BackgroundTransparency = 1}):Play()
			end;

			for _, instance in main_holder:GetDescendants() do
				table_insert(list, instance);
			end;

			if (transition_type ~= 'gui') then
				table_remove(list, table_find(list, group_closer));
			end;

			for _, instance in list do
				local indexes = {
					((instance:IsA('Frame') or instance:IsA('ImageLabel') or instance:IsA('ImageButton') or instance:IsA('TextLabel') or instance:IsA('TextButton') or instance:IsA('TextBox')) and 'BackgroundTransparency' or nil); 
					((instance:IsA('ImageLabel') or instance:IsA('ImageButton')) and 'ImageTransparency' or nil);
					((instance:IsA('TextLabel') or instance:IsA('TextButton') or instance:IsA('TextBox')) and 'TextTransparency' or nil);
					((instance:IsA('UIStroke')) and 'Transparency' or nil);
					((instance:IsA('ScrollingFrame')) and 'ScrollBarImageTransparency' or nil);
				};
				local saved = {};

				for _, index in indexes do
					saved[index] = instance[index]
					tween:Create(instance, tweeninfo_new(0.25, Enum.EasingStyle.Circular, Enum.EasingDirection.In), (function()
						local list = {};
						list[index] = 1;
						return list;
					end)()):Play();
				end;

				if (not saved_alpha[instance]) then
					saved_alpha[instance] = saved;
				end;
			end;

			if (transition_type == 'tab' and not is_groups_closed) then
				close_groups();
				groups_closed_due_to_transition = true;
			else
				groups_closed_due_to_transition = false;
			end;

			fwait(0.35 + (transition_type == 'gui' and 0.2 or 0));

			if (transition_type == 'gui') then
				main_frame.Visible = false;
			else
				tab_transition();
			end;
		end;

		local function end_transition()
			if (true) then
				return;
			end;

			if (not main_frame.Visible) then
				main_frame.Visible = true;
				tween:Create(main_frame, tweeninfo_new(0.45, Enum.EasingStyle.Circular, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play();
				fwait(0.25);	
			end;

			tween:Create(main_holder, tweeninfo_new(0.25, Enum.EasingStyle.Circular, Enum.EasingDirection.Out), {Position = udim2_new(0.183, 0, 0.033, 0)}):Play();

			for instance, data in saved_alpha do
				for index, value in data do
					if (index == 'BackgroundTransparency' and instance:IsA('TextButton') and instance:FindFirstChild('ImageLabel') and instance.ImageLabel.ImageColor3 == colors[1] and instance.Parent == group_holder) then
						value = 0;
					end;

					tween:Create(instance, tweeninfo_new(0.25, Enum.EasingStyle.Circular, Enum.EasingDirection.Out), (function()
						local list = {};
						list[index] = value;
						return list;	
					end)()):Play()
				end;

				saved_alpha[instance] = nil;
			end;

			if (groups_closed_due_to_transition) then
				close_groups();
			end;
		end;

		local tabs = {};

		local skins_page;
		local files_page;
		function functions:tab(tab_args)

			local is_tab_selected = (not tab_holder:FindFirstChildWhichIsA('TextButton'));

			local tab = draw('TextButton');
			local tab_image = draw('ImageLabel');

			tab.Parent = tab_holder;
			tab.Modal = true;
			tab.BackgroundColor3 = color3_fromrgb(30, 30, 40);
			tab.BackgroundTransparency = (is_tab_selected and 0 or 1);
			tab.BorderColor3 = color3_fromrgb(0, 0, 0);
			tab.BorderSizePixel = 0;
			tab.Size = udim2_new(0, 41, 0, 41);
			tab.AutoButtonColor = false;
			tab.Font = Enum.Font.SourceSans;
			tab.Text = '';
			tab.TextColor3 = color3_fromrgb(0, 0, 0);
			tab.TextSize = 14;

			local old = update_color; update_color = function(position, color)
				if (is_window_visible) then
					tab.BackgroundColor3 = colors[2];
				end;

				return old(position, color);
			end;

			round(tab, 0.15);

			tab_image.Parent = tab;
			tab_image.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			tab_image.BackgroundTransparency = 1;
			tab_image.BorderColor3 = color3_fromrgb(0, 0, 0);
			tab_image.BorderSizePixel = 0;
			tab_image.Position = udim2_new(0.2, 0, 0.2, 0);
			tab_image.Size = udim2_new(0.6, 0, 0.6, 0);
			tab_image.Image = tab_args.icon;
			tab_image.ImageColor3 = (is_tab_selected and color3_fromrgb(92, 87, 191) or color3_fromrgb(84, 82, 102));

			local old = update_color; update_color = function(position, color)
				if (is_window_visible) then
					tab_image.ImageColor3 = (is_tab_selected and colors[1] or colors[5]);
				end;

				return old(position, color);
			end;

			tabs[tab_args.name] = {
				components = {};
				set_selected = function(is_selected)
					is_tab_selected = is_selected;
					for _, component in tabs[tab_args.name].components do
						component.Visible = is_selected;
					end;

					tween:Create(tab, tweeninfo_new(0.25, Enum.EasingStyle.Circular), {BackgroundTransparency = (is_selected and 0 or 1)}):Play();
					tween:Create(tab_image, tweeninfo_new(0.25, Enum.EasingStyle.Circular), {ImageColor3 = (is_selected and colors[1] or colors[5])}):Play();
				end;
			};

			if (tab_args.type == 'skin changer') then
				skins_page = draw('Frame');
			elseif (tab_args.type == 'files') then
				files_page = draw('Frame');
			end;

			table_insert(connections, tab.MouseButton1Click:Connect(function()
				if (tab_image.ImageColor3 == colors[5]) then
					start_transition('tab');
				end;

				for _, instance in misc_holder:GetChildren() do
					if (instance:IsA('Frame') or instance:IsA('ScrollingFrame') or instance:IsA('TextBox')) then
						instance.Visible = false;
					end;
				end;

				for index, data in tabs do
					data.set_selected(index == tab_args.name);
				end;

				if (skins_page) then
					skins_page.Visible = (tab_args.type == 'skin changer');
				end;
				
				if (files_page) then
					files_page.Visible = (tab_args.type == 'files');
				end;

				if (tab_args.type == 'files' or tab_args.type == 'settings' or tab_args.type == 'skin changer') then
					if (tab_args.type == 'settings') then
						main_holder.Position = udim2_fromscale(0.1, 0.033);
						main_holder.Size = udim2_fromscale(0.88, 0.935);
					end

					group_bg.Visible = false;
					group_closer.Visible = false;
				else
					main_holder.Position = udim2_new(0.183098629, 0, 0.0330000296, 0);
					main_holder.Size = udim2_new(0.797183037, 0, 0.935325742, 0);

					group_bg.Visible = true;
					group_closer.Visible = true;
				end;

				end_transition();
			end));

			local functions = {};
			local sections = {};
			local section_count = 0;

			function functions:group(group_name)

				local label = draw('TextLabel');

				label.Parent = group_holder;
				label.Visible = is_tab_selected;
				label.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				label.BackgroundTransparency = 1;
				label.BorderColor3 = color3_fromrgb(0, 0, 0);
				label.BorderSizePixel = 0;
				label.Size = udim2_new(1, 0, -0.00247884286, 20);
				label.Font = Enum.Font.SourceSansBold;
				label.Text = string_upper(translate(group_name));
				label.TextColor3 = color3_fromrgb(78, 77, 84);
				label.TextSize = 14;
				label.TextXAlignment = Enum.TextXAlignment.Left;
				label.TextYAlignment = Enum.TextYAlignment.Top;
				label.ZIndex = 2;

				local old = update_color; update_color = function(position, color)
					if (is_window_visible) then
						label.TextColor3 = colors[6];
					end;

					return old(position, color);
				end;

				table_insert(tabs[tab_args.name].components, label);

				local old = set_language; set_language = function()
					label.Text = string_upper(translate(group_name));

					return old();
				end;

				local functions = {};

				function functions:section(section_args)

					section_count += 1;

					local section_flag = (section_args.flag or section_count);

					local is_section_selected = (section_count == 1);

					local section = draw('TextButton');
					local section_image = draw('ImageLabel');
					local section_text = draw('TextLabel');

					section.Parent = group_holder;
					section.Visible = is_tab_selected;
					section.BackgroundColor3 = color3_fromrgb(30, 30, 40);
					section.BackgroundTransparency = (is_section_selected and 0 or 1);
					section.BorderColor3 = color3_fromrgb(0, 0, 0);
					section.BorderSizePixel = 0;
					section.Position = udim2_new(0, 0, 0.0644499138, 0);
					section.Size = udim2_new(0, 141, 0, 30);
					section.AutoButtonColor = false;
					section.Font = Enum.Font.SourceSans;
					section.Text = '';
					section.TextColor3 = color3_fromrgb(0, 0, 0);
					section.TextSize = 14.000;
					section.ZIndex = 2;

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							section.BackgroundColor3 = colors[2];
						end;

						return old(position, color);
					end;

					table_insert(tabs[tab_args.name].components, section);
					round(section, nil, 3);

					section_image.Parent = section;
					section_image.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					section_image.BackgroundTransparency = 1;
					section_image.BorderColor3 = color3_fromrgb(0, 0, 0);
					section_image.BorderSizePixel = 0;
					section_image.Position = udim2_new(0.0549999997, 0, 0.5, -10);
					section_image.Size = udim2_new(0, 20, 0, 20);
					section_image.Image = section_args.icon;
					section_image.ImageColor3 = (is_section_selected and color3_fromrgb(92, 87, 191) or color3_fromrgb(78, 77, 84));
					section_image.ZIndex = 2;

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							section_image.ImageColor3 = (is_section_selected and colors[1] or colors[6]);
						end;

						return old(position, color);
					end;

					section_text.Parent = section;
					section_text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					section_text.BackgroundTransparency = 1.000;
					section_text.BorderColor3 = color3_fromrgb(0, 0, 0);
					section_text.BorderSizePixel = 0;
					section_text.Position = udim2_new(0.259259254, 0, 0, 0);
					section_text.Size = udim2_new(0.370370358, 50, 1, 0);
					section_text.Font = Enum.Font.SourceSansBold;
					section_text.Text = translate(section_args.text);
					section_text.TextColor3 = color3_fromrgb(220, 220, 220);
					section_text.TextSize = 15.000;
					section_text.TextXAlignment = Enum.TextXAlignment.Left;
					section_text.ZIndex = 2;

					local old = set_language; set_language = function()
						section_text.Text = translate(section_args.text);

						return old();
					end;

					local main_sections = (function()
						local list = {};

						for i = 1, section_args.divider do

							local bg = draw('Frame');
							local holder = draw('ScrollingFrame');
							local holder_shadow = draw('Frame');
							local section = draw('Frame');
							local section_layout = draw('UIListLayout');

							bg.Parent = main_holder;
							bg.Visible = is_section_selected;
							bg.BackgroundColor3 = color3_fromrgb(23, 23, 30);
							bg.BorderColor3 = color3_fromrgb(0, 0, 0);
							bg.BorderSizePixel = 0;
							bg.Position = udim2_new(0.183098629, 0, 0.0330000296, 0);
							bg.Size = udim2_new(1 / section_args.divider, (section_args.divider ~= 1 and -5 or 0), 1, 0);

							local old = update_color; update_color = function(position, color)
								if (is_window_visible) then
									bg.BackgroundColor3 = colors[4];
								end;

								return old(position, color);
							end;

							round(bg, nil, 3);

							holder.Parent = bg;
							holder.BorderSizePixel = 0;
							holder.BackgroundTransparency = 1;
							holder.CanvasSize = udim2_new();
							holder.AutomaticCanvasSize = Enum.AutomaticSize.Y;
							holder.ScrollBarThickness = 5;
							holder.ScrollBarImageColor3 = color3_fromrgb(81, 82, 192);
							holder.Position = udim2_new(0, 10, 0, 10);
							holder.Size = udim2_new(1, -20, 1, -10);

							local old = update_color; update_color = function(position, color)
								if (is_window_visible) then
									holder.ScrollBarImageColor3 = colors[1];
								end;

								return old(position, color);
							end;

							holder_shadow.Parent = bg;
							holder_shadow.BackgroundColor3 = color3_fromrgb(0, 0, 0);
							holder_shadow.BackgroundTransparency = 0.9;
							holder_shadow.BorderColor3 = color3_fromrgb(0, 0, 0);
							holder_shadow.BorderSizePixel = 0;
							holder_shadow.Size = udim2_new(1, 0, 1, 0);

							section.Parent = bg;
							section.BackgroundColor3 = color3_fromrgb(255, 255, 255);
							section.BackgroundTransparency = 1.000;
							section.BorderColor3 = color3_fromrgb(0, 0, 0);
							section.BorderSizePixel = 0;
							section.Position = udim2_new(0, 10, 0, 10);
							section.Size = udim2_new(1, -20, 1, -10);

							section_layout.Parent = holder;
							section_layout.Padding = udim_new(0, 10);
							section_layout.SortOrder = Enum.SortOrder.LayoutOrder;

							round(holder_shadow, nil, 3);

							if (tab_args.type ~= 'files' and tab_args.type ~= 'settings' and tab_args.type ~= 'skin changer') then
								table_insert(section_shadows, holder_shadow);
							else
								holder_shadow.BackgroundTransparency = 1;
							end;

							table_insert(list, section);
						end;

						return list;
					end)()

					if (is_section_selected) then
						for _, section in main_sections do
							table_insert(tabs[tab_args.name].components, section.Parent);
						end;
					end;

					sections[section_flag] = {
						tab = tab_args.name;
						components = (function()
							local list = {};

							for _, section in main_sections do
								table_insert(list, section.Parent);
							end;

							return list;
						end)();
						set_selected = function(is_section_selected)
							for _, component in sections[section_flag].components do
								component.Visible = is_section_selected;
							end;

							tween:Create(section, tweeninfo_new(0.25, Enum.EasingStyle.Circular), {BackgroundTransparency = (is_section_selected and 0 or 1)}):Play();
							tween:Create(section_image, tweeninfo_new(0.25, Enum.EasingStyle.Circular), {ImageColor3 = (is_section_selected and colors[1] or colors[6])}):Play();
						end;
					};

					table_insert(connections, section.MouseButton1Click:Connect(function()
						for index, component in tabs[tab_args.name].components do
							if (component.Parent == main_holder) then
								tabs[tab_args.name].components[index] = nil;
							end;
						end;

						for _, section in main_sections do
							table_insert(tabs[tab_args.name].components, section.Parent);
						end;

						if (section.BackgroundTransparency == 1) then
							start_transition('section');
						end;

						for _, instance in misc_holder:GetChildren() do
							if (instance:IsA('Frame') or instance:IsA('ScrollingFrame') or instance:IsA('TextBox')) then
								instance.Visible = false;
							end;
						end;

						for index, data in sections do
							data.set_selected(index == section_flag and tab_args.name == data.tab);
						end;

						end_transition();
					end));

					local functions = {};

					function functions:group(group_position)

						local group = draw('Frame');
						local group_layout = draw('UIListLayout');

						group.Parent = (group_position and main_sections[group_position] or main_sections[1]).Parent.ScrollingFrame;
						group.BackgroundColor3 = color3_fromrgb(20, 19, 26);
						group.AutomaticSize = Enum.AutomaticSize.Y;
						group.BorderColor3 = color3_fromrgb(0, 0, 0);
						group.BorderSizePixel = 0;
						group.Position = udim2_new(0, 0, 0, 0);
						group.Size = udim2_new(1, 0, 0, 0);

						group_layout.Parent = group;

						round(group, nil, 4);

						local functions = {};

						function functions:button(args)

							local button = draw('TextButton');
							local bg = draw('Frame');
							local text = draw('TextLabel');

							button.Parent = group;
							button.BackgroundTransparency = 1.000;
							button.BorderColor3 = color3_fromrgb(0, 0, 0);
							button.BorderSizePixel = 0;
							button.Size = udim2_new(1, 0, 0, 35);
							button.AutoButtonColor = false;
							button.Font = Enum.Font.SourceSans;
							button.Text = '';
							button.TextColor3 = color3_fromrgb(0, 0, 0);
							button.TextSize = 14.000;

							table_insert(connections, button.MouseButton1Click:Connect(function()
								fspawn(function() pcall(args.callback) end);

								tween:Create(text, tweeninfo_new(0.1, Enum.EasingStyle.Circular), {TextColor3 = colors[1]}):Play();
								fwait(0.1);
								tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
							end));

							bg.Parent = button;
							bg.BackgroundColor3 = color3_fromrgb(30, 30, 40);
							bg.BorderColor3 = color3_fromrgb(0, 0, 0);
							bg.BorderSizePixel = 0;
							bg.Position = udim2_new(0, 5, 0, 3);
							bg.Size = udim2_new(1, -10, 1, -6);

							local old = update_color; update_color = function(position, color)
								if (is_window_visible) then
									bg.BackgroundColor3 = colors[2];
								end;

								return old(position, color);
							end;

							round(bg, 0, 5);

							text.Parent = button;
							text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
							text.BackgroundTransparency = 1.000;
							text.BorderColor3 = color3_fromrgb(0, 0, 0);
							text.BorderSizePixel = 0;
							text.Position = udim2_new(0, 10, 0, 5);
							text.Size = udim2_new(1, -20, 1, -10);
							text.Font = Enum.Font.SourceSansBold;
							text.Text = translate(args.text);
							text.TextColor3 = color3_fromrgb(78, 77, 84);
							text.TextSize = 15.000;

							local old = update_color; update_color = function(position, color)
								if (is_window_visible) then
									text.TextColor3 = colors[6];
								end;

								return old(position, color);
							end;

							local old = set_language; set_language = function()
								text.Text = translate(args.text);

								return old();
							end;

						end;

						function functions:toggle(args)
							local functions, toggle = elements:toggle(args);
							
							toggle.Parent = group;
							toggle.Size = udim2_new(1, 0, 0, 35);

							return functions, toggle;
						end;

						function functions:textbox(args)
							local functions, textbox = elements:textbox(args);
							
							textbox.Parent = group;
							textbox.Size = udim2_new(1, 0, 0, 35);

							return functions, textbox;
						end;

						function functions:slider(args)
							local functions, slider = elements:slider(args);

							slider.Parent = group;
							slider.Position = udim2_new(-5.58930076e-08, 0, 0.246102229, 0);
							slider.Size = udim2_new(1, 0, 0, 75);

							return functions, slider;
						end;

						function functions:dropdown(args)
							local functions, dropdown = elements:dropdown(args);

							dropdown.Parent = group;
							dropdown.Size = udim2_new(1, 0, 0, 35);

							return functions, dropdown;
						end;

						function functions:colorpicker(args)
							local functions, colorpicker = elements:colorpicker(args);
							
							colorpicker.Parent = group;
							colorpicker.Size = udim2_new(1, 0, 0, 35);

							return functions, colorpicker;
						end;

						return functions;
					end;

					return functions;
				end;

				return functions;
			end;

			if (tab_args.type == 'skin changer') then
				flags.__INVENTORYCHANGER = {};
				
				local on_save;
				local icons_scale = tab_args.icons_scale;
				
				local stattrak_enabled;
				local stattrak_kills = 0;

				local Frame_2 = draw('Frame');
				local container = draw('ScrollingFrame');
				local container_layout = draw('UIGridLayout');
				local Frame_3 = draw('Frame');
				local TextButton = draw('TextButton');
				local TextLabel = draw('TextLabel');
				local ImageLabel = draw('ImageLabel');
				local TextButton_2 = draw('TextButton');
				local TextLabel_2 = draw('TextLabel');
				local ImageLabel_2 = draw('ImageLabel');
				local container = draw('ScrollingFrame');
				local Frame123 = draw('Frame')
				local UICorner123 = draw('UICorner')
				local TextButton123 = draw('TextButton')
				local TextLabel123 = draw('TextLabel')
				local TextLabel_2123 = draw('TextLabel')
				local Frame_2123 = draw('Frame')
				local UICorner_2123 = draw('UICorner')
				local Frame_3123 = draw('Frame')
				local UICorner_3123 = draw('UICorner')
				local items_page = draw('Frame')
				local UICorner321 = draw('UICorner')
				local ScrollingFrame321 = draw('ScrollingFrame')
				local UIGridLayout321 = draw('UIGridLayout')
				local ScrollingFrame3212 = draw('ScrollingFrame')
				local UIGridLayout3212 = draw('UIGridLayout')
				local ScrollingFrame3213 = draw('ScrollingFrame')
				local UIGridLayout3213 = draw('UIGridLayout')
				local TextButton_2321 = draw('TextButton')
				local TextLabel_2321 = draw('TextLabel')
				local UICorner_4321 = draw('UICorner')
				local ImageLabel_2321 = draw('ImageLabel')
				local Frame_4321 = draw('Frame')
				local UICorner_5321 = draw('UICorner')
				local TextBox321 = draw('TextBox')
				local asdFrame = draw('Frame')
				local asdUICorner = draw('UICorner')
				local asdTextButton = draw('TextButton')
				local asdTextLabel = draw('TextLabel')
				local asdUICorner_2 = draw('UICorner')
				local asdTextButton_2 = draw('TextButton')
				local asdUICorner_3 = draw('UICorner')
				local asdImageLabel = draw('ImageLabel')
				local asdTextLabel_2 = draw('TextLabel')
				local asdTextLabel_3 = draw('TextLabel')
				local asdFrame_2 = draw('Frame')
				local asdUICorner_4 = draw('UICorner')
				local asdFrame_3 = draw('Frame')
				local asdTextButton_3 = draw('TextButton')
				local asdTextLabel_4 = draw('TextLabel')
				local asdUICorner_5 = draw('UICorner')

				local id = 0;
				local is_editing;
				local function add_skin(args)
					local data = tab_args.skins[args.skin];

					id += 1;
					local to_send = args;
					to_send.item = data.item;
					to_send.id = id;
					tab_args.on_add(to_send);

					table_insert(flags.__INVENTORYCHANGER, (function()
						local list = {skin = args.skin};

						if (tab_args.skins_rules.stattrak and args.stattrak) then
							list.stattrak = args.stattrak;
						end;

						return (list);
					end)());

					local TextButton = draw('TextButton')
					local UICorner = draw('UICorner')
					local Frame = draw('Frame')
					local UICorner_2 = draw('UICorner')
					local F321rame_2 = draw('Frame')
					local TextLabel = draw('TextLabel')
					local Frame_3 = draw('Frame')
					local UICorner_3 = draw('UICorner')
					local Frame_4 = draw('Frame')
					local Frame_5 = draw('Frame')
					local UICorner_4 = draw('UICorner')
					local Frame_6 = draw('Frame')
					local Frame_7 = draw('Frame')
					local TextButton_2 = draw('TextButton')
					local ImageButton = draw('ImageLabel')
					local TextButton_3 = draw('TextButton')
					local ImageButton_2 = draw('ImageLabel')
					local Frame_8 = draw('Frame')
					local UICorner_5 = draw('UICorner')
					local Frame_9 = draw('Frame')
					local Frame_10 = draw('Frame')
					local TextLabel_2 = draw('TextLabel')
					local ImageLabel = draw('ImageLabel')

					TextButton.Parent = container
					TextButton.BackgroundColor3 = Color3.fromRGB(26, 26, 34)
					TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
					TextButton.BorderSizePixel = 0
					TextButton.Size = UDim2.new(0.206679896, 0, 0.349585861, 0)
					TextButton.AutoButtonColor = false
					TextButton.Font = Enum.Font.SourceSans
					TextButton.Text = ''
					TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
					TextButton.TextSize = 14.000

					UICorner.CornerRadius = UDim.new(0, 5)
					UICorner.Parent = TextButton

					Frame.Parent = TextButton
					Frame.BackgroundColor3 = Color3.fromRGB(37, 37, 49)
					Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
					Frame.BorderSizePixel = 0
					Frame.Position = UDim2.new(0, 0, 0.84799999, 0)
					Frame.Size = UDim2.new(1, 0, 0.151999995, 0)

					UICorner_2.CornerRadius = UDim.new(0, 5)
					UICorner_2.Parent = Frame

					F321rame_2.Parent = Frame
					F321rame_2.BackgroundColor3 = Color3.fromRGB(37, 37, 49)
					F321rame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
					F321rame_2.BorderSizePixel = 0
					F321rame_2.Size = UDim2.new(1, 0, 0.5, 0)

					TextLabel.Parent = Frame
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
					TextLabel.BorderSizePixel = 0
					TextLabel.Size = UDim2.new(1, 0, 1, 0)
					TextLabel.Font = Enum.Font.SourceSansBold
					TextLabel.Text = args.skin;
					TextLabel.TextColor3 = Color3.fromRGB(237, 234, 255)
					TextLabel.TextSize = 15.000

					Frame_3.Parent = TextButton
					Frame_3.BackgroundColor3 = tab_args.rarities[data.rarity].color;
					Frame_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
					Frame_3.BorderSizePixel = 0
					Frame_3.Size = UDim2.new(1, 0, 0, 5)
					Frame_3.ZIndex = 2

					UICorner_3.Parent = Frame_3

					Frame_4.Parent = Frame_3
					Frame_4.BackgroundColor3 = tab_args.rarities[data.rarity].color
					Frame_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
					Frame_4.BorderSizePixel = 0
					Frame_4.Position = UDim2.new(0, 0, 0.5, 0)
					Frame_4.Size = UDim2.new(1, 0, 0.5, 0)

					Frame_5.Parent = Frame_4
					Frame_5.BackgroundColor3 = Color3.fromRGB(37, 37, 49)
					Frame_5.BorderColor3 = Color3.fromRGB(0, 0, 0)
					Frame_5.BorderSizePixel = 0
					Frame_5.Position = UDim2.new(0, 85, 1, 0)
					Frame_5.Size = UDim2.new(0, 57, 0, 28)
					Frame_5.ZIndex = 2

					UICorner_4.Parent = Frame_5

					Frame_6.Parent = Frame_5
					Frame_6.BackgroundColor3 = Color3.fromRGB(37, 37, 49)
					Frame_6.BorderColor3 = Color3.fromRGB(0, 0, 0)
					Frame_6.BorderSizePixel = 0
					Frame_6.Size = UDim2.new(1, 0, 0.5, 0)
					Frame_6.ZIndex = 2

					Frame_7.Parent = Frame_5
					Frame_7.BackgroundColor3 = Color3.fromRGB(37, 37, 49)
					Frame_7.BorderColor3 = Color3.fromRGB(0, 0, 0)
					Frame_7.BorderSizePixel = 0
					Frame_7.Position = UDim2.new(0.5, 0, 0.5, 0)
					Frame_7.Size = UDim2.new(0.5, 0, 0.5, 0)
					Frame_7.ZIndex = 2
					
					local function on_delete()
						local list = {skin = args.skin};

						if (tab_args.skins_rules.stattrak) then
							list.stattrak = (args.stattrak or 0);
						end;

						for index, data in flags.__INVENTORYCHANGER do
							if (typeof(data) ~= 'table') then continue; end;

							local all_good = true;
							for index, value in list do
								if (data[index] ~= value) then
									all_good = false;
								end;
							end;

							if (all_good) then
								tab_args.on_remove({id = to_send.id});
								flags.__INVENTORYCHANGER[index] = nil;

								return TextButton:Destroy();
							end;
						end;
					end;

					TextButton_2.Parent = Frame_5
					TextButton_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextButton_2.BackgroundTransparency = 1.000
					TextButton_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
					TextButton_2.BorderSizePixel = 0
					TextButton_2.Size = UDim2.new(0.5, 0, 1, 0)
					TextButton_2.ZIndex = 2
					TextButton_2.Font = Enum.Font.SourceSans
					TextButton_2.Text = ''
					TextButton_2.TextColor3 = Color3.fromRGB(0, 0, 0)
					TextButton_2.TextSize = 14.000
					TextButton_2.MouseButton1Click:Connect(function()
						is_editing = true;
						Frame_2.Visible = false;
						asdFrame.Visible = true;
						
						on_save = function()
							on_delete();
							add_skin({skin = args.skin; stattrak = (stattrak_enabled and stattrak_kills)});
							
							is_editing = false;
							Frame_2.Visible = true;
							asdFrame.Visible = false;
						end;
					end);

					ImageButton.Parent = TextButton_2
					ImageButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					ImageButton.BackgroundTransparency = 1.000
					ImageButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
					ImageButton.BorderSizePixel = 0
					ImageButton.Position = UDim2.new(0.150000006, 0, 0.150000006, 0)
					ImageButton.Size = UDim2.new(0.699999988, 0, 0.699999988, 0)
					ImageButton.ZIndex = 2
					ImageButton.Image = 'rbxassetid://91149022927258'

					TextButton_3.Parent = Frame_5
					TextButton_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextButton_3.BackgroundTransparency = 1.000
					TextButton_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
					TextButton_3.BorderSizePixel = 0
					TextButton_3.Position = UDim2.new(0.5, 0, 0, 0)
					TextButton_3.Size = UDim2.new(0.5, 0, 1, 0)
					TextButton_3.ZIndex = 2
					TextButton_3.Font = Enum.Font.SourceSans
					TextButton_3.Text = ''
					TextButton_3.TextColor3 = Color3.fromRGB(0, 0, 0)
					TextButton_3.TextSize = 14.000
					TextButton_3.MouseButton1Click:Connect(on_delete);

					ImageButton_2.Parent = TextButton_3
					ImageButton_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					ImageButton_2.BackgroundTransparency = 1.000
					ImageButton_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
					ImageButton_2.BorderSizePixel = 0
					ImageButton_2.Position = UDim2.new(0.150000006, 0, 0.150000006, 0)
					ImageButton_2.Size = UDim2.new(0.699999988, 0, 0.699999988, 0)
					ImageButton_2.ZIndex = 2
					ImageButton_2.Image = 'rbxassetid://90324326473801'
					ImageButton_2.ImageColor3 = colors[1];

					if (tab_args.skins_rules.stattrak and args.stattrak) then
						Frame_8.Parent = Frame_4
						Frame_8.BackgroundColor3 = Color3.fromRGB(37, 37, 49)
						Frame_8.BorderColor3 = Color3.fromRGB(0, 0, 0)
						Frame_8.BorderSizePixel = 0
						Frame_8.Position = UDim2.new(0, 0, 1, 0)
						Frame_8.Size = UDim2.new(0, 45, 0, 28)
						Frame_8.ZIndex = 2

						UICorner_5.Parent = Frame_8

						Frame_9.Parent = Frame_8
						Frame_9.BackgroundColor3 = Color3.fromRGB(37, 37, 49)
						Frame_9.BorderColor3 = Color3.fromRGB(0, 0, 0)
						Frame_9.BorderSizePixel = 0
						Frame_9.Size = UDim2.new(1, 0, 0.5, 0)
						Frame_9.ZIndex = 2

						Frame_10.Parent = Frame_8
						Frame_10.BackgroundColor3 = Color3.fromRGB(37, 37, 49)
						Frame_10.BorderColor3 = Color3.fromRGB(0, 0, 0)
						Frame_10.BorderSizePixel = 0
						Frame_10.Position = UDim2.new(0, 0, 0.5, 0)
						Frame_10.Size = UDim2.new(0.5, 0, 0.5, 0)
						Frame_10.ZIndex = 2

						TextLabel_2.Parent = Frame_8
						TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel_2.BackgroundTransparency = 1.000
						TextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
						TextLabel_2.BorderSizePixel = 0
						TextLabel_2.Size = UDim2.new(1, 0, 1, 0)
						TextLabel_2.ZIndex = 2
						TextLabel_2.Font = Enum.Font.SourceSansBold
						TextLabel_2.Text = args.stattrak;
						TextLabel_2.TextColor3 = Color3.fromRGB(237, 234, 255)
						TextLabel_2.TextSize = 17.000
					end;

					ImageLabel.Parent = TextButton
					ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					ImageLabel.BackgroundTransparency = 1.000
					ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
					ImageLabel.BorderSizePixel = 0
					ImageLabel.Position = UDim2.new(0.5, -((90 * icons_scale.x) / 2), 0.5, -((90 * icons_scale.y) / 2))
					ImageLabel.Size = udim2_fromoffset((90 * icons_scale.x), (90 * icons_scale.y));
					ImageLabel.Image = data.icon;
				end;

				local function create_button(args)
					local button_name = args.name;
					
					local TextButton321 = draw('TextButton')
					local UICorner_2321 = draw('UICorner')
					local Frame_2321 = draw('Frame')
					local UICorner_3321 = draw('UICorner')
					local Frame_3321 = draw('Frame')
					local TextLabel321 = draw('TextLabel')
					local ImageLabel321 = draw('ImageLabel')

					TextButton321.BackgroundColor3 = Color3.fromRGB(26, 26, 34)
					TextButton321.BorderColor3 = Color3.fromRGB(0, 0, 0)
					TextButton321.BorderSizePixel = 0
					TextButton321.Size = UDim2.new(0.206679896, 0, 0.349585861, 0)
					TextButton321.AutoButtonColor = false
					TextButton321.Font = Enum.Font.SourceSans
					TextButton321.Text = ''
					TextButton321.TextColor3 = Color3.fromRGB(0, 0, 0)
					TextButton321.TextSize = 14.000

					UICorner_2321.CornerRadius = UDim.new(0, 5)
					UICorner_2321.Parent = TextButton321

					Frame_2321.Parent = TextButton321
					Frame_2321.BackgroundColor3 = Color3.fromRGB(37, 37, 49)
					Frame_2321.BorderColor3 = Color3.fromRGB(0, 0, 0)
					Frame_2321.BorderSizePixel = 0
					Frame_2321.Position = UDim2.new(0, 0, 0.84799999, 0)
					Frame_2321.Size = UDim2.new(1, 0, 0.151999995, 0)

					UICorner_3321.CornerRadius = UDim.new(0, 5)
					UICorner_3321.Parent = Frame_2321

					Frame_3321.Parent = Frame_2321
					Frame_3321.BackgroundColor3 = Color3.fromRGB(37, 37, 49)
					Frame_3321.BorderColor3 = Color3.fromRGB(0, 0, 0)
					Frame_3321.BorderSizePixel = 0
					Frame_3321.Size = UDim2.new(1, 0, 0.5, 0)

					TextLabel321.Parent = Frame_2321
					TextLabel321.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel321.BackgroundTransparency = 1.000
					TextLabel321.BorderColor3 = Color3.fromRGB(0, 0, 0)
					TextLabel321.BorderSizePixel = 0
					TextLabel321.Size = UDim2.new(1, 0, 1, 0)
					TextLabel321.Font = Enum.Font.SourceSansBold
					TextLabel321.Text = button_name
					TextLabel321.TextColor3 = Color3.fromRGB(237, 234, 255)
					TextLabel321.TextSize = 15.000

					ImageLabel321.Parent = TextButton321
					ImageLabel321.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					ImageLabel321.BackgroundTransparency = 1.000
					ImageLabel321.BorderColor3 = Color3.fromRGB(0, 0, 0)
					ImageLabel321.BorderSizePixel = 0
					ImageLabel321.Position = UDim2.new(0.5, -((90 * icons_scale.x) / 2), 0.5, -((90 * icons_scale.y) / 2))
					ImageLabel321.Size = udim2_fromoffset((90 * icons_scale.x), (90 * icons_scale.y));
					ImageLabel321.Image = args.icon;

					if (args.rarity) then
						local main_frame = draw('Frame');
						local round_remover = draw('Frame');

						main_frame.Parent = TextButton321
						main_frame.BackgroundColor3 = tab_args.rarities[args.rarity].color;
						main_frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
						main_frame.BorderSizePixel = 0
						main_frame.Size = UDim2.new(1, 0, 0, 5)
						main_frame.ZIndex = 2

						round(main_frame, nil, 8);

						round_remover.Parent = main_frame
						round_remover.BackgroundColor3 = tab_args.rarities[args.rarity].color
						round_remover.BorderColor3 = Color3.fromRGB(0, 0, 0)
						round_remover.BorderSizePixel = 0
						round_remover.Position = UDim2.new(0, 0, 0.5, 0)
						round_remover.Size = UDim2.new(1, 0, 0.5, 0)
					end;
					
					local hook; hook = run.Heartbeat:Connect(function()
						if (not TextButton321) then
							return hook:Disconnect();
						end;
						
						if (is_window_visible and TextButton321.Parent.Visible) then
							local search = TextBox321.Text;
							if (#search > 0) then
								if (string_find(string_lower(button_name), string_lower(search))) then
									TextButton321.Visible = true;
								else
									TextButton321.Visible = false;
								end;
							else
								TextButton321.Visible = true;
							end;
						end;
					end);
					table_insert(connections, hook);

					return (TextButton321);
				end;

				local old = set_config; set_config = function(config)
					fspawn(function()
						tab_args.on_clear();
						for _, skin in container:GetChildren() do
							if (skin:IsA('TextButton')) then
								skin:Destroy();
							end;
						end;

						for index, data in flags.__INVENTORYCHANGER do
								if (index ~= 'enabled') then
								add_skin(data);
							end;
						end;

						if (flags.__INVENTORYCHANGER.enabled) then
							tween:Create(TextLabel123, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(233, 233, 233)}):Play();
							tween:Create(Frame_3123, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Position = udim2_new(1, -17, 0, 2); BackgroundColor3 = colors[1]}):Play();
						else
							tween:Create(TextLabel123, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
							tween:Create(Frame_3123, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Position = udim2_new(0, 3, 0, 2); BackgroundColor3 = color3_fromrgb(47, 45, 65)}):Play();
						end;
					end);

					return old(config);
				end;

				skins_page.Parent = main_frame;
				skins_page.Visible = false;
				skins_page.BackgroundTransparency = 1;
				skins_page.BorderColor3 = color3_fromrgb(0, 0, 0);
				skins_page.BorderSizePixel = 0;
				skins_page.ClipsDescendants = true;
				skins_page.Position = udim2_new(0.100000001, 0, 0.0329999998, 0);
				skins_page.Size = udim2_new(0.879999995, 0, 0.935000002, 0);

				round(skins_page, nil, 3);

				Frame_2.Parent = skins_page;
				Frame_2.BackgroundColor3 = color3_fromrgb(23, 23, 30);
				Frame_2.BorderColor3 = color3_fromrgb(0, 0, 0);
				Frame_2.BorderSizePixel = 0;
				Frame_2.Size = udim2_new(1, 0, 1, 0);

				round(Frame_2, nil, 3);

				container.Parent = Frame_2;
				container.BackgroundTransparency = 1;
				container.BorderSizePixel = 0;
				container.Position = udim2_new(0, 10, 0, 61);
				container.Size = udim2_new(1, -20, 0.872, -10);
				container.CanvasSize = udim2_new(0, 0, 0, 0);
				container.ScrollBarThickness = 5;

				container_layout.Parent = container;
				container_layout.CellPadding = udim2_new(0, 10, 0, 10);
				container_layout.CellSize = udim2_new(0, 143, 0, 143);
				container_layout.FillDirection = Enum.FillDirection.Horizontal;

				Frame123.Parent = Frame_2;
				Frame123.BackgroundColor3 = Color3.fromRGB(20, 19, 26)
				Frame123.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Frame123.BorderSizePixel = 0
				Frame123.Position = UDim2.new(0, 9, 0, 13)
				Frame123.Size = UDim2.new(0, 142, 0, 35)

				UICorner123.CornerRadius = UDim.new(0, 6)
				UICorner123.Parent = Frame123

				TextButton123.Parent = Frame123
				TextButton123.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextButton123.BackgroundTransparency = 1.000
				TextButton123.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextButton123.BorderSizePixel = 0
				TextButton123.Size = UDim2.new(1, 0, 0, 35)
				TextButton123.AutoButtonColor = false
				TextButton123.Font = Enum.Font.SourceSans
				TextButton123.Text = ''
				TextButton123.TextColor3 = Color3.fromRGB(0, 0, 0)
				TextButton123.TextSize = 14.000

				TextButton123.MouseButton1Click:Connect(function()
					flags.__INVENTORYCHANGER.enabled = not flags.__INVENTORYCHANGER.enabled;

					if (flags.__INVENTORYCHANGER.enabled) then
						tween:Create(TextLabel123, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(233, 233, 233)}):Play();
						tween:Create(Frame_3123, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Position = udim2_new(1, -17, 0, 2); BackgroundColor3 = colors[1]}):Play();
					else
						tween:Create(TextLabel123, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
						tween:Create(Frame_3123, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Position = udim2_new(0, 3, 0, 2); BackgroundColor3 = color3_fromrgb(47, 45, 65)}):Play();
					end;
				end);

				TextLabel123.Parent = TextButton123
				TextLabel123.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextLabel123.BackgroundTransparency = 1.000
				TextLabel123.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextLabel123.BorderSizePixel = 0
				TextLabel123.Position = UDim2.new(0, 10, 0, 0)
				TextLabel123.Size = UDim2.new(1, -10, 1, 0)
				TextLabel123.Font = Enum.Font.SourceSansBold
				TextLabel123.Text = 'Enable'
				TextLabel123.TextColor3 = Color3.fromRGB(78, 77, 84)
				TextLabel123.TextSize = 15.000
				TextLabel123.TextXAlignment = Enum.TextXAlignment.Left

				TextLabel_2123.Parent = TextButton123
				TextLabel_2123.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextLabel_2123.BackgroundTransparency = 1.000
				TextLabel_2123.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextLabel_2123.BorderSizePixel = 0
				TextLabel_2123.Position = UDim2.new(0, 9, 0, 0)
				TextLabel_2123.Size = UDim2.new(1, -80, 1, 0)
				TextLabel_2123.Font = Enum.Font.SourceSansBold
				TextLabel_2123.Text = ''
				TextLabel_2123.TextColor3 = Color3.fromRGB(81, 82, 192)
				TextLabel_2123.TextSize = 15.000
				TextLabel_2123.TextXAlignment = Enum.TextXAlignment.Right

				Frame_2123.Parent = TextButton123
				Frame_2123.BackgroundColor3 = Color3.fromRGB(24, 24, 33)
				Frame_2123.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Frame_2123.BorderSizePixel = 0
				Frame_2123.Position = UDim2.new(1, -53, 0.5, -9)
				Frame_2123.Size = UDim2.new(0, 40, 0, 18)

				UICorner_2123.CornerRadius = UDim.new(1, 0)
				UICorner_2123.Parent = Frame_2123

				Frame_3123.Parent = Frame_2123
				Frame_3123.BackgroundColor3 = Color3.fromRGB(47, 45, 65)
				Frame_3123.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Frame_3123.BorderSizePixel = 0
				Frame_3123.Position = UDim2.new(0, 3, 0, 2)
				Frame_3123.Size = UDim2.new(0, 14, 0, 14)

				UICorner_3123.CornerRadius = UDim.new(1, 0)
				UICorner_3123.Parent = Frame_3123

				Frame_3.Parent = Frame_2;
				Frame_3.BackgroundColor3 = color3_fromrgb(20, 19, 26);
				Frame_3.BorderColor3 = color3_fromrgb(0, 0, 0);
				Frame_3.BorderSizePixel = 0;
				Frame_3.Size = udim2_new(1, 0, 0, 0);

				round(Frame_3, nil, 4);

				TextButton.Parent = Frame_2;
				TextButton.BackgroundColor3 = color3_fromrgb(20, 19, 26);
				TextButton.BorderColor3 = color3_fromrgb(0, 0, 0);
				TextButton.BorderSizePixel = 0;
				TextButton.Position = udim2_new(0, 163, 0, 16);
				TextButton.Size = udim2_new(0, 63, 0, 29);
				TextButton.AutoButtonColor = false;
				TextButton.Font = Enum.Font.SourceSans;
				TextButton.Text = '';
				TextButton.TextColor3 = color3_fromrgb(0, 0, 0);
				TextButton.TextSize = 14;

				for type, category in tab_args.categories do
					local button = create_button({name = type; icon = category.icon});
					button.Parent = ScrollingFrame321;
					button.MouseButton1Click:Connect(function()
						ScrollingFrame321.Visible = false;
						ScrollingFrame3212.Visible = true;

						for _, button in ScrollingFrame3212:GetChildren() do
							if (button:IsA('TextButton')) then
								button:Destroy();
							end;
						end;

						for item, item_data in category.items do
							local button = create_button({name = item; icon = item_data.icon});
							button.Parent = ScrollingFrame3212;
							button.MouseButton1Click:Connect(function()
								ScrollingFrame3212.Visible = false;
								ScrollingFrame3213.Visible = true;

								for _, button in ScrollingFrame3213:GetChildren() do
									if (button:IsA('TextButton')) then
										button:Destroy();
									end;
								end;

								for skin, data in tab_args.skins do
									if (data.item == item) then
										local button = create_button({name = skin; icon = data.icon; rarity = data.rarity});
										button.Parent = ScrollingFrame3213;
										button.MouseButton1Click:Connect(function()
											asdFrame_2.BackgroundColor3 = tab_args.rarities[data.rarity].color;
											asdFrame_3.BackgroundColor3 = asdFrame_2.BackgroundColor3;
											asdTextLabel_3.Text = item;
											asdTextLabel_2.Text = skin;
											asdTextLabel_2.TextColor3 = asdFrame_2.BackgroundColor3;
											asdImageLabel.Image = data.icon;

											on_save = function()
												add_skin({skin = skin; stattrak = (stattrak_enabled and stattrak_kills)});

												Frame_2.Visible = true;
												items_page.Visible = false;
												ScrollingFrame3213.Visible = false;
												ScrollingFrame3212.Visible = false;
												ScrollingFrame321.Visible = false;
												asdFrame.Visible = false;
											end;

											items_page.Visible = false;
											ScrollingFrame3213.Visible = false;
											asdFrame.Visible = true;
										end);
									end;
								end;
							end);
						end;
					end);
				end;

				TextButton.MouseButton1Click:Connect(function()
					ScrollingFrame321.Visible = true;

					Frame_2.Visible = false;
					items_page.Visible = true;
				end);

				TextButton.MouseEnter:Connect(function()
					tween:Create(TextButton, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
				end);

				TextButton.MouseLeave:Connect(function()
					tween:Create(TextButton, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(20, 19, 26)}):Play();
				end);

				TextLabel.Parent = TextButton;
				TextLabel.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				TextLabel.BackgroundTransparency = 1;
				TextLabel.BorderColor3 = color3_fromrgb(0, 0, 0);
				TextLabel.BorderSizePixel = 0;
				TextLabel.Position = udim2_new(0, 32, 0, 0);
				TextLabel.Size = udim2_new(0, 33, 0, 30);
				TextLabel.Font = Enum.Font.SourceSansBold;
				TextLabel.Text = 'Add';
				TextLabel.TextColor3 = color3_fromrgb(237, 234, 255);
				TextLabel.TextSize = 15;
				TextLabel.TextXAlignment = Enum.TextXAlignment.Left;

				round(TextButton, nil, 8);

				ImageLabel.Parent = TextButton;
				ImageLabel.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				ImageLabel.BackgroundTransparency = 1;
				ImageLabel.BorderColor3 = color3_fromrgb(0, 0, 0);
				ImageLabel.BorderSizePixel = 0;
				ImageLabel.Position = udim2_new(0, 4, 0, 4);
				ImageLabel.Size = udim2_new(0, 21, 0, 21);
				ImageLabel.Image = 'rbxassetid://131256358770346';

				TextButton_2.Parent = Frame_2;
				TextButton_2.BackgroundColor3 = color3_fromrgb(20, 19, 26);
				TextButton_2.BorderColor3 = color3_fromrgb(0, 0, 0);
				TextButton_2.BorderSizePixel = 0;
				TextButton_2.Position = udim2_new(0, 235, 0, 16);
				TextButton_2.Size = udim2_new(0, 86, 0, 30);
				TextButton_2.AutoButtonColor = false;
				TextButton_2.Font = Enum.Font.SourceSans;
				TextButton_2.Text = '';
				TextButton_2.TextColor3 = color3_fromrgb(0, 0, 0);
				TextButton_2.TextSize = 14;

				TextButton_2.MouseButton1Click:Connect(function()
					tab_args.on_clear();
					flags.__INVENTORYCHANGER = {
						enabled = flags.__INVENTORYCHANGER.enabled;
					};

					for _, skin in container:GetChildren() do
						if (skin:IsA('TextButton')) then
							skin:Destroy();
						end;
					end;
				end);

				TextButton_2.MouseEnter:Connect(function()
					tween:Create(TextButton_2, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
				end);

				TextButton_2.MouseLeave:Connect(function()
					tween:Create(TextButton_2, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(20, 19, 26)}):Play();
				end);

				TextLabel_2.Parent = TextButton_2;
				TextLabel_2.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				TextLabel_2.BackgroundTransparency = 1;
				TextLabel_2.BorderColor3 = color3_fromrgb(0, 0, 0);
				TextLabel_2.BorderSizePixel = 0;
				TextLabel_2.Position = udim2_new(0, 29, 0, 0);
				TextLabel_2.Size = udim2_new(0, 48, 0, 30);
				TextLabel_2.Font = Enum.Font.SourceSansBold;
				TextLabel_2.Text = 'Clear all';
				TextLabel_2.TextColor3 = color3_fromrgb(237, 234, 255);
				TextLabel_2.TextSize = 15;
				TextLabel_2.TextXAlignment = Enum.TextXAlignment.Left;

				round(TextButton_2, nil, 8);

				ImageLabel_2.Parent = TextButton_2;
				ImageLabel_2.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				ImageLabel_2.BackgroundTransparency = 1;
				ImageLabel_2.BorderColor3 = color3_fromrgb(0, 0, 0);
				ImageLabel_2.BorderSizePixel = 0;
				ImageLabel_2.Position = udim2_new(0, 5, 0, 6);
				ImageLabel_2.Size = udim2_new(0, 17, 0, 17);
				ImageLabel_2.Image = 'rbxassetid://90324326473801';

				items_page.Parent = skins_page
				items_page.Visible = false;
				items_page.BackgroundColor3 = Color3.fromRGB(23, 23, 30)
				items_page.BorderColor3 = Color3.fromRGB(0, 0, 0)
				items_page.BorderSizePixel = 0
				items_page.Size = udim2_new(1, 0, 1, 0)

				UICorner321.CornerRadius = UDim.new(0, 3)
				UICorner321.Parent = items_page

				ScrollingFrame321.Parent = items_page
				ScrollingFrame321.Visible = false;
				ScrollingFrame321.BackgroundTransparency = 1.000
				ScrollingFrame321.BorderSizePixel = 0
				ScrollingFrame321.Position = UDim2.new(0, 10, 0, 61)
				ScrollingFrame321.Size = UDim2.new(1, -20, 0.872470677, -10)
				ScrollingFrame321.CanvasSize = UDim2.new(0, 0, 0, 0)
				ScrollingFrame321.ScrollBarThickness = 5
				ScrollingFrame321.AutomaticCanvasSize = Enum.AutomaticSize.Y;

				UIGridLayout321.Parent = ScrollingFrame321
				UIGridLayout321.SortOrder = Enum.SortOrder.LayoutOrder
				UIGridLayout321.CellPadding = UDim2.new(0, 10, 0, 10)
				UIGridLayout321.CellSize = UDim2.new(0, 143, 0, 143)
				UIGridLayout321.FillDirectionMaxCells = 123

				ScrollingFrame3212.Parent = items_page
				ScrollingFrame3212.Visible = false;
				ScrollingFrame3212.BackgroundTransparency = 1.000
				ScrollingFrame3212.BorderSizePixel = 0
				ScrollingFrame3212.Position = UDim2.new(0, 10, 0, 61)
				ScrollingFrame3212.Size = UDim2.new(1, -20, 0.872470677, -10)
				ScrollingFrame3212.CanvasSize = UDim2.new(0, 0, 0, 0)
				ScrollingFrame3212.ScrollBarThickness = 5
				ScrollingFrame3212.AutomaticCanvasSize = Enum.AutomaticSize.Y;

				UIGridLayout3212.Parent = ScrollingFrame3212
				UIGridLayout3212.SortOrder = Enum.SortOrder.LayoutOrder
				UIGridLayout3212.CellPadding = UDim2.new(0, 10, 0, 10)
				UIGridLayout3212.CellSize = UDim2.new(0, 143, 0, 143)
				UIGridLayout3212.FillDirectionMaxCells = 123

				ScrollingFrame3213.Parent = items_page
				ScrollingFrame3213.Visible = false;
				ScrollingFrame3213.BackgroundTransparency = 1.000
				ScrollingFrame3213.BorderSizePixel = 0
				ScrollingFrame3213.Position = UDim2.new(0, 10, 0, 61)
				ScrollingFrame3213.Size = UDim2.new(1, -20, 0.872470677, -10)
				ScrollingFrame3213.CanvasSize = UDim2.new(0, 0, 0, 0)
				ScrollingFrame3213.ScrollBarThickness = 5;
				ScrollingFrame3213.AutomaticCanvasSize = Enum.AutomaticSize.Y;

				UIGridLayout3213.Parent = ScrollingFrame3213
				UIGridLayout3213.SortOrder = Enum.SortOrder.LayoutOrder
				UIGridLayout3213.CellPadding = UDim2.new(0, 10, 0, 10)
				UIGridLayout3213.CellSize = UDim2.new(0, 143, 0, 143)
				UIGridLayout3213.FillDirectionMaxCells = 123

				TextButton_2321.Parent = items_page
				TextButton_2321.BackgroundColor3 = Color3.fromRGB(20, 19, 26)
				TextButton_2321.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextButton_2321.BorderSizePixel = 0
				TextButton_2321.Position = UDim2.new(0, 10, 0, 16)
				TextButton_2321.Size = UDim2.new(0.0975215435, 7, -0.0193578061, 38)
				TextButton_2321.AutoButtonColor = false
				TextButton_2321.Font = Enum.Font.SourceSans
				TextButton_2321.Text = ''
				TextButton_2321.TextColor3 = Color3.fromRGB(0, 0, 0)
				TextButton_2321.TextSize = 14.000

				TextButton_2321.MouseButton1Click:Connect(function()
					if (ScrollingFrame3213.Visible) then
						ScrollingFrame3213.Visible = false;
						ScrollingFrame3212.Visible = true;
					elseif (ScrollingFrame3212.Visible) then
						ScrollingFrame3212.Visible = false;
						ScrollingFrame321.Visible = true;
					elseif (ScrollingFrame321.Visible) then
						ScrollingFrame321.Visible = false;
						items_page.Visible = false;
						Frame_2.Visible = true;
					end;
				end);

				TextButton_2321.MouseEnter:Connect(function()
					tween:Create(TextButton_2321, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
				end);

				TextButton_2321.MouseLeave:Connect(function()
					tween:Create(TextButton_2321, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(20, 19, 26)}):Play();
				end);

				TextLabel_2321.Parent = TextButton_2321
				TextLabel_2321.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextLabel_2321.BackgroundTransparency = 1.000
				TextLabel_2321.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextLabel_2321.BorderSizePixel = 0
				TextLabel_2321.Position = UDim2.new(0, 32, 0, 0)
				TextLabel_2321.Size = UDim2.new(0, 33, 0, 30)
				TextLabel_2321.Font = Enum.Font.SourceSansBold
				TextLabel_2321.Text = 'Back'
				TextLabel_2321.TextColor3 = Color3.fromRGB(237, 234, 255)
				TextLabel_2321.TextSize = 15.000
				TextLabel_2321.TextXAlignment = Enum.TextXAlignment.Left

				UICorner_4321.Parent = TextButton_2321

				ImageLabel_2321.Parent = TextButton_2321
				ImageLabel_2321.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				ImageLabel_2321.BackgroundTransparency = 1.000
				ImageLabel_2321.BorderColor3 = Color3.fromRGB(0, 0, 0)
				ImageLabel_2321.BorderSizePixel = 0
				ImageLabel_2321.Position = UDim2.new(0, 6, 0, 6)
				ImageLabel_2321.Size = UDim2.new(0, 17, 0, 17)
				ImageLabel_2321.Image = 'rbxassetid://121823748328084'

				Frame_4321.Parent = items_page
				Frame_4321.BackgroundColor3 = Color3.fromRGB(20, 19, 26)
				Frame_4321.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Frame_4321.BorderSizePixel = 0
				Frame_4321.Position = UDim2.new(0.137643993, 0, 0.0387156121, 0)
				Frame_4321.Size = UDim2.new(0, 528, 0, 30)

				UICorner_5321.Parent = Frame_4321

				TextBox321.Parent = Frame_4321
				TextBox321.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextBox321.BackgroundTransparency = 1.000
				TextBox321.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextBox321.BorderSizePixel = 0
				TextBox321.Position = UDim2.new(0, 9, 0, 0)
				TextBox321.Size = UDim2.new(0.98299998, 0, 0, 30)
				TextBox321.Font = Enum.Font.SourceSansBold
				TextBox321.PlaceholderColor3 = Color3.fromRGB(84, 82, 102)
				TextBox321.PlaceholderText = 'Search'
				TextBox321.Text = ''
				TextBox321.TextColor3 = Color3.fromRGB(255, 255, 255)
				TextBox321.TextSize = 15.000
				TextBox321.TextWrapped = true
				TextBox321.TextXAlignment = Enum.TextXAlignment.Left

				asdFrame.Parent = skins_page;
				asdFrame.Visible = false;
				asdFrame.BackgroundColor3 = Color3.fromRGB(23, 23, 30)
				asdFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdFrame.BorderSizePixel = 0
				asdFrame.Size = UDim2.new(1, 0, 1, 0)

				asdUICorner.CornerRadius = UDim.new(0, 3)
				asdUICorner.Parent = asdFrame

				asdTextButton.Parent = asdFrame
				asdTextButton.BackgroundColor3 = Color3.fromRGB(20, 19, 26)
				asdTextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdTextButton.BorderSizePixel = 0
				asdTextButton.Position = UDim2.new(0, 354, 0, 372)
				asdTextButton.Size = UDim2.new(0.190351263, 7, -0.0193578061, 38)
				asdTextButton.AutoButtonColor = false
				asdTextButton.Font = Enum.Font.SourceSans
				asdTextButton.Text = ''
				asdTextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
				asdTextButton.TextSize = 14.000
				
				asdTextButton.MouseButton1Click:Connect(function()
					if (is_editing) then
						is_editing = false;
						Frame_2.Visible = true;
						asdFrame.Visible = false;
					else
						items_page.Visible = true;
						ScrollingFrame3213.Visible = true;
						asdFrame.Visible = false;
					end;
				end);

				asdTextButton.MouseEnter:Connect(function()
					tween:Create(asdTextButton, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
				end);

				asdTextButton.MouseLeave:Connect(function()
					tween:Create(asdTextButton, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(20, 19, 26)}):Play();
				end);

				asdTextLabel.Parent = asdTextButton
				asdTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				asdTextLabel.BackgroundTransparency = 1.000
				asdTextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdTextLabel.BorderSizePixel = 0
				asdTextLabel.Size = UDim2.new(1, 0, 1, 0)
				asdTextLabel.Font = Enum.Font.SourceSansBold
				asdTextLabel.Text = 'Cancel'
				asdTextLabel.TextColor3 = Color3.fromRGB(237, 234, 255)
				asdTextLabel.TextSize = 15.000

				asdUICorner_2.Parent = asdTextButton

				asdTextButton_2.Parent = asdFrame
				asdTextButton_2.BackgroundColor3 = Color3.fromRGB(26, 26, 34)
				asdTextButton_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdTextButton_2.BorderSizePixel = 0
				asdTextButton_2.Position = UDim2.new(0.0160049759, 0, 0.0241972189, 0)
				asdTextButton_2.Size = UDim2.new(0, 265, 0, 265)
				asdTextButton_2.AutoButtonColor = false
				asdTextButton_2.Font = Enum.Font.SourceSans
				asdTextButton_2.Text = ''
				asdTextButton_2.TextColor3 = Color3.fromRGB(0, 0, 0)
				asdTextButton_2.TextSize = 14.000

				asdUICorner_3.CornerRadius = UDim.new(0, 5)
				asdUICorner_3.Parent = asdTextButton_2

				asdImageLabel.Parent = asdTextButton_2
				asdImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				asdImageLabel.BackgroundTransparency = 1.000
				asdImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdImageLabel.BorderSizePixel = 0
				asdImageLabel.Position = UDim2.new(0.5, -((167 * icons_scale.x) / 2), 0.5, -((167 * icons_scale.y) / 2))
				asdImageLabel.Size = udim2_fromoffset((167 * icons_scale.x), (167 * icons_scale.y));
				asdImageLabel.Image = 'rbxassetid://16368097417'

				asdTextLabel_2.Parent = asdTextButton_2
				asdTextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				asdTextLabel_2.BackgroundTransparency = 1.000
				asdTextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdTextLabel_2.BorderSizePixel = 0
				asdTextLabel_2.Position = UDim2.new(0.0339622647, 0, 0.906807721, 0)
				asdTextLabel_2.Size = UDim2.new(0.96603775, 0, 0.0500000007, 0)
				asdTextLabel_2.Font = Enum.Font.SourceSansBold
				asdTextLabel_2.Text = 'Skin Name'
				asdTextLabel_2.TextColor3 = Color3.fromRGB(60, 60, 140)
				asdTextLabel_2.TextSize = 15.000
				asdTextLabel_2.TextXAlignment = Enum.TextXAlignment.Left

				asdTextLabel_3.Parent = asdTextLabel_2
				asdTextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				asdTextLabel_3.BackgroundTransparency = 1.000
				asdTextLabel_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdTextLabel_3.BorderSizePixel = 0
				asdTextLabel_3.Position = UDim2.new(0, 0, -1, 0)
				asdTextLabel_3.Size = UDim2.new(1, 0, 1, 0)
				asdTextLabel_3.Font = Enum.Font.SourceSansBold
				asdTextLabel_3.Text = 'Item Name'
				asdTextLabel_3.TextColor3 = Color3.fromRGB(237, 234, 255)
				asdTextLabel_3.TextSize = 15.000
				asdTextLabel_3.TextXAlignment = Enum.TextXAlignment.Left

				asdFrame_2.Parent = asdTextButton_2
				asdFrame_2.BackgroundColor3 = Color3.fromRGB(60, 60, 140)
				asdFrame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdFrame_2.BorderSizePixel = 0
				asdFrame_2.Size = UDim2.new(1, 0, 0, 5)
				asdFrame_2.ZIndex = 2

				asdUICorner_4.Parent = asdFrame_2

				asdFrame_3.Parent = asdFrame_2
				asdFrame_3.BackgroundColor3 = Color3.fromRGB(60, 60, 140)
				asdFrame_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdFrame_3.BorderSizePixel = 0
				asdFrame_3.Position = UDim2.new(0, 0, 0.5, 0)
				asdFrame_3.Size = UDim2.new(1, 0, 0.5, 0)

				asdTextButton_3.Parent = asdFrame
				asdTextButton_3.BackgroundColor3 = colors[1]
				asdTextButton_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdTextButton_3.BorderSizePixel = 0
				asdTextButton_3.Position = UDim2.new(0, 487, 0, 372)
				asdTextButton_3.Size = UDim2.new(0.190351263, 7, -0.0193578061, 38)
				asdTextButton_3.AutoButtonColor = false
				asdTextButton_3.Font = Enum.Font.SourceSans
				asdTextButton_3.Text = ''
				asdTextButton_3.TextColor3 = Color3.fromRGB(0, 0, 0)
				asdTextButton_3.TextSize = 14.000

				asdTextButton_3.MouseButton1Click:Connect(function()
					if (on_save) then
						on_save();
						on_save = nil;
					end;
				end);

				asdTextButton_3.MouseEnter:Connect(function()
					tween:Create(asdTextButton_3, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(20, 19, 26)}):Play();
				end);

				asdTextButton_3.MouseLeave:Connect(function()
					tween:Create(asdTextButton_3, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
				end);

				asdTextLabel_4.Parent = asdTextButton_3
				asdTextLabel_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				asdTextLabel_4.BackgroundTransparency = 1.000
				asdTextLabel_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
				asdTextLabel_4.BorderSizePixel = 0
				asdTextLabel_4.Size = UDim2.new(1, 0, 1, 0)
				asdTextLabel_4.Font = Enum.Font.SourceSansBold
				asdTextLabel_4.Text = 'Save'
				asdTextLabel_4.TextColor3 = Color3.fromRGB(237, 234, 255)
				asdTextLabel_4.TextSize = 15.000

				asdUICorner_5.Parent = asdTextButton_3
				
				local holder = draw('Frame');
				local layout = draw('UIListLayout');
				
				holder.Parent = asdFrame;
				holder.AutomaticSize = Enum.AutomaticSize.Y;
				holder.BackgroundColor3 = Color3.fromRGB(20, 19, 26)
				holder.BorderColor3 = Color3.fromRGB(0, 0, 0)
				holder.BorderSizePixel = 0
				holder.Position = UDim2.new(0.462547988, 0, 0.0241972189, 0)
				holder.Size = UDim2.new(0.518000007, 0, 0, 0)

				layout.Parent = holder

				round(holder, nil, 4);
				
				do
					local toggle = draw('TextButton');
					local text = draw('TextLabel');
					local path = draw('Frame');
					local circle = draw('Frame');

					toggle.Parent = holder;
					toggle.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					toggle.BackgroundTransparency = 1.000;
					toggle.BorderColor3 = color3_fromrgb(0, 0, 0);
					toggle.BorderSizePixel = 0;
					toggle.Position = udim2_new(0, 5, 0, 170);
					toggle.Size = udim2_new(1, -15, 0, 35);
					toggle.AutoButtonColor = false;
					toggle.Font = Enum.Font.SourceSans;
					toggle.Text = '';
					toggle.TextColor3 = color3_fromrgb(0, 0, 0);
					toggle.TextSize = 14.000;

					text.Parent = toggle;
					text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					text.BackgroundTransparency = 1;
					text.BorderColor3 = color3_fromrgb(0, 0, 0);
					text.BorderSizePixel = 0;
					text.Position = udim2_new(0, 10, 0, 0);
					text.Size = udim2_new(1, -10, 1, 0);
					text.Font = Enum.Font.SourceSansBold;
					text.Text = 'StatTrak';
					text.TextColor3 = (stattrak_enabled and color3_fromrgb(233, 233, 233) or color3_fromrgb(78, 77, 84));
					text.TextSize = 15;
					text.TextXAlignment = Enum.TextXAlignment.Left;

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							text.TextColor3 = (stattrak_enabled and color3_fromrgb(233, 233, 233) or colors[6]);
						end;

						return old(position, color);
					end;

					local old = set_language; set_language = function()
						text.Text = translate('StatTrak');

						return old();
					end;

					path.Parent = toggle;
					path.BackgroundColor3 = color3_fromrgb(24, 24, 33);
					path.BorderColor3 = color3_fromrgb(0, 0, 0);
					path.BorderSizePixel = 0;
					path.Position = udim2_new(1, -42, 0.5, -9);
					path.Size = udim2_new(0, 40, 0, 18);

					round(path, 1);

					circle.Parent = path;
					circle.BackgroundColor3 = (stattrak_enabled and color3_fromrgb(92, 87, 191) or color3_fromrgb(47, 45, 65));
					circle.BorderColor3 = color3_fromrgb(0, 0, 0);
					circle.BorderSizePixel = 0;
					circle.Position = (stattrak_enabled and udim2_new(1, -17, 0, 2) or udim2_new(0, 3, 0, 2));
					circle.Size = udim2_new(0, 14, 0, 14);

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							circle.BackgroundColor3 = (stattrak_enabled and colors[1] or color3_fromrgb(47, 45, 65));
						end;

						return old(position, color);
					end;

					round(circle, 1);

					table_insert(connections, toggle.MouseButton1Click:Connect(function()
						stattrak_enabled = not stattrak_enabled;

						if (stattrak_enabled) then
							tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(233, 233, 233)}):Play();
							tween:Create(circle, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Position = udim2_new(1, -17, 0, 2); BackgroundColor3 = colors[1]}):Play();
						else
							tween:Create(text, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[6]}):Play();
							tween:Create(circle, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Position = udim2_new(0, 3, 0, 2); BackgroundColor3 = color3_fromrgb(47, 45, 65)}):Play();
						end;
					end));
				end;

				do
					local dragging;

					local slider = draw('TextButton');
					local text = draw('TextLabel');
					local custom_value = draw('TextBox');
					local path = draw('Frame');
					local positive_progress = draw('Frame');
					local negative_progress = draw('Frame');
					local positive_circle = draw('Frame');
					local negative_circle = draw('Frame');
					local minus = draw('TextButton');
					local plus = draw('TextButton');

					slider.Parent = holder;
					slider.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					slider.BackgroundTransparency = 1.000;
					slider.BorderColor3 = color3_fromrgb(0, 0, 0);
					slider.BorderSizePixel = 0;
					slider.Position = udim2_new(0, 0, 0, 200);
					slider.Size = udim2_new(1, 0, 0, 75);
					slider.AutoButtonColor = false;
					slider.Font = Enum.Font.SourceSans;
					slider.Text = '';
					slider.TextColor3 = color3_fromrgb(0, 0, 0);
					slider.TextSize = 14.000;

					local function update(...)
						local percent, value;

						if (typeof(...) == 'Vector2') then
							percent = (math_clamp(((...).X - path.AbsolutePosition.X) / path.AbsoluteSize.X, 0, 1) * 100);
							value = (1000 * (percent / 100));
						elseif (typeof(...) == 'number') then
							percent = (((...) / 1000) * 100);
							value = (...);	
						else
							return;
						end;

						value = math_round(value);

						stattrak_kills = value;
						custom_value.Text = (value .. ' ');

						tween:Create(positive_progress, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {Size = udim2_new(math_clamp((percent / 100), 0, 1), 0, 1, 0)}):Play();
					end; update(stattrak_kills);

					table_insert(connections, slider.MouseButton1Down:Connect(function()
						dragging = true;

						update(uis:GetMouseLocation());
					end));

					table_insert(connections, uis.InputEnded:Connect(function(input)
						if (input.UserInputType == Enum.UserInputType.MouseButton1) or (input.UserInputType == Enum.UserInputType.Touch) then
							dragging = false;
						end;
					end));

					table_insert(connections, uis.InputChanged:Connect(function(input)
						if (not is_window_visible) then return; end;
						if (dragging and ((input.UserInputType == Enum.UserInputType.MouseMovement) or (input.UserInputType == Enum.UserInputType.Touch))) then
							update(uis:GetMouseLocation());
						end;
					end));

					text.Parent = slider;
					text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					text.BackgroundTransparency = 1.000;
					text.BorderColor3 = color3_fromrgb(0, 0, 0);
					text.BorderSizePixel = 0;
					text.Position = udim2_new(0, 10, 0, 0);
					text.Size = udim2_new(1, 0, 0, 35);
					text.Font = Enum.Font.SourceSansBold;
					text.Text = 'Kills';
					text.TextColor3 = color3_fromrgb(78, 77, 84);
					text.TextSize = 15.000;
					text.TextXAlignment = Enum.TextXAlignment.Left;

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							text.TextColor3 = colors[6];
						end;

						return old(position, color);
					end;

					custom_value.Parent = slider;
					custom_value.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					custom_value.BackgroundTransparency = 1.000;
					custom_value.BorderColor3 = color3_fromrgb(0, 0, 0);
					custom_value.BorderSizePixel = 0;
					custom_value.Position = udim2_new(0.5, -20, 0, 5);
					custom_value.Size = udim2_new(0.5, 0, 0, 25);
					custom_value.Font = Enum.Font.SourceSansBold;
					custom_value.TextColor3 = color3_fromrgb(255, 255, 255);
					custom_value.TextSize = 15.000;
					custom_value.TextXAlignment = Enum.TextXAlignment.Right;

					local old = set_language; set_language = function()
						text.Text = translate('Kills');

						return old();
					end;

					local old = tab_transition; tab_transition = function()
						local old_size = positive_progress.Size;
						positive_progress.Size = udim2_new(0, 0, 1, 0);
						tween:Create(positive_progress, tweeninfo_new(0.65, Enum.EasingStyle.Circular), {Size = old_size}):Play();	

						return old();
					end;

					table_insert(connections, custom_value:GetPropertyChangedSignal('Text'):Connect(function()
						update(tonumber(string_sub(custom_value.Text, 1, (#custom_value.Text - 1))))
					end));

					path.Parent = slider;
					path.BackgroundColor3 = color3_fromrgb(23, 23, 30);
					path.BorderColor3 = color3_fromrgb(0, 0, 0);
					path.BorderSizePixel = 0;
					path.Position = udim2_new(0, 35, 0, 50);
					path.Size = udim2_new(1, -70, 0, 8);

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							path.BackgroundColor3 = colors[4];
						end;

						return old(position, color);
					end;

					round(path, 1);

					positive_progress.Parent = path;
					positive_progress.Position = udim2_new(0, 0, 0, 0);
					positive_progress.BackgroundColor3 = color3_fromrgb(81, 82, 192);
					positive_progress.BorderColor3 = color3_fromrgb(0, 0, 0);
					positive_progress.BorderSizePixel = 0;

					round(positive_progress, 1);

					positive_circle.Parent = positive_progress;
					positive_circle.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					positive_circle.BorderColor3 = color3_fromrgb(0, 0, 0);
					positive_circle.BorderSizePixel = 0;
					positive_circle.Position = udim2_new(1, -6, 0, -2);
					positive_circle.Size = udim2_new(0, 12, 0, 12);

					round(positive_circle, 1);

					negative_progress.Parent = path;
					negative_progress.Position = udim2_new(0, 0, 0, 0);
					negative_progress.BackgroundColor3 = color3_fromrgb(81, 82, 192);
					negative_progress.BorderColor3 = color3_fromrgb(0, 0, 0);
					negative_progress.BorderSizePixel = 0;

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							positive_progress.BackgroundColor3 = colors[1];
							negative_progress.BackgroundColor3 = colors[1];
						end;

						return old(position, color);
					end;

					round(negative_progress, 1);

					negative_circle.Parent = negative_progress;
					negative_circle.BackgroundColor3 = color3_fromrgb(255, 255, 255);
					negative_circle.BorderColor3 = color3_fromrgb(0, 0, 0);
					negative_circle.BorderSizePixel = 0;
					negative_circle.Position = udim2_new(0, -6, 0, -2);
					negative_circle.Size = udim2_new(0, 12, 0, 12);

					round(negative_circle, 1);

					local function update_negative()
						if (positive_progress.Size.X.Scale < 0) then
							positive_progress.Visible = false;

							negative_progress.Visible = true;
							negative_progress.Position = udim2_new(0, math_abs(path.AbsolutePosition.X - positive_progress.AbsolutePosition.X - positive_progress.AbsoluteSize.X), 0, 0);
							negative_progress.Size = udim2_new(0, math_abs(positive_progress.AbsoluteSize.X), 1, 0);
						else
							positive_progress.Visible = true;
							negative_progress.Visible = false;
						end;
					end;

					table_insert(connections, positive_progress:GetPropertyChangedSignal('AbsolutePosition'):Connect(update_negative));
					update_negative();

					minus.Parent = slider;
					minus.BackgroundColor3 = color3_fromrgb(23, 23, 30);
					minus.BorderColor3 = color3_fromrgb(0, 0, 0);
					minus.BorderSizePixel = 0;
					minus.Position = udim2_new(0, 10, 0, 46);
					minus.Size = udim2_new(0, 16, 0, 16);
					minus.AutoButtonColor = false;
					minus.Font = Enum.Font.SourceSansBold;
					minus.Text = '-';
					minus.TextColor3 = color3_fromrgb(255, 255, 255);
					minus.TextSize = 17.000;

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							minus.BackgroundColor3 = colors[4];
						end;

						return old(position, color);
					end;

					round(minus, 0.3);

					table_insert(connections, minus.MouseButton1Click:Connect(function()
						update(stattrak_kills - 1);

						tween:Create(minus, tweeninfo_new(0.05, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
						fwait(0.05);
						tween:Create(minus, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[4]}):Play();
					end));

					plus.Parent = slider;
					plus.BackgroundColor3 = color3_fromrgb(23, 23, 30);
					plus.BorderColor3 = color3_fromrgb(0, 0, 0);
					plus.BorderSizePixel = 0;
					plus.Position = udim2_new(1, -27, 0, 45);
					plus.Size = udim2_new(0, 16, 0, 16);
					plus.AutoButtonColor = false;
					plus.Font = Enum.Font.SourceSansBold;
					plus.Text = '+';
					plus.TextColor3 = color3_fromrgb(255, 255, 255);
					plus.TextSize = 17.000;

					local old = update_color; update_color = function(position, color)
						if (is_window_visible) then
							plus.BackgroundColor3 = colors[4];
						end;

						return old(position, color);
					end;

					round(plus, 0.3);

					table_insert(connections, plus.MouseButton1Click:Connect(function()
						update(stattrak_kills + 1);

						tween:Create(plus, tweeninfo_new(0.05, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
						fwait(0.05);
						tween:Create(plus, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[4]}):Play();
					end));
				end;
			elseif (tab_args.type == 'files') then
				local Frame = draw('Frame')
				local UICorner = draw('UICorner')
				local ScrollingFrame = draw('ScrollingFrame')
				local UIListLayout = draw('UIListLayout')
				local TextButton = draw('TextButton')
				local TextLabel = draw('TextLabel')
				local UICorner_2 = draw('UICorner')
				local ImageLabel = draw('ImageLabel')
				local TextButton_2 = draw('TextButton')
				local TextLabel_2 = draw('TextLabel')
				local UICorner_3 = draw('UICorner')
				local ImageLabel_2 = draw('ImageLabel')
				local Frame_2 = draw('Frame')
				local UICorner_4 = draw('UICorner')
				local Frame_3 = draw('Frame')
				local UICorner_5 = draw('UICorner')
				local TextBox = draw('TextBox')
				local xFrame = draw('Frame')
				local xUICorner = draw('UICorner')
				local xTextButton = draw('TextButton')
				local xTextLabel = draw('TextLabel')
				local xUICorner_2 = draw('UICorner')
				local xTextButton_2 = draw('TextButton')
				local xTextLabel_2 = draw('TextLabel')
				local xUICorner_3 = draw('UICorner')
				local xTextLabel_3 = draw('TextLabel')
				
				local function on_delete() end;
				
				local current_config;
				local function refresh()
					for _, frame in ScrollingFrame:GetChildren() do
						if (frame:IsA('Frame')) then
							frame:Destroy();
						end;
					end;
					
					fwait(0.3);
					
					for _, frame in ScrollingFrame:GetChildren() do
						if (frame:IsA('Frame')) then
							frame:Destroy();
						end;
					end;

					for name, config in tab_args.get_configs() do
						local Frame = draw('Frame')
						local TextLabel = draw('TextLabel')
						local TextButton = draw('TextButton')
						local TextLabel_2 = draw('TextLabel')
						local UICorner = draw('UICorner')
						local ImageLabel = draw('ImageLabel')
						local UICorner_2 = draw('UICorner')
						local TextButton_2 = draw('TextButton')
						local TextLabel_3 = draw('TextLabel')
						local UICorner_3 = draw('UICorner')
						local ImageLabel_2 = draw('ImageLabel')

						Frame.Parent = ScrollingFrame;
						Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
						Frame.BackgroundTransparency = 0.900
						Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
						Frame.BorderSizePixel = 0
						Frame.Size = UDim2.new(1, 0, 0, 50)

						TextLabel.Parent = Frame
						TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.BackgroundTransparency = 1.000
						TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
						TextLabel.BorderSizePixel = 0
						TextLabel.Position = UDim2.new(0, 15, 0, 0)
						TextLabel.Size = UDim2.new(1.03306878, -15, 1, 0)
						TextLabel.Font = Enum.Font.SourceSansBold
						TextLabel.Text = name;
						TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.TextSize = 16.000
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left

						TextButton.Parent = Frame
						TextButton.BackgroundColor3 = (current_config == name and Color3.fromRGB(23, 23, 30) or colors[1]);
						TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
						TextButton.BorderSizePixel = 0
						TextButton.Position = UDim2.new(1, -80, 0.5, -15)
						TextButton.Size = UDim2.new(0, 73, 0, 30)
						TextButton.AutoButtonColor = false
						TextButton.Font = Enum.Font.SourceSans
						TextButton.Text = ''
						TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
						TextButton.TextSize = 14.000
						TextButton.MouseButton1Click:Connect(function()
							if (current_config ~= name) then
								current_config = name;
								flags = config;
								set_config(config);
								refresh();
							else
								tab_args.on_save(name);
							end;
						end);
						TextButton.MouseEnter:Connect(function()
							tween:Create(TextButton, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = (current_config == name and colors[1] or color3_fromrgb(20, 19, 26))}):Play();
						end);
						TextButton.MouseLeave:Connect(function()
							tween:Create(TextButton, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = (current_config == name and color3_fromrgb(20, 19, 26) or colors[1])}):Play();
						end);

						TextLabel_2.Parent = TextButton
						TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel_2.BackgroundTransparency = 1.000
						TextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
						TextLabel_2.BorderSizePixel = 0
						TextLabel_2.Position = UDim2.new(0, 32, 0, 0)
						TextLabel_2.Size = UDim2.new(0, 33, 0, 30)
						TextLabel_2.Font = Enum.Font.SourceSansBold
						TextLabel_2.Text = (current_config == name and 'Save' or 'Load')
						TextLabel_2.TextColor3 = Color3.fromRGB(237, 234, 255)
						TextLabel_2.TextSize = 15.000
						TextLabel_2.TextXAlignment = Enum.TextXAlignment.Left

						UICorner.Parent = TextButton

						ImageLabel.Parent = TextButton
						ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						ImageLabel.BackgroundTransparency = 1.000
						ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
						ImageLabel.BorderSizePixel = 0
						ImageLabel.Position = UDim2.new(0, 4, 0, 4)
						ImageLabel.Size = UDim2.new(0, 21, 0, 21)
						ImageLabel.Image = 'rbxassetid://' .. (current_config == name and '124026162015799' or '131256358770346');

						UICorner_2.Parent = Frame
						
						TextButton_2.Parent = Frame
						TextButton_2.BackgroundColor3 = Color3.fromRGB(23, 23, 30)
						TextButton_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
						TextButton_2.BorderSizePixel = 0
						TextButton_2.Position = UDim2.new(1, -170, 0.5, -15)
						TextButton_2.Size = UDim2.new(0, 80, 0, 30)
						TextButton_2.AutoButtonColor = false
						TextButton_2.Font = Enum.Font.SourceSans
						TextButton_2.Text = ''
						TextButton_2.TextColor3 = Color3.fromRGB(0, 0, 0)
						TextButton_2.TextSize = 14.000
						TextButton_2.MouseButton1Click:Connect(function()
							xTextLabel_3.Text = 'Delete the "' .. name .. '" config?';
							xFrame.Visible = true;
							on_delete = function()
								Frame.Visible = false;
								tab_args.on_delete(name);
								refresh();
							end;
						end);
						TextButton_2.MouseEnter:Connect(function()
							tween:Create(TextButton_2, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
						end);
						TextButton_2.MouseLeave:Connect(function()
							tween:Create(TextButton_2, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(20, 19, 26)}):Play();
						end);

						TextLabel_3.Parent = TextButton_2
						TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel_3.BackgroundTransparency = 1.000
						TextLabel_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
						TextLabel_3.BorderSizePixel = 0
						TextLabel_3.Position = UDim2.new(0, 32, 0, 0)
						TextLabel_3.Size = UDim2.new(0, 33, 0, 30)
						TextLabel_3.Font = Enum.Font.SourceSansBold
						TextLabel_3.Text = 'Delete'
						TextLabel_3.TextColor3 = Color3.fromRGB(237, 234, 255)
						TextLabel_3.TextSize = 15.000
						TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left

						UICorner_3.Parent = TextButton_2

						ImageLabel_2.Parent = TextButton_2
						ImageLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						ImageLabel_2.BackgroundTransparency = 1.000
						ImageLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
						ImageLabel_2.BorderSizePixel = 0
						ImageLabel_2.Position = UDim2.new(0, 4, 0, 4)
						ImageLabel_2.Size = UDim2.new(0, 21, 0, 21)
						ImageLabel_2.Image = 'rbxassetid://90324326473801'
					end;
				end;
				
				files_page.Parent = main_frame;
				files_page.Visible = false;
				files_page.BackgroundTransparency = 1;
				files_page.BorderColor3 = color3_fromrgb(0, 0, 0);
				files_page.BorderSizePixel = 0;
				files_page.ClipsDescendants = true;
				files_page.Position = udim2_new(0.100000001, 0, 0.0329999998, 0);
				files_page.Size = udim2_new(0.879999995, 0, 0.935000002, 0);

				round(files_page, nil, 3);
				
				Frame.Parent = files_page;
				Frame.BackgroundColor3 = Color3.fromRGB(23, 23, 30)
				Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Frame.BorderSizePixel = 0
				Frame.Size = UDim2.new(1, 0, 1, 0)

				UICorner.CornerRadius = UDim.new(0, 3)
				UICorner.Parent = Frame

				ScrollingFrame.Parent = Frame
				ScrollingFrame.BackgroundTransparency = 1.000
				ScrollingFrame.BorderSizePixel = 0
				ScrollingFrame.Position = UDim2.new(0, 8, 0, 60)
				ScrollingFrame.Size = UDim2.new(1.00000012, -20, 0.759077787, -10)
				ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
				ScrollingFrame.ScrollBarThickness = 5

				UIListLayout.Parent = ScrollingFrame
				UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
				UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
				UIListLayout.Padding = UDim.new(0, 5)

				TextButton.Parent = Frame
				TextButton.BackgroundColor3 = Color3.fromRGB(81, 82, 192)
				TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextButton.BorderSizePixel = 0
				TextButton.Position = UDim2.new(0, 16, 0, 16)
				TextButton.Size = UDim2.new(0, 81, 0, 29)
				TextButton.AutoButtonColor = false
				TextButton.Font = Enum.Font.SourceSans
				TextButton.Text = ''
				TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
				TextButton.TextSize = 14.000
				TextButton.MouseButton1Click:Connect(function()
					local name = TextBox.Text;
					if (name ~= '' and string_sub(name, 1, 1) ~= ' ' and string_sub(name, #name, #name) ~= ' ' and tab_args.on_create(name)) then
						TextBox.Text = '';
						refresh();
					end;
				end);
				TextButton.MouseEnter:Connect(function()
					tween:Create(TextButton, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(20, 19, 26)}):Play();
				end);
				TextButton.MouseLeave:Connect(function()
					tween:Create(TextButton, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
				end);

				TextLabel.Parent = TextButton
				TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextLabel.BackgroundTransparency = 1.000
				TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextLabel.BorderSizePixel = 0
				TextLabel.Position = UDim2.new(0, 32, 0, 0)
				TextLabel.Size = UDim2.new(0, 33, 0, 30)
				TextLabel.Font = Enum.Font.SourceSansBold
				TextLabel.Text = 'Create'
				TextLabel.TextColor3 = Color3.fromRGB(237, 234, 255)
				TextLabel.TextSize = 15.000
				TextLabel.TextXAlignment = Enum.TextXAlignment.Left

				UICorner_2.Parent = TextButton

				ImageLabel.Parent = TextButton
				ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				ImageLabel.BackgroundTransparency = 1.000
				ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
				ImageLabel.BorderSizePixel = 0
				ImageLabel.Position = UDim2.new(0, 4, 0, 4)
				ImageLabel.Size = UDim2.new(0, 21, 0, 21)
				ImageLabel.Image = 'rbxassetid://131256358770346'
				
				TextButton_2.Parent = Frame
				TextButton_2.BackgroundColor3 = Color3.fromRGB(20, 19, 26)
				TextButton_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextButton_2.BorderSizePixel = 0
				TextButton_2.Position = UDim2.new(0.178937286, -100, 0.86868149, 16)
				TextButton_2.Size = UDim2.new(0, 85, 0, 29)
				TextButton_2.AutoButtonColor = false
				TextButton_2.Font = Enum.Font.SourceSans
				TextButton_2.Text = ''
				TextButton_2.TextColor3 = Color3.fromRGB(0, 0, 0)
				TextButton_2.TextSize = 14.000
				TextButton_2.MouseButton1Click:Connect(refresh);
				TextButton_2.MouseEnter:Connect(function()
					tween:Create(TextButton_2, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
				end);
				TextButton_2.MouseLeave:Connect(function()
					tween:Create(TextButton_2, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(20, 19, 26)}):Play();
				end);
				
				TextLabel_2.Parent = TextButton_2
				TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextLabel_2.BackgroundTransparency = 1.000
				TextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextLabel_2.BorderSizePixel = 0
				TextLabel_2.Position = UDim2.new(0, 32, 0, 0)
				TextLabel_2.Size = UDim2.new(0, 33, 0, 30)
				TextLabel_2.Font = Enum.Font.SourceSansBold
				TextLabel_2.Text = 'Refresh'
				TextLabel_2.TextColor3 = Color3.fromRGB(237, 234, 255)
				TextLabel_2.TextSize = 15.000
				TextLabel_2.TextXAlignment = Enum.TextXAlignment.Left

				UICorner_3.Parent = TextButton_2

				ImageLabel_2.Parent = TextButton_2
				ImageLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				ImageLabel_2.BackgroundTransparency = 1.000
				ImageLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				ImageLabel_2.BorderSizePixel = 0
				ImageLabel_2.Position = UDim2.new(0, 4, 0, 4)
				ImageLabel_2.Size = UDim2.new(0, 21, 0, 21)
				ImageLabel_2.Image = 'rbxassetid://88980851300388'

				Frame_2.Parent = Frame
				Frame_2.BackgroundColor3 = Color3.fromRGB(20, 19, 26)
				Frame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Frame_2.BorderSizePixel = 0
				Frame_2.Size = UDim2.new(1, 0, 0, 0)

				UICorner_4.CornerRadius = UDim.new(0, 4)
				UICorner_4.Parent = Frame_2

				Frame_3.Parent = Frame
				Frame_3.BackgroundColor3 = Color3.fromRGB(20, 19, 26)
				Frame_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Frame_3.BorderSizePixel = 0
				Frame_3.Position = UDim2.new(0.176056296, 0, 0.0387156121, 0)
				Frame_3.Size = UDim2.new(0, 254, 0, 30)

				UICorner_5.Parent = Frame_3

				TextBox.Parent = Frame_3
				TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextBox.BackgroundTransparency = 1.000
				TextBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
				TextBox.BorderSizePixel = 0
				TextBox.Position = UDim2.new(0, 9, 0, 0)
				TextBox.Size = UDim2.new(0.98299998, 0, 0, 30)
				TextBox.Font = Enum.Font.SourceSansBold
				TextBox.PlaceholderColor3 = Color3.fromRGB(84, 82, 102)
				TextBox.PlaceholderText = 'Config name'
				TextBox.Text = ''
				TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
				TextBox.TextSize = 15.000
				TextBox.TextWrapped = true
				TextBox.TextXAlignment = Enum.TextXAlignment.Left
				
				xFrame.Parent = files_page;
				xFrame.Visible = false;
				xFrame.BackgroundColor3 = Color3.fromRGB(23, 23, 30)
				xFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
				xFrame.BorderSizePixel = 0
				xFrame.Size = UDim2.new(1, 0, 1, 0)

				xUICorner.CornerRadius = UDim.new(0, 3)
				xUICorner.Parent = xFrame

				xTextButton.Parent = xFrame
				xTextButton.BackgroundColor3 = Color3.fromRGB(81, 82, 192)
				xTextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
				xTextButton.BorderSizePixel = 0
				xTextButton.Position = UDim2.new(0, 220, 0, 190)
				xTextButton.Size = UDim2.new(0, 81, 0, 29)
				xTextButton.AutoButtonColor = false
				xTextButton.Font = Enum.Font.SourceSans
				xTextButton.Text = ''
				xTextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
				xTextButton.TextSize = 14.000
				xTextButton.MouseButton1Click:Connect(function()
					xFrame.Visible = false;
					Frame.Visible = true;
				end);
				xTextButton.MouseEnter:Connect(function()
					tween:Create(xTextButton, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(20, 19, 26)}):Play();
				end);
				xTextButton.MouseLeave:Connect(function()
					tween:Create(xTextButton, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
				end);

				xTextLabel.Parent = xTextButton
				xTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				xTextLabel.BackgroundTransparency = 1.000
				xTextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
				xTextLabel.BorderSizePixel = 0
				xTextLabel.Size = UDim2.new(1, 0, 1, 0)
				xTextLabel.Font = Enum.Font.SourceSansBold
				xTextLabel.Text = 'Cancel'
				xTextLabel.TextColor3 = Color3.fromRGB(237, 234, 255)
				xTextLabel.TextSize = 15.000

				xUICorner_2.Parent = xTextButton

				xTextButton_2.Parent = xFrame
				xTextButton_2.BackgroundColor3 = Color3.fromRGB(20, 19, 26)
				xTextButton_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				xTextButton_2.BorderSizePixel = 0
				xTextButton_2.Position = UDim2.new(0, 320, 0, 190)
				xTextButton_2.Size = UDim2.new(0, 81, 0, 29)
				xTextButton_2.AutoButtonColor = false
				xTextButton_2.Font = Enum.Font.SourceSans
				xTextButton_2.Text = ''
				xTextButton_2.TextColor3 = Color3.fromRGB(0, 0, 0)
				xTextButton_2.TextSize = 14.000
				xTextButton_2.MouseButton1Click:Connect(function()
					on_delete();
					xFrame.Visible = false;
					Frame.Visible = true;
				end);
				xTextButton_2.MouseEnter:Connect(function()
					tween:Create(xTextButton_2, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = colors[1]}):Play();
				end);
				xTextButton_2.MouseLeave:Connect(function()
					tween:Create(xTextButton_2, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {BackgroundColor3 = color3_fromrgb(20, 19, 26)}):Play();
				end);

				xTextLabel_2.Parent = xTextButton_2
				xTextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				xTextLabel_2.BackgroundTransparency = 1.000
				xTextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				xTextLabel_2.BorderSizePixel = 0
				xTextLabel_2.Size = UDim2.new(1, 0, 1, 0)
				xTextLabel_2.Font = Enum.Font.SourceSansBold
				xTextLabel_2.Text = 'Delete'
				xTextLabel_2.TextColor3 = Color3.fromRGB(237, 234, 255)
				xTextLabel_2.TextSize = 15.000

				xUICorner_3.Parent = xTextButton_2

				xTextLabel_3.Parent = xFrame
				xTextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				xTextLabel_3.BackgroundTransparency = 1.000
				xTextLabel_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
				xTextLabel_3.BorderSizePixel = 0
				xTextLabel_3.Position = UDim2.new(0.33930853, 0, 0.346020728, 0)
				xTextLabel_3.Size = UDim2.new(0, 200, 0, 50)
				xTextLabel_3.Font = Enum.Font.SourceSansBold
				xTextLabel_3.TextColor3 = Color3.fromRGB(255, 255, 255)
				xTextLabel_3.TextSize = 17.000
				
				refresh();
			end;

			return functions;
		end;

		function functions:is_visible()
			return is_window_visible;
		end;

		function functions:get_screen()
			return screen;
		end;

		function functions:hide(bool)
			main_frame.Visible = (not bool);
			is_window_visible = (not bool);
		end;

		function functions:hotkeys()

			local main_frame = draw('Frame');
			local name = draw('TextLabel');
			local image = draw('ImageLabel');
			local holder = draw('Frame');
			local layout = draw('UIListLayout');

			main_frame.Parent = screen;
			main_frame.Visible = false;
			main_frame.BackgroundColor3 = color3_fromrgb(20, 19, 26);
			main_frame.BorderColor3 = color3_fromrgb(0, 0, 0);
			main_frame.BorderSizePixel = 0;
			main_frame.Position = udim2_new(0, 0.7, 0, 0.7);
			main_frame.Size = udim2_new(0, 250, 0, 30);
			main_frame.AutomaticSize = Enum.AutomaticSize.Y;
			main_frame.ZIndex = 2;

			hook_drag(main_frame);
			round(main_frame, nil, 7);

			name.Parent = main_frame;
			name.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			name.BackgroundTransparency = 1.000;
			name.BorderColor3 = color3_fromrgb(0, 0, 0);
			name.BorderSizePixel = 0;
			name.Position = udim2_new(0, 30, 0, 5);
			name.Size = udim2_new(1, -30, 0, 20);
			name.Font = Enum.Font.SourceSansBold;
			name.Text = 'Hotkeys';
			name.TextColor3 = color3_fromrgb(255, 255, 255);
			name.TextSize = 15.000;
			name.TextXAlignment = Enum.TextXAlignment.Left;
			name.ZIndex = 2;

			image.Parent = main_frame;
			image.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			image.BackgroundTransparency = 1.000;
			image.BorderColor3 = color3_fromrgb(0, 0, 0);
			image.BorderSizePixel = 0;
			image.Position = udim2_new(0, 5, 0, 5);
			image.Size = udim2_new(0, 20, 0, 20);
			image.Image = 'rbxassetid://13755102160';
			image.ImageColor3 = color3_fromrgb(92, 87, 191);
			image.ZIndex = 2;

			local old = update_color;
			update_color = function(position, color)
				image.ImageColor3 = colors[1];

				return old(position, color);
			end;

			holder.Parent = main_frame;
			holder.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			holder.BackgroundTransparency = 1.000;
			holder.BorderColor3 = color3_fromrgb(0, 0, 0);
			holder.BorderSizePixel = 0;
			holder.Position = udim2_new(0, 0, 0, 30);
			holder.Size = udim2_new(1, 0, 1, -25);
			holder.ZIndex = 2;

			layout.Parent = holder;
			layout.SortOrder = Enum.SortOrder.LayoutOrder;

			local labels = {};

			table_insert(connections, run.Heartbeat:Connect(function()
				if (not main_frame.Visible) then return; end;

				for index, data in hotkeys do
					if (data.text == 'Gui') then return; end;

					local label = labels[index];
					if (data.key and not label) then
						local main = draw('Frame');
						local name = draw('TextLabel');
						local key = draw('TextLabel');

						labels[index] = {
							main = main;
							name = name;
							key = key;
						};
						label = labels[index];

						main.Parent = holder;
						main.BackgroundColor3 = color3_fromrgb(255, 255, 255);
						main.BackgroundTransparency = 1.000;
						main.BorderColor3 = color3_fromrgb(0, 0, 0);
						main.BorderSizePixel = 0;
						main.Size = udim2_new(1, 0, 0, 20);
						main.ZIndex = 2;

						name.Parent = main;
						name.BackgroundColor3 = color3_fromrgb(255, 255, 255);
						name.BackgroundTransparency = 1.000;
						name.BorderColor3 = color3_fromrgb(0, 0, 0);
						name.BorderSizePixel = 0;
						name.Position = udim2_new(0, 10, 0, 0);
						name.Size = udim2_new(1, -10, 1, 0);
						name.Font = Enum.Font.SourceSansBold;
						name.Text = translate(data.text);
						name.TextColor3 = color3_fromrgb(255, 255, 255);
						name.TextSize = 15.000;
						name.TextXAlignment = Enum.TextXAlignment.Left;
						name.ZIndex = 2;

						key.Parent = main;
						key.BackgroundColor3 = color3_fromrgb(255, 255, 255);
						key.BackgroundTransparency = 1.000;
						key.BorderColor3 = color3_fromrgb(0, 0, 0);
						key.BorderSizePixel = 0;
						key.Size = udim2_new(1, -10, 1, 0);
						key.Font = Enum.Font.SourceSansBold;
						key.Text = data.key;
						key.TextColor3 = color3_fromrgb(255, 255, 255);
						key.TextSize = 15.000;
						key.TextXAlignment = Enum.TextXAlignment.Right;
						key.ZIndex = 2;
					else
						if (data.key) then
							if (data.bool) then
								tween:Create(label.name, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(255, 255, 255)}):Play();
								tween:Create(label.key, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = colors[1]}):Play();
							else
								tween:Create(label.name, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(70, 70, 70)}):Play();
								tween:Create(label.key, tweeninfo_new(0.35, Enum.EasingStyle.Circular), {TextColor3 = color3_fromrgb(70, 70, 70)}):Play();
							end

							label.key.Text = data.key;
						else
							if (labels[index]) then
								labels[index].main:Destroy();
								labels[index] = nil;
							end;

							hotkeys[index] = nil;
						end
					end;
				end;
			end));

			local functions = {};

			function functions:hide(bool)
				main_frame.Visible = (not bool);
			end;

			return functions;
		end;
		
		function functions:watermark(uid)

			local main_frame = draw('Frame');
			local text = draw('TextLabel');
			local image = draw('ImageLabel');
			local holder = draw('Frame');
			local layout = draw('UIListLayout');

			main_frame.Parent = screen;
			main_frame.Visible = false;
			main_frame.BackgroundColor3 = color3_fromrgb(20, 19, 26);
			main_frame.BorderColor3 = color3_fromrgb(0, 0, 0);
			main_frame.BorderSizePixel = 0;
			main_frame.Position = udim2_new(0, 0.7, 0, 0.7);
			main_frame.Size = udim2_new(0, 250, 0, 37);
			main_frame.AutomaticSize = Enum.AutomaticSize.X;
			main_frame.ZIndex = 2;

			hook_drag(main_frame);
			round(main_frame, nil, 7);

			text.Parent = main_frame;
			text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			text.BackgroundTransparency = 1.000;
			text.BorderColor3 = color3_fromrgb(0, 0, 0);
			text.BorderSizePixel = 0;
			text.Position = udim2_new(0, 35, 0, 0);
			text.Size = udim2_new(0, 0, 1, 0);
			text.Font = Enum.Font.SourceSansBold;
			text.Text = '';
			text.TextColor3 = color3_fromrgb(255, 255, 255);
			text.TextSize = 16;
			text.TextXAlignment = Enum.TextXAlignment.Left;
			text.AutomaticSize = Enum.AutomaticSize.X;
			text.ZIndex = 2;
			text.RichText = true;

			image.Parent = main_frame;
			image.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			image.BackgroundTransparency = 1.000;
			image.BorderColor3 = color3_fromrgb(0, 0, 0);
			image.BorderSizePixel = 0;
			image.Position = udim2_new(0, 8, 0.5, -10);
			image.Size = udim2_new(0, 20, 0, 20);
			image.Image = 'rbxassetid://98815746869741';
			image.ImageColor3 = color3_fromrgb(92, 87, 191);
			image.ZIndex = 2;

			local old = update_color;
			update_color = function(position, color)
				image.ImageColor3 = colors[1];

				return old(position, color);
			end;

			holder.Parent = main_frame;
			holder.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			holder.BackgroundTransparency = 1.000;
			holder.BorderColor3 = color3_fromrgb(0, 0, 0);
			holder.BorderSizePixel = 0;
			holder.Position = udim2_new(0, 0, 0, 30);
			holder.Size = udim2_new(1, 0, 1, -25);
			holder.ZIndex = 2;

			layout.Parent = holder;
			layout.SortOrder = Enum.SortOrder.LayoutOrder;

			local fps = 0;
			table_insert(connections, run.Heartbeat:Connect(function()
				if (not main_frame.Visible) then return; end;
				
				local color = 'rgb(84, 82, 102)';

				local data = DateTime.now():FormatLocalTime('LT', 'en-us');
				local time = string_sub(data, 0, #data - 3);
				local pmam = string_sub(data, #data - 1);
				text.Text = 'eternal    ' .. (auth.uid) .. ' <font color=\'' .. color .. '\'>uid</font>   ' .. fps .. ' <font color=\'rgb(90, 90, 90)\'>fps</font>   ' .. math_floor(client:GetNetworkPing() * 2000) .. ' <font color=\'rgb(90,90,90)\'>ms</font>   ' .. time .. ' <font color=\'rgb(90, 90, 90)\'>' .. pmam .. '</font>    ';
				
				fps += 1;
				fwait(1);
				fps -= 1;
			end));

			local functions = {};

			function functions:hide(bool)
				main_frame.Visible = (not bool);
			end;

			return functions;
		end;

		function functions:draw_hud(text, icon, width)

			local main_frame = draw('Frame');
			local name = draw('TextLabel');
			local image = draw('ImageLabel');
			local holder = draw('Frame');
			local layout = draw('UIListLayout');

			main_frame.Parent = screen;
			main_frame.Visible = false;
			main_frame.BackgroundColor3 = color3_fromrgb(20, 19, 26);
			main_frame.BorderColor3 = color3_fromrgb(0, 0, 0);
			main_frame.BorderSizePixel = 0;
			main_frame.Position = udim2_new(0, 0.7, 0, 0.7);
			main_frame.Size = udim2_new(0, (width or 250), 0, 30);
			main_frame.AutomaticSize = Enum.AutomaticSize.Y;
			main_frame.ZIndex = 2;

			hook_drag(main_frame);
			round(main_frame, nil, 7);

			name.Parent = main_frame;
			name.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			name.BackgroundTransparency = 1.000;
			name.BorderColor3 = color3_fromrgb(0, 0, 0);
			name.BorderSizePixel = 0;
			name.Position = udim2_new(0, 30, 0, 5);
			name.Size = udim2_new(1, -30, 0, 20);
			name.Font = Enum.Font.SourceSansBold;
			name.Text = text;
			name.TextColor3 = color3_fromrgb(255, 255, 255);
			name.TextSize = 15.000;
			name.TextXAlignment = Enum.TextXAlignment.Left;
			name.ZIndex = 2;

			image.Parent = main_frame;
			image.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			image.BackgroundTransparency = 1.000;
			image.BorderColor3 = color3_fromrgb(0, 0, 0);
			image.BorderSizePixel = 0;
			image.Position = udim2_new(0, 5, 0, 5);
			image.Size = udim2_new(0, 20, 0, 20);
			image.Image = icon;
			image.ImageColor3 = color3_fromrgb(92, 87, 191);
			image.ZIndex = 2;

			local old = update_color; update_color = function(position, color)
				image.ImageColor3 = colors[1];

				return old(position, color);
			end;

			holder.Parent = main_frame;
			holder.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			holder.BackgroundTransparency = 1.000;
			holder.BorderColor3 = color3_fromrgb(0, 0, 0);
			holder.BorderSizePixel = 0;
			holder.Position = udim2_new(0, 0, 0, 30);
			holder.Size = udim2_new(1, 0, 1, -25);
			holder.ZIndex = 2;

			layout.Parent = holder;
			layout.SortOrder = Enum.SortOrder.LayoutOrder;

			local functions = {};

			function functions:hide(bool)
				main_frame.Visible = (not bool);
			end;

			function functions:clear()
				for _, item in holder:GetChildren() do
					if (item:IsA('Frame')) then
						item:Destroy();
					end;
				end;
			end;

			function functions:add(name)
				local main = draw('Frame');
				local text = draw('TextLabel');
				local key = draw('TextLabel');

				main.Parent = holder;
				main.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				main.BackgroundTransparency = 1.000;
				main.BorderColor3 = color3_fromrgb(0, 0, 0);
				main.BorderSizePixel = 0;
				main.Size = udim2_new(1, 0, 0, 20);
				main.ZIndex = 2;

				text.Parent = main;
				text.BackgroundColor3 = color3_fromrgb(255, 255, 255);
				text.BackgroundTransparency = 1.000;
				text.BorderColor3 = color3_fromrgb(0, 0, 0);
				text.BorderSizePixel = 0;
				text.Position = udim2_new(0, 10, 0, 0);
				text.Size = udim2_new(1, -10, 1, 0);
				text.Font = Enum.Font.SourceSansBold;
				text.Text = name;
				text.TextColor3 = color3_fromrgb(255, 255, 255);
				text.TextSize = 15.000;
				text.TextXAlignment = Enum.TextXAlignment.Left;
				text.ZIndex = 2;
			end;

			function functions:remove(name)
				for _, item in holder:GetChildren() do
					local found = item:FindFirstChild('TextLabel');
					if (found and found.Text == name) then
						return found.Parent:Destroy();
					end;
				end;
			end;

			return functions;
		end;

		function functions:set_color(position, color)
			colors[position] = color;
			update_color(position, color);
		end;

		local notifies = {};
		function functions:notify(text, time)
			local bg = draw('Frame');
			local label = draw('TextLabel');
			local progress = draw('Frame');

			bg.Parent = screen;
			bg.AutomaticSize = Enum.AutomaticSize.X;
			bg.BackgroundColor3 = color3_fromrgb(20, 19, 26);
			bg.BorderColor3 = color3_fromrgb(0, 0, 0);
			bg.BorderSizePixel = 0;
			bg.ClipsDescendants = true;
			bg.Position = udim2_new(0, -20, 1, -50);
			bg.Size = udim2_new(0, 0, 0, 30);
			bg.ZIndex = 2;

			round(bg, nil, 5);

			label.Parent = bg;
			label.AutomaticSize = Enum.AutomaticSize.X;
			label.BackgroundColor3 = color3_fromrgb(255, 255, 255);
			label.BackgroundTransparency = 1;
			label.BorderColor3 = color3_fromrgb(0, 0, 0);
			label.BorderSizePixel = 0;
			label.Position = udim2_new(0, 7, 0, 5);
			label.Size = udim2_new(0, 0, 0, 20);
			label.ZIndex = 2;
			label.Font = Enum.Font.SourceSansBold;
			label.Text = text;
			label.TextColor3 = color3_fromrgb(255, 255, 255);
			label.TextSize = 15;
			label.TextTransparency = 1;
			label.TextXAlignment = Enum.TextXAlignment.Left;
			label.RichText = true;

			tween:Create(label, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {TextTransparency = 0}):Play();

			progress.Parent = bg;
			progress.AutomaticSize = Enum.AutomaticSize.X;
			progress.BackgroundColor3 = colors[1];
			progress.BorderColor3 = color3_fromrgb(0, 0, 0)
			progress.BorderSizePixel = 0
			progress.Position = udim2_new(0, 0, 1, -3)
			progress.Size = udim2_new(1, 7, 0, 3)
			progress.ZIndex = 2

			local old = update_color; update_color = function(position, color)
				progress.BackgroundColor3 = colors[1];

				return old(position, color);
			end;

			round(progress, nil, 5);

			local original_size = bg.AbsoluteSize.X;
			bg.AutomaticSize = Enum.AutomaticSize.None;
			bg.Size = udim2_new(0, 0, 0, 30);
			tween:Create(bg, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {Size = udim2_new(0, original_size, 0, 30)}):Play();
			progress.Size = udim2_new(0, 0, 0, 3);

			table_insert(notifies, bg);
			local id = #notifies;
			local hook = run.Heartbeat:Connect(function()
				tween:Create(bg, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {Position = (udim2_new(0, 20, 1, -50) - udim2_fromoffset(0, 45 * math_clamp(#notifies - id, 0, 999)))}):Play();
			end);

			tween:Create(progress, tweeninfo_new(time), {Size = udim2_new(1, 0, 0, 3)}):Play();
			fdelay(time, function()
				tween:Create(bg, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {Size = udim2_new(0, 0, 0, 30)}):Play();
				tween:Create(label, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {TextTransparency = 1}):Play();

				fdelay(0.45, function()
					bg:Destroy();
					hook:Disconnect();
				end);
			end);
		end;

		function functions:get_colors()
			return colors;
		end;

		return functions;
	end;

	function ui:destroy()
		for _, ui in core:GetChildren() do
			if (ui.Name == 'eternal ui') then
				for _, instance in ui:GetDescendants() do
					instance:Destroy();
				end;

				ui:Destroy();
			end;
		end;
	end;
	
	function ui:set_config(config)
		set_config(config);
	end;

end)();

-- ☆ //   debug   // ☆ --

local files = draw('ScreenGui');
files.Parent = core;
files.Name = 'eternal files';

LPH_NO_VIRTUALIZE(function()
    local text = draw('TextLabel');

    text.Parent = files;
    text.Visible = false;
    text.Name = 'debug';
    text.Size = udim2_fromscale(0.98, 0.98);
    text.BackgroundTransparency = 1;
    text.TextXAlignment = Enum.TextXAlignment.Right;
    text.TextYAlignment = Enum.TextYAlignment.Bottom;
    text.Font = Enum.Font.Code;
    text.TextStrokeTransparency = 0;
    text.TextColor3 = color3_fromrgb(255, 255, 255);
    text.TextSize = 17;

    table_insert(connections, run.Heartbeat:Connect(function()
		if (text.Visible) then
        	text.Text = (
				'## eternal debug ##' .. '\n\n\n' ..


				'# descendants'  .. '\n' .. 

				'files instance count: ' .. (#files:GetDescendants()) .. '\n' .. 
				'drawing instance count: ' .. (#core['eternal drawing']:GetDescendants()) .. '\n\n' ..

				
				'# childrens' .. '\n' ..
				
				'files instance count: ' .. (#files:GetChildren()) .. '\n' ..
				'drawing instance count: ' .. (#core['eternal drawing']:GetChildren())
			);
		end;
	end));

    table_insert(connections, uis.InputBegan:Connect(function()
		if (uis:GetFocusedTextBox()) then return; end;
        if (uis:IsKeyDown(Enum.KeyCode.D) and uis:IsKeyDown(Enum.KeyCode.B) and uis:IsKeyDown(Enum.KeyCode.G)) then
            text.Visible = not text.Visible;
        end;
    end));

end)();

-- ☆ //   name protection   // ☆ --

local update_name_protection = LPH_NO_VIRTUALIZE(function() end);
local hook_text = LPH_NO_VIRTUALIZE(function(instance)
	if (not instance:IsA('TextLabel') and not instance:IsA('TextButton')) then return; end;

	local protected = {};
	local last = instance.Text;
	
	local debounce;
	local protect = function()
		local saved = instance.Text;

		if (flags.name_protection and flags.name_protection.bool) then
			debounce = true;
			instance.Text = string_gsub(instance.Text, client.Name,        'Protected');
			instance.Text = string_gsub(instance.Text, client.DisplayName, 'Protected');
			instance.Text = string_gsub(instance.Text, client.UserId,      'Protected');
			debounce = false;
		end;

		if (instance.Text == saved and not protected[saved]) then
			last = saved;
		elseif (instance.Text ~= saved) then
			protected[saved] = 0;
			protected[instance.Text] = 1;
		end;

		if (flags.name_protection and not flags.name_protection.bool) then
			instance.Text = last;
		else
			for text, type in protected do
				if (type == 0) then
					protected[text] = nil;
				end;
			end;
		end;
	end;

	instance:GetPropertyChangedSignal('Text'):Connect(function()
		if (debounce) then return; end;
		protect();
	end);

	local update = update_name_protection; update_name_protection = function()
		protect();

		return (update());
	end;

	protect();
end);

table_insert(connections, roblox.DescendantAdded:Connect(hook_text));
for _, instance in roblox:GetDescendants() do
	hook_text(instance);
end;

-- ☆ //   main script   // ☆ --

getgenv().eternal_unhook = LPH_NO_VIRTUALIZE(function()
	unhooked = true;

	for _, flag in flags do
		if (typeof(flag) == 'table' and flag.bool ~= nil) then
			flag.bool = false;
		end;
	end;

	if (flags.__INVENTORYCHANGER) then
		flags.__INVENTORYCHANGER.enabled = false;
	end;

	pcall(update_name_protection);

	run.Heartbeat:Wait();
	fwait();

    for _= 1, 100 do
        for _, connection in connections do
            connection:Disconnect();
        end;
    end;

    drawing:destroy();
    ui:destroy();

    files:Destroy();
end);

local weapon_icons = {
    ['Glock']              = 'rbxassetid://1784884358';
    ['P2000']              = 'rbxassetid://1784890670';
    ['MAG7']               = 'rbxassetid://1784886738';
    ['C4']                 = 'rbxassetid://960099089';
    ['Negev']              = 'rbxassetid://1784889308';
    ['P90']                = 'rbxassetid://1784889951';
    ['P250']               = 'rbxassetid://1784890224';
    ['SawedOff']           = 'rbxassetid://1784891342';
    ['SCAR-20']            = 'rbxassetid://464915678';
    ['Scout']              = 'rbxassetid://1784891607';
    ['Tec9']               = 'rbxassetid://1784892286';
    ['UMP']                = 'rbxassetid://1784893326';
    ['XM']                 = 'rbxassetid://1784894646';
    ['Golden Knife']       = 'rbxassetid://1784892698';
    ['T Knife']            = 'rbxassetid://5862001968';
    ['CT Knife']           = 'rbxassetid://5862001395';
    ['Gut Knife']          = 'rbxassetid://5862001604';
    ['Butterfly Knife']    = 'rbxassetid://5862001270';
    ['Karambit']           = 'rbxassetid://5862001782';
    ['Huntsman Knife']     = 'rbxassetid://5862001657';
    ['Bayonet']            = 'rbxassetid://5862001162';
    ['Falchion Knife']     = 'rbxassetid://5882210289';
    ['Falchion Classic']   = 'rbxassetid://5882210289';
    ['Sickle Classic']     = 'rbxassetid://5866449272';
    ['Sickle']             = 'rbxassetid://5866449272';
    ['Molotov']            = 'rbxassetid://5862001832';
    ['Incendiary Grenade'] = 'rbxassetid://5862001717';
    ['Flashbang']          = 'rbxassetid://5862001535';
    ['Decoy Grenade']      = 'rbxassetid://5862001463';
    ['Bearded Axe']        = 'rbxassetid://5862001218';
    ['Cleaver']            = 'rbxassetid://5882209166';
    ['Smoke Grenade']      = 'rbxassetid://5862001893';
    ['AUG']                = 'rbxassetid://1784880429';
    ['SG']                 = 'rbxassetid://1784892019';
    ['MAC10']              = 'rbxassetid://1784886467';
    ['M4A4']               = 'rbxassetid://1784885559';
    ['FiveSeven']          = 'rbxassetid://1784883536';
    ['Famas']              = 'rbxassetid://1784883269';
    ['DualBerettas']       = 'rbxassetid://464915621';
    ['CZ']                 = 'rbxassetid://1784881184';
    ['DesertEagle']        = 'rbxassetid://1784882993';
    ['AWP']                = 'rbxassetid://1784880647';
    ['AK47']               = 'rbxassetid://1784880132';
    ['HE Grenade']         = 'rbxassetid://469548318';
    ['Nova']               = 'rbxassetid://1784889624';
    ['Galil']              = 'rbxassetid://1784884618';
    ['M249']               = 'rbxassetid://1784886231';
    ['M4A1']               = 'rbxassetid://1784885275';
    ['R8']                 = 'rbxassetid://1784891026';
    ['MP7']                = 'rbxassetid://1784887021';
    ['MP7-SD']             = 'rbxassetid://12283517102';
    ['MP9']                = 'rbxassetid://1784888791';
    ['G3SG1']              = 'rbxassetid://1784883884';
    ['Bizon']              = 'rbxassetid://1784892936';
    ['USP']                = 'rbxassetid://1784893598';
    ['Kevlar Vest']        = 'rbxassetid://966822751';
    ['Zeus']               = 'rbxassetid://1784893598';
    ['Defuse Kit']         = 'rbxassetid://966822523';
    ['Crowbar']            = 'rbxassetid://5862001328';
    ['Kevlar + Helmet']    = 'rbxassetid://966822842';
};

local measurements = {
    Studs  = {conversion = 1,        suffix = 's'};
    Meters = {conversion = (25 / 7), suffix = 'm'};
    Feet   = {conversion = 3.2808,   suffix = 'ft'};
    Yards  = {conversion = 1.09361,  suffix = 'yd'};
};

local materials = {
	ForceField = Enum.Material.ForceField;
	Neon = Enum.Material.Neon;
	Metal = Enum.Material.Metal;
	Ice = Enum.Material.Ice;
};

LPH_JIT_MAX(function()
	local window = ui:window();
	local hotkeys = window:hotkeys();
	local watermark = window:watermark();

	local loops = {};

	if (game.type == 'universal' or game.type == 'fps' or game.type == 'survival') then

		local internal, failed; (
			(game.name == 'Counter Blox') and (function()
				internal = getsenv(client.PlayerGui.Client);
			end)

			or (game.name == 'Phantom Forces') and (function()
				internal = {};

				for _, require in getgc(false) do
					if (
						type(require) == 'function'
						and islclosure(require)
						and debug_getinfo(require).name == 'require'
						and string_find(debug_getinfo(require).source, 'ClientLoader')
					) then
						internal.modules = {};

						for name, cache in debug_getupvalue(require, 1)._cache do
							internal.modules[name] = cache.module;
						end;

						break;
					end;
				end;

				if (not internal.modules) then
					failed = true;

					setfflag('DebugRunParallelLuaOnMainThread','True');
					return window:notify('cant find game modules, try to rejoin', 60);
				end;

				for _, value in getgc(true) do
					if (type(value) == 'table') then
						if (
							rawget(value, 'Mentha Spicata')
							and rawget(value, 'Dove blue')
						) then
							internal.camo_database = value;
						elseif (
							rawget(value, 'died')
							and rawget(value, 'smallaward')
						) then
							internal.network_connections = value;
						end;
					end;
				end;

				internal.get_entry = internal.modules.ReplicationInterface.getEntry;
				internal.ticket_addition = (getgenv()['eternal ticket_addition'] or 0);
				internal.ticket = 0;
				internal.ticket_cache = {};
				internal.fake_weapons = {};
				internal.real_weapons = {};
				internal.stamina_cache = {normal = {}; stamina = {}};

				append_unhook(function()
					getgenv()['eternal ticket_addition'] = internal.ticket_addition;
				end);
			end)

			or (function()
				internal = {};
			end)
		)();

		if (failed) then
			return;
		end;

		-- ☆ //   ui   // ☆ --

		local skins = {};
		local spectator_list = window:draw_hud('Spectator List', 'rbxassetid://82267943262741', 200);

		do
			local tab = window:tab({name = 'Legit-Bot'; icon = 'rbxassetid://114103646435815'; type = 'normal'});
			do
				local group = tab:group('Assist');
				do
					local section = group:section({icon = 'rbxassetid://114103646435815'; text = 'Aim-Bot'; divider = 2});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'aimbot_enabled'; text = 'Aim-Bot'});
							group:dropdown({flag = 'aimbot_type'; text = 'Type'; default = 'Default'; options = {'Default'; 'Silent'}});
							if (game.name == 'Universal') then
								group:dropdown({flag = 'aimbot_silent_hooks'; text = 'Silent Hooks'; multi = true; default = {}; options = {'FindPartOnRayWithIgnoreList'; 'FindPartOnRayWithWhiteList'}});
							end;
							group:slider({flag = 'aimbot_fov'; text = 'FOV'; min = 0; max = 500; float = 1; default = 1; suffix = 'px'});
							group:toggle({flag = 'aimbot_dynamic'; text = 'Dynamic FOV'});
							group:dropdown({flag = 'aimbot_target'; text = 'Target'; multi = true; default = {'Head'; 'Torso'}; options = {'Head'; 'Torso'; 'Arms'; 'Legs'}});
							group:dropdown({flag = 'aimbot_visiblity_check'; text = 'Visiblity Check'; default = 'Wall Check'; options = (
								game.type == 'fps' and {'Off'; 'Penetration Check'; 'Wall Check'}
								or {'Off'; 'Wall Check'}
							)});
							group:toggle({flag = 'aimbot_teamcheck'; text = 'Team Check'});
							group:slider({flag = 'aimbot_chance'; text = 'Work Chance'; min = 0; max = 100; float = 1; default = 100; suffix = '%'});
							group:slider({flag = 'aimbot_speed'; text = 'Speed'; min = 0; max = 100; float = 1; default = 50; suffix = '%'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'aimbot_autoshoot'; text = 'Auto Shoot'});
							group:slider({flag = 'aimbot_autoshoot_reaction'; text = 'Shoot Reaction'; min = 0; max = 1000; float = 1; default = 1; suffix = 'ms'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'aimbot_predict'; text = 'Predict Movement'});
							group:slider({flag = 'aimbot_predict_size'; text = 'Predict Size'; min = 0; max = 200; float = 1; default = 30; suffix = '%'});

							if (game.name == 'Phantom Forces') then
								group:toggle({flag = 'aimbot_bullet_predict'; text = 'Predict Bullet'; default = true});
								group:slider({flag = 'aimbot_bullet_predict_size'; text = 'Predict Size'; min = 0; max = 100; float = 1; default = 100; suffix = '%'});
							end;
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'aimbot_deadfov'; text = 'Dead FOV'});
							group:slider({flag = 'aimbot_deadfov_fov'; text = 'FOV'; min = 0; max = 100; float = 1; default = 50; suffix = '%'});
						end;

						local group = section:group(2);
						do
							group:toggle({flag = 'visualize_aimbot_fov'; text = 'Visualize FOV'});
							group:colorpicker({flag = 'aimbot_fov_color'; text = 'FOV Color'; colors = {
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0.5; 0.5}; rotation = {auto = true}; gradient = true};
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0; 0.5}; rotation = {auto = true}; gradient = true; disable_gradient = true};
							}});
						end;

						local group = section:group(2);
						do
							group:toggle({flag = 'visualize_aimbot_deadfov'; text = 'Visualize Dead FOV'});
							group:colorpicker({flag = 'aimbot_deadfov_color'; text = 'Dead FOV Color'; colors = {
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0.5; 0.5}; rotation = {auto = true}; gradient = true};
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0; 0.5}; rotation = {auto = true}; gradient = true; disable_gradient = true};
							}});
						end;

						local group = section:group(2);
						do
							group:toggle({flag = 'aimbot_snapline'; text = 'Snap Line'});
							group:colorpicker({flag = 'aimbot_snapline_color'; text = 'Line Color'; colors = {
								{color = {color3_fromrgb(255, 255, 255); color3_fromrgb(255, 255, 255)}; alpha = {0; 0}; rotation = {}; gradient = true; disable_gradient = true};
							}});
						end;
					end;

					if (game.name ~= 'Phantom Forces') then
						local section = group:section({icon = 'rbxassetid://136428354560085'; text = 'Hitbox'; divider = 1});
						do
							local group = section:group(1);
							do
								group:toggle({flag = 'hitbox_expander'; text = 'Hitbox Expander'});
								group:dropdown({flag = 'hitbox_expander_target'; text = 'What to expand?'; multi = true; default = {'Head'}; options = {'Head'; 'Torso'; 'Arms'; 'Legs'}});
								group:slider({flag = 'hitbox_expander_addition'; text = 'Hitbox Addition'; min = 0; max = 10; float = 1; default = 1; suffix = 'st'});
							end;
						end;

						--[[if (game.name == 'Counter Blox') then
							local group = section:group(1);
							do
								group:toggle({flag = 'backtrack'; text = 'Backtrack'});
								group:slider({flag = 'backtrack_size'; text = 'Backtrack Size'; min = 0; max = 10; float = 1; default = 1; suffix = 'st'});
								group:colorpicker({flag = 'backtrack_color'; text = 'Backtrack Color'; colors = {
									{color = color3_fromrgb(155, 155, 255); alpha = 0.7};
								}});
							end;
						end;]]
					end;

					local section = group:section({icon = 'rbxassetid://78010244099353'; text = 'Trigger-Bot'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'triggerbot_enabled'; text = 'Trigger-Bot'});
							group:slider({flag = 'triggerbot_reaction'; text = 'Reaction'; min = 0; max = 1000; float = 1; default = 1; suffix = 'ms'});
						end;
					end;
				end;
			end;

			if (game.type == 'fps') then
				local tab = window:tab({name = 'Rage-Bot'; icon = 'rbxassetid://100673842670622'; type = 'normal'});
				do
					local group = tab:group('Shooting');
					do
						local section = group:section({icon = 'rbxassetid://119292190322006'; text = 'Rage-Bot'; divider = 2});
						do
							local group = section:group(1);
							do
								group:toggle({flag = 'ragebot_enabled'; text = 'Rage-Bot'});
								group:toggle({flag = 'ragebot_penetrate_walls'; text = 'Penetrate Walls'; default = true});
								group:dropdown({flag = 'ragebot_filter'; text = 'Mode'; default = 'Kill Enemies'; options = {'Kill Everyone'; 'Kill Teammates'; 'Kill Enemies'; 'Kill Only Target'}});
								local dropdown = group:dropdown({flag = 'ragebot_target'; text = 'Target'; multi = true; default = {}; options = {}});
								
								fspawn(function()
									repeat
										local list = {};
										for _, player in players:GetChildren() do
											table_insert(list, player.Name);
										end;

										dropdown:set_options(list);
										fwait(1);
									until (unhooked);
								end);
							end;

							local group = section:group(1);
							do
								group:toggle({flag = 'ragebot_predict'; text = 'Predict'; default = true});
								group:slider({flag = 'ragebot_predict_size'; text = 'Prediction Size'; min = 0; max = 300; float = 1; default = 100; suffix = '%'});
								group:toggle({flag = 'ragebot_predict_randomize'; text = 'Randomize Prediction'; default = true});

								if (game.name == 'Phantom Forces') then
									group:toggle({flag = 'ragebot_bullet_predict'; text = 'Predict Bullet'; default = true});
									group:slider({flag = 'ragebot_bullet_predict_size'; text = 'Prediction Size'; min = 0; max = 300; float = 1; default = 100; suffix = '%'});
								end;
							end;

							local group = section:group(1);
							do
								group:toggle({flag = 'ragebot_manipulation'; text = 'Manipulate Bullet'; default = true});
								group:slider({flag = 'ragebot_scan_offset'; text = 'Scan Offset'; min = 0; max = 15; float = 10; default = 3; suffix = 'st'});
								group:toggle({flag = 'ragebot_scan_offset_randomize'; text = 'Randomize Offset'; default = false});
								group:slider({flag = 'ragebot_scan_layers'; text = 'Scan Layers'; min = 1; max = 5; float = 1; default = 1; suffix = ''});
								group:dropdown({flag = 'ragebot_scan_type'; text = 'Scan Type'; default = 'Line'; options = {'Line'; 'Corner'}});
								group:toggle({flag = 'ragebot_scan_spin'; text = 'Spin Scan'; default = false});
								group:slider({flag = 'ragebot_scan_spin_x'; text = 'X'; min = 0; max = 360; float = 1; default = 1; suffix = '°'});
								group:slider({flag = 'ragebot_scan_spin_y'; text = 'Y'; min = 0; max = 360; float = 1; default = 1; suffix = '°'});
							end;

							local group = section:group(2);
							do
								group:toggle({flag = 'ragebot_visualize'; text = 'Visualize Scan-Points'; default = true});
								group:dropdown({flag = 'ragebot_scan_material'; text = 'Point Material'; default = 'ForceField'; options = (function()
									local list = {};
									for name, material in materials do
										table_insert(list, name);
									end;
									return list;
								end)()});
								group:colorpicker({flag = 'ragebot_scan_color'; text = 'Point Color'; colors = {
									{color = color3_fromrgb(255, 255, 255); alpha = 0};
								}});
							end;
						end;

						if (game.name == 'Counter Blox') then
							local section = group:section({icon = 'rbxassetid://88980851300388'; text = 'Loop Kill'; divider = 1});
							do
								local group = section:group(1);
								do
									group:toggle({flag = 'loop_kill'; text = 'Loop Kill'; default = false});
									group:dropdown({flag = 'loop_kill_mode'; text = 'Mode'; default = 'Kill Enemies'; options = {'Kill Enemies'; 'Kill Teammates'; 'Kill Everyone'; 'Kill Only Target'}});
									local dropdown = group:dropdown({flag = 'loop_kill_target'; text = 'Target'; multi = true; default = {}; options = {}});
								
									fspawn(function()
										repeat
											local list = {};
											for _, player in players:GetChildren() do
												table_insert(list, player.Name);
											end;

											dropdown:set_options(list);
											fwait(1);
										until (unhooked);
									end);
								end;
							end;
						end;
					end;
				end;
			end;

			local tab = window:tab({name = 'Visuals'; icon = 'rbxassetid://82267943262741'; type = 'visuals'});
			do
				local group = tab:group('World');
				do
					local section = group:section({icon = 'rbxassetid://106471507815859'; text = 'Environment'; divider = 2});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'recolor_ambient'; text = 'Recolor Ambient'});
							group:colorpicker({flag = 'recolor_ambient_color'; text = 'Ambient Color'; colors = {
								{color = color3_fromrgb(255, 255, 255)};
							}});
							group:toggle({flag = 'recolor_world'; text = 'Recolor World'});
							group:colorpicker({flag = 'recolor_world_color'; text = 'World Color'; colors = {
								{color = color3_fromrgb(255, 255, 255)};
							}});
							group:dropdown({flag = 'lighting_technology'; text = 'Lighting Technology'; default = lighting.Technology.Name; options = (function()
								local list = {};
								for _, technology in Enum.Technology:GetEnumItems() do
									table_insert(list, technology.Name);
								end;
								return list;
							end)(); callback = function(technology)
								lighting.Technology = Enum.Technology[technology];
							end});
						end;

						if (game.type == 'fps') then
							if (game.name == 'Counter Blox') then
								local group = section:group(1);
								do
									group:toggle({flag = 'anti_flashbang'; text = 'Anti FlashBang'});
									group:toggle({flag = 'anti_smoke'; text = 'Anti Smoke'});
								end;
							end;

							local group = section:group(2);
							do
								group:toggle({flag = 'bullet_tracer'; text = 'Bullet Tracer'});
								group:colorpicker({flag = 'bullet_tracer_color'; text = 'Tracer Color'; colors = {
									{color = {color3_fromrgb(255, 255, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {disable = true}; gradient = true};
								}});
								group:slider({flag = 'bullet_tracer_live'; text = 'Live Time'; min = 0; max = 10; float = 1000; default = 1; suffix = 's'});
								group:slider({flag = 'bullet_tracer_width'; text = 'Tracer Width'; min = 0; max = 2; float = 100; default = 1; suffix = 'st'});
								group:dropdown({flag = 'bullet_tracer_image'; text = 'Tracer Image'; default = '1'; options = {'1'; '2'}});
							end;

							local group = section:group(2);
							do
								group:toggle({flag = 'hit_chams'; text = 'Hit Chams'});
								group:colorpicker({flag = 'hit_chams_color'; text = 'Chams Color'; colors = {
									{color = color3_fromrgb(255, 255, 255); alpha = 0};
								}});
								group:slider({flag = 'hit_chams_live'; text = 'Live Time'; min = 0; max = 10; float = 1000; default = 1; suffix = 's'});
								group:slider({flag = 'hit_chams_fade'; text = 'Fade Time'; min = 0; max = 10; float = 1000; default = 1; suffix = 's'});
							end;

							local group = section:group(2);
							do
								group:toggle({flag = 'hit_marker'; text = 'Hit Marker'});
								group:dropdown({flag = 'hit_marker_selected'; text = 'Markers'; multi = true; default = {'Cross'; 'Damage Dealt'}; options = {'Cross'; 'Damage Dealt'}});
							end;
						end;
					end;

					local section = group:section({icon = 'rbxassetid://93797613890833'; text = 'Screen'; divider = 2});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'aspect_ratio'; text = 'Aspect Ratio'});
							group:slider({flag = 'horizontal_stretch'; text = 'Horizontal Stretch'; min = 70; max = 150; float = 1; default = 100; suffix = '%'});
							group:slider({flag = 'vertical_stretch'; text = 'Vertical Stretch'; min = 70; max = 150; float = 1; default = 85; suffix = '%'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'custom_fov'; text = 'Custom FOV'});
							group:slider({flag = 'custom_fov_fov'; text = 'FOV'; min = 0; max = 300; default = 90; suffix = ''});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'zoom'; text = 'Zoom'});
							group:slider({flag = 'zoom_fov'; text = 'Zoom FOV'; min = 0; max = 300; default = 30; suffix = ''});
							group:toggle({flag = 'zoom_smooth'; text = 'Smooth Zoom'; default = true});
						end;

						if (game.type == 'fps') then
							local group = section:group(1);
							do
								group:toggle({flag = 'no_crosshair'; text = 'Hide Crosshair'});
							end;
						end;

						local group = section:group(2);
						do
							group:toggle({flag = 'custom_crosshair'; text = 'Custom Crosshair'});
							group:colorpicker({flag = 'crosshair_color'; text = 'Color'; colors = {
								{color = {color3_fromrgb(255, 255, 255); color3_fromhsv(0,0,0)}; alpha = {0.5; 0.5}; rotation = {auto = true}; gradient = true; disable_gradient = true};
							}});
							group:slider({flag = 'crosshair_length'; text = 'Length'; min = 0; max = 25; float = 1; default = 10; suffix = 'px'});
							group:slider({flag = 'crosshair_width'; text = 'Width'; min = 0; max = 25; float = 1; default = 1; suffix = 'px'});
							group:slider({flag = 'crosshair_distance'; text = 'Distance'; min = 0; max = 25; float = 1; default = 5; suffix = 'px'});
							group:toggle({flag = 'crosshair_outline'; text = 'Outline'});
							group:slider({flag = 'crosshair_rotation'; text = 'Rotation'; min = -360; max = 360; float = 1; default = 0; suffix = '°'});
							group:toggle({flag = 'crosshair_spin'; text = 'Spin'; default = true});
							group:slider({flag = 'crosshair_spin_speed'; text = 'Spin Speed'; min = -100; max = 100; float = 1; default = 50; suffix = '%'});
							group:toggle({flag = 'crosshair_cooler_spin'; text = 'Cooler spin'; default = true});
						end;
					end;

					local section = group:section({icon = 'rbxassetid://131600725328350'; text = 'Character'; divider = (game.name == 'Universal' and 1 or 2)});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'trail'; text = 'Trail'});
							group:colorpicker({flag = 'trail_color'; text = 'Trail Color'; colors = {
								{color = {color3_fromrgb(255, 255, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {}; gradient = true; disable_gradient = true};
							}});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'client_third_person'; text = 'Third Person'});
							group:slider({flag = 'third_person_x_distance'; text = 'X Distance'; min = -10; max = 10; float = 100; default = 0; suffix = 'st'});
							group:slider({flag = 'third_person_y_distance'; text = 'Y Distance'; min = -10; max = 10; float = 100; default = 0; suffix = 'st'});
							group:slider({flag = 'third_person_z_distance'; text = 'Z Distance'; min = -10; max = 10; float = 100; default = 7; suffix = 'st'});
							group:dropdown({flag = 'client_third_person_material'; text = 'Third Person Material'; default = 'Default'; options = (function()
								local list = {'Default'};
								for name, material in materials do
									table_insert(list, name);
								end;
								return list;
							end)()});
							group:toggle({flag = 'client_third_person_recolor'; text = 'ReColor Third Person'});
							group:colorpicker({flag = 'client_third_person_color'; text = 'Color'; colors = {
								{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
							}});
							group:toggle({flag = 'client_third_person_chams'; text = 'Third Person Chams'});
							group:colorpicker({flag = 'client_third_person_chams_color'; text = 'Chams Color'; colors = {
								{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
								{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
							}});

							if (game.name == 'Phantom Forces') then
								group:toggle({flag = 'server_third_person'; text = 'Server Third Person'});
								group:dropdown({flag = 'server_third_person_material'; text = 'STP Material'; default = 'Default'; options = (function()
									local list = {'Default'};
									for name, material in materials do
										table_insert(list, name);
									end;
									return list;
								end)()});
								group:toggle({flag = 'server_third_person_recolor'; text = 'ReColor STP'; default = true});
								group:colorpicker({flag = 'server_third_person_color'; text = 'STP Color'; colors = {
									{color = color3_fromrgb(112, 255, 181); alpha = 0.7};
								}});
								group:toggle({flag = 'server_third_person_chams'; text = 'STP Chams'});
								group:colorpicker({flag = 'server_third_person_chams_color'; text = 'STP Chams Color'; colors = {
									{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
									{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
								}});
							end;
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'china_hat'; text = 'China Hat'});
							group:colorpicker({flag = 'china_hat_color'; text = 'Color'; colors = {
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0; 0.5}; rotation = {}; gradient = true; disable_gradient = true};
							}});
							group:slider({flag = 'china_hat_offset'; text = 'Offset'; min = 0; max = 5; float = 10; default = 0.7; suffix = 'st'});
							group:slider({flag = 'china_hat_width'; text = 'Width'; min = 0; max = 5; float = 10; default = 2; suffix = 'st'});
							group:slider({flag = 'china_hat_height'; text = 'Height'; min = 0; max = 5; float = 10; default = 0.8; suffix = 'st'});
							group:toggle({flag = 'china_hat_spin'; text = 'Spin'; default = true;});
							group:slider({flag = 'china_hat_spin_speed'; text = 'Spin Speed'; min = -360; max = 360; float = 1; default = 5; suffix = '°'});
						end;

						if (game.name ~= 'Universal') then
							local group = section:group(2);
							do
								group:toggle({flag = 'custom_viewmodel'; text = 'Custom Viewmodel'});
								group:slider({flag = 'viewmodel_x'; text = 'X Distance'; min = -10; max = 2; float = 100; default = 0; suffix = 'st'});
								group:slider({flag = 'viewmodel_y'; text = 'Y Distance'; min = -10; max = 2; float = 100; default = 0; suffix = 'st'});
								group:slider({flag = 'viewmodel_z'; text = 'Z Distance'; min = -10; max = 2; float = 100; default = 0; suffix = 'st'});
							end;

							local group = section:group(2);
							do
								group:toggle({flag = 'hide_gloves'; text = 'Hide Gloves'});
								group:toggle({flag = 'hide_sleeves'; text = 'Hide Sleeves'});

								if (game.name == 'Phantom Forces') then
									group:toggle({flag = 'hide_other'; text = 'Hide Other'});
								end;
							end;
							
							local group = section:group(2);
							do
								group:dropdown({flag = 'arms_material'; text = 'Arms Material'; default = 'Default'; options = (function()
									local list = {'Default'};
									for name, material in materials do
										table_insert(list, name);
									end;
									return list;
								end)()});
								group:toggle({flag = 'arms_recolor'; text = 'Recolor Arms'});
								group:colorpicker({flag = 'arms_recolor_color'; text = 'Arms Color'; colors = {
									{color = color3_fromrgb(255, 255, 255); alpha = 0};
								}});
								group:toggle({flag = 'arms_chams'; text = 'Arms Chams'});
								group:colorpicker({flag = 'arms_chams_color'; text = 'Chams Color'; colors = {
									{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
									{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
								}});
							end;

							local group = section:group(2);
							do
								group:dropdown({flag = 'weapon_material'; text = 'Weapon Material'; default = 'Default'; options = (function()
									local list = {'Default'};
									for name, material in materials do
										table_insert(list, name);
									end;
									return list;
								end)()});
								group:toggle({flag = 'weapon_recolor'; text = 'Recolor Weapon'});
								group:colorpicker({flag = 'weapon_recolor_color'; text = 'Weapon Color'; colors = {
									{color = color3_fromrgb(255, 255, 255); alpha = 0};
								}});
								group:toggle({flag = 'weapon_chams'; text = 'Weapon Chams'});
								group:colorpicker({flag = 'weapon_chams_color'; text = 'Chams Color'; colors = {
									{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
									{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
								}});
							end;
						end;
					end;

					if (game.name == 'Counter Blox' or game.type == 'survival') then
						local section = group:section({icon = 'rbxassetid://78520709437184'; text = 'Items'; divider = 2});
						do
							local group = section:group(1);
							do
								group:toggle({flag = 'render_item_esp'; text = 'Render Item ESP'});
								group:dropdown({flag = 'item_esp_selected'; text = 'Items To ESP'; multi = true; default = {'Dropped Weapons'; 'C4'; 'Grenades'}; options = {'Dropped Weapons'; 'C4'; 'Grenades'}});
							end;

							local group = section:group(1);
							do
								group:toggle({flag = 'item_esp_distance_limit'; text = 'Distance Limit'});
								group:slider({flag = 'item_esp_distance_limit_max'; text = 'Limit'; min = 0; max = 1000; float = 10; default = 1; suffix = ''});
								group:dropdown({flag = 'item_esp_measurement'; text = 'Measurement'; default = 'Studs'; options = (function()
									local list = {};
									for name, data in measurements do
										table_insert(list, name);
									end;
									return list;
								end)()});
							end;

							local group = section:group(1);
							do
								group:toggle({flag = 'item_esp_name'; text = 'Item Name'; default = true});
								group:colorpicker({flag = 'item_esp_name_color'; text = 'Name Color'; colors = {
									{color = {color3_fromrgb(107, 108, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true; disable_gradient = true};
								}});
								group:toggle({flag = 'item_esp_icon'; text = 'Item Icon'; default = true});
								group:colorpicker({flag = 'item_esp_icon_color'; text = 'Icon Color'; colors = {
									{color = {color3_fromrgb(255, 255, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true; disable_gradient = true};
								}});
								group:toggle({flag = 'item_esp_distance'; text = 'Item Distance'; default = true});
								group:colorpicker({flag = 'item_esp_distance_color'; text = 'Distance Color'; colors = {
									{color = {color3_fromrgb(107, 108, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true; disable_gradient = true};
								}});
							end;

							local group = section:group(2);
							do
								group:slider({flag = 'item_esp_text_size'; text = 'Text Size'; min = 0; max = 25; float = 1; default = 6; suffix = 'px'});
								group:slider({flag = 'item_esp_text_offset'; text = 'Text Offset'; min = 0; max = 25; float = 1; default = 10; suffix = 'px'});
								group:slider({flag = 'item_esp_text_gap'; text = 'Text Gap'; min = 0; max = 10; float = 1; default = 5; suffix = 'px'});
								group:slider({flag = 'item_esp_text_outline_thickness'; text = 'Text Outline Thickness'; min = 0; max = 3; float = 1; default = 1; suffix = 'px'});
								group:dropdown({flag = 'item_esp_font'; text = 'Font'; default = 'graph'; options = (function()
									local list = {};
									for name, font in fonts do
										table_insert(list, name);
									end;
									return list;
								end)()});
							end;

							local group = section:group(2);
							do
								group:slider({flag = 'item_esp_icon_size'; text = 'Icon Size'; min = 0; max = 25; float = 1; default = 20; suffix = 'px'});
							end;
						end;
					end;
				end;

				local group = tab:group('Players');
				do
					local section = group:section({icon = 'rbxassetid://83822347118679'; text = 'Globals'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'render_esp'; text = 'Render ESP'});
							group:toggle({flag = 'optimize_esp'; text = 'Optimize ESP'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'esp_distance_limit'; text = 'Distance Limit'});
							group:slider({flag = 'esp_distance_limit_max'; text = 'Limit'; min = 0; max = 1000; float = 10; default = 1; suffix = ''});
							group:dropdown({flag = 'esp_measurement'; text = 'Measurement'; default = 'Studs'; options = (function()
								local list = {};
								for name, data in measurements do
									table_insert(list, name);
								end;
								return list;
							end)()});
						end;

						local group = section:group(1);
						do
							group:slider({flag = 'esp_box_thickness'; text = 'Box Thickness'; min = 0; max = 3; float = 1; default = 1; suffix = 'px'});
							group:slider({flag = 'esp_box_outline_thickness'; text = 'Box Outline Thickness'; min = 0; max = 3; float = 1; default = 1; suffix = 'px'});
						end;

						local group = section:group(1);
						do
							group:slider({flag = 'esp_tracer_thickness'; text = 'Tracer Thickness'; min = 0; max = 3; float = 1; default = 1; suffix = 'px'});
							group:slider({flag = 'esp_tracer_outline_thickness'; text = 'Tracer Outline Thickness'; min = 0; max = 3; float = 1; default = 1; suffix = 'px'});
							group:dropdown({flag = 'esp_tracer_position'; text = 'Tracer Position'; default = 'down'; options = {'up'; 'center'; 'down'}});
							group:slider({flag = 'esp_tracer_offset'; text = 'Tracer Offset'; min = -25; max = 25; float = 1; default = 0; suffix = 'px'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'esp_bar_animated'; text = 'Animated Bars'});
							group:slider({flag = 'esp_bar_offset'; text = 'Bar Offset'; min = 0; max = 10; float = 1; default = 4; suffix = 'px'});
							group:slider({flag = 'esp_bar_thickness'; text = 'Bar Thickness'; min = 0; max = 3; float = 1; default = 1; suffix = 'px'});
						end;

						local group = section:group(1);
						do
							group:slider({flag = 'esp_text_size'; text = 'Text Size'; min = 0; max = 25; float = 1; default = 6; suffix = 'px'});
							group:slider({flag = 'esp_text_offset'; text = 'Text Offset'; min = 0; max = 25; float = 1; default = 10; suffix = 'px'});
							group:slider({flag = 'esp_text_gap'; text = 'Text Gap'; min = 0; max = 10; float = 1; default = 5; suffix = 'px'});
							group:slider({flag = 'esp_text_outline_thickness'; text = 'Text Outline Thickness'; min = 0; max = 3; float = 1; default = 1; suffix = 'px'});
							group:dropdown({flag = 'esp_font'; text = 'Font'; default = 'graph'; options = (function()
								local list = {};
								for name, font in fonts do
									table_insert(list, name);
								end;
								return list;
							end)()});
						end;

						if (game.name ~= 'Phantom Forces') then
							local group = section:group(1);
							do
								group:slider({flag = 'esp_icon_size'; text = 'Icon Size'; min = 0; max = 25; float = 1; default = 20; suffix = 'px'});
								group:slider({flag = 'esp_icon_offset'; text = 'Icon Offset'; min = 0; max = 25; float = 1; default = 10; suffix = 'px'});
							end;
						end;
					end;

					local tags = {
						{
							tag = 'E';
							icon = 'rbxassetid://113008010371102';
							text = 'Enemies';
							text2 = 'Render Enemies';
							text3 = 'Enemies Chams';
						};
						{
							tag = 'T';
							icon = 'rbxassetid://114669860775469';
							text = 'Teammates';
							text2 = 'Render Teammates';
							text3 = 'Teammates Chams';
						}
					};
					for _, data in tags do
						local section = group:section({icon = data.icon; text = data.text; divider = 2});

						local group = section:group(1);
						do
							group:toggle({flag = (data.tag .. 'esp_render'); text = data.text2});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = (data.tag .. 'esp_box'); text = 'Box'; default = true});
							group:colorpicker({flag = (data.tag .. 'esp_box_color'); text = 'Box Color'; colors = {
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0.5; 0.5}; rotation = {auto = true}; gradient = true};
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0; 0.5}; rotation = {auto = true}; gradient = true; disable_gradient = true};
							}});
							group:toggle({flag = (data.tag .. 'esp_tracer'); text = 'Tracer'; default = true});
							group:colorpicker({flag = (data.tag .. 'esp_tracer_color'); text = 'Tracer Color'; colors = {
								{color = {color3_fromrgb(255, 255, 255); color3_fromhsv(0,0,0)}; alpha = {0.5; 0}; rotation = {auto = true}; gradient = true; disable_gradient = true};
							}});
							group:toggle({flag = (data.tag .. 'esp_health'); text = 'Health'; default = true});
							group:toggle({flag = (data.tag .. 'esp_healthbar'); text = 'Health Bar'; default = true});
							group:colorpicker({flag = (data.tag .. 'esp_health_color'); text = 'Health Color'; colors = {
								{color = {color3_fromrgb(107, 108, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true; disable_gradient = true};
							}});
							group:colorpicker({flag = (data.tag .. 'esp_healthbar_color'); text = 'Bar Color'; colors = {
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {value = 90}; gradient = true};
								{color = {color3_fromrgb(0, 0, 0); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {}; gradient = true; disable_gradient = true};
							}});

							if (game.name == 'Counter Blox') then
								group:toggle({flag = (data.tag .. 'esp_armorbar'); text = 'Armor Bar'; default = true});
								group:colorpicker({flag = (data.tag .. 'esp_armorbar_color'); text = 'Bar Color'; colors = {
									{color = {color3_fromrgb(107, 108, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {}; gradient = true; disable_gradient = true};
									{color = {color3_fromrgb(0, 0, 0); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {}; gradient = true; disable_gradient = true};
								}});
							end;

							group:toggle({flag = (data.tag .. 'esp_skeleton'); text = 'Skeleton'});
							group:colorpicker({flag = (data.tag .. 'esp_skeleton_color'); text = 'Skeleton Color'; colors = {
								{color = {color3_fromrgb(255, 255, 255); color3_fromhsv(0,0,0)}; alpha = {0.5; 0.5}; rotation = {auto = true}; gradient = true; disable_gradient = true};
							}});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = (data.tag .. 'esp_name'); text = 'Name'; default = true});
							group:colorpicker({flag = (data.tag .. 'esp_name_color'); text = 'Name Color'; colors = {
								{color = {color3_fromrgb(107, 108, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true; disable_gradient = true};
							}});

							if (game.type ~= 'universal') then
								group:toggle({flag = (data.tag .. 'esp_weapon'); text = 'Weapon'; default = true});

								if (game.name == 'Counter Blox') then
									group:toggle({flag = (data.tag .. 'esp_weapon_icon'); text = 'Weapon Icon'; default = true});
								end;

								group:colorpicker({flag = (data.tag .. 'esp_weapon_color'); text = 'Weapon Color'; colors = {
									{color = {color3_fromrgb(107, 108, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true; disable_gradient = true};
								}});

								if (game.name == 'Counter Blox') then
									group:colorpicker({flag = (data.tag .. 'esp_weapon_icon_color'); text = 'Icon Color'; colors = {
										{color = {color3_fromrgb(255, 255, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true; disable_gradient = true};
									}});
								end;
							end;

							group:toggle({flag = (data.tag .. 'esp_distance'); text = 'Distance'; default = true});
							group:colorpicker({flag = (data.tag .. 'esp_distance_color'); text = 'Distance Color'; colors = {
								{color = {color3_fromrgb(107, 108, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true; disable_gradient = true};
							}});
							group:toggle({flag = (data.tag .. 'esp_visiblity'); text = 'Visiblity'; default = true});
							group:colorpicker({flag = (data.tag .. 'esp_visiblity_color'); text = 'Visiblity Color'; colors = {
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true};
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true};
							}});

							if (game.name == 'Counter Blox') then
								group:toggle({flag = (data.tag .. 'esp_bomb'); text = 'Has Bomb'; default = true});
								group:colorpicker({flag = (data.tag .. 'esp_bomb_color'); text = 'Text Color'; colors = {
									{color = {color3_fromrgb(107, 108, 255); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true; disable_gradient = true};
								}});
							end;
						end;

						local group = section:group(2);
						do
							group:toggle({flag = (data.tag .. 'chams'); text = data.text3});
							group:dropdown({flag = (data.tag .. 'chams_type'); text = 'Chams Type'; default = 'Highlight'; options = {'Highlight'; 'Boxes'}});
						end;

						local group = section:group(2);
						do
							group:toggle({flag = (data.tag .. 'invisible_chams'); text = 'Show Invisible'});
							group:colorpicker({flag = (data.tag .. 'invisible_chams_color'); text = 'Color'; colors = {
								{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
								{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
							}});
							group:toggle({flag = (data.tag .. 'visible_chams'); text = 'Show Visible'});
							group:colorpicker({flag = (data.tag .. 'visible_chams_color'); text = 'Color'; colors = {
								{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
								{color = color3_fromrgb(0, 0, 0); alpha = 0.4};
							}});
						end;

						local group = section:group(2);
						do
							group:toggle({flag = (data.tag .. 'esp_arrow'); text = 'Arrows'});
							group:dropdown({flag = (data.tag .. 'esp_arrow_render'); text = 'Render'; default = 'Always'; options = {'Invisible'; 'Visible'; 'Always'}});
							group:dropdown({flag = (data.tag .. 'esp_arrow_image'); text = 'Image'; default = '2'; options = {'1'; '2'}});
							group:colorpicker({flag = (data.tag .. 'esp_arrow_color'); text = 'Color'; colors = {
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true};
								{color = {color3_fromrgb(81, 82, 192); color3_fromhsv(0,0,0)}; alpha = {0; 0}; rotation = {auto = true}; gradient = true};
							}});
							group:slider({flag = (data.tag .. 'esp_arrow_width'); text = 'Width'; min = 0; max = 30; float = 1; default = 20; suffix = 'px'});
							group:slider({flag = (data.tag .. 'esp_arrow_height'); text = 'Height'; min = 0; max = 30; float = 1; default = 20; suffix = 'px'});
							group:slider({flag = (data.tag .. 'esp_arrow_distance'); text = 'Distance'; min = 0; max = 500; float = 1; default = 0; suffix = 'px'});
						end;
					end
				end;
			end;

			local tab = window:tab({name = 'Movement'; icon = 'rbxassetid://98066506204185'; type = 'normal'});
			do
				local group = tab:group('Movement');
				do
					local section = group:section({icon = 'rbxassetid://93938604821960'; text = 'Main'; divider = (
						game.name == 'Phantom Forces' and 2
						or 1
					)});
					do
						local group = section:group(1);
						do
							local max = (game.name == 'Counter Blox' and 1000 or 300);
							local default_speed = (game.name == 'Counter Blox' and 300 or 16);
							local default_jump = (game.name == 'Counter Blox' and 300 or 50);

							group:toggle({flag = 'speedhack_enabled'; text = 'Speed Hack'});
							group:slider({flag = 'speedhack_speed'; text = 'Speed'; min = 0; max = max; float = 1; default = default_speed; suffix = ''});
							group:toggle({flag = 'jumphack_enabled'; text = 'Jump Hack'});
							group:slider({flag = 'jumphack_power'; text = 'Power'; min = 0; max = max; float = 1; default = default_jump; suffix = ''});

							if (game.name == 'Universal') then
								group:slider({flag = 'jumphack_height'; text = 'Height'; min = 0; max = 100; float = 1; default = 7.2; suffix = 'st'});
							end;
						end;

						if (game.name ~= 'Phantom Forces') then
							local group = section:group(1);
							do
								group:toggle({flag = 'invisible'; text = 'Invisible'});
							end;
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'fly'; text = 'Fly'});
							group:slider({flag = 'fly_speed'; text = 'Fly Speed'; min = 0; max = 10; float = 1; default = 5; suffix = 'st'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'bunnyhop'; text = 'Bunny Hop'});

							if (game.name ~= 'Phantom Forces') then
								group:dropdown({flag = 'bunnyhop_mode'; text = 'Mode'; default = 'Directional 2'; options = {'Default'; 'Directional 1'; 'Directional 2'}});
								group:slider({flag = 'bunnyhop_speed'; text = 'Speed'; min = 0; max = 10; float = 100; default = 0.5; suffix = 'st'});
							end;
						end;

						if (game.name == 'Phantom Forces') then
							local group = section:group(2);
							do
								group:toggle({flag = 'no_slide_cooldown'; text = 'No Slide Cooldown'});
								group:toggle({flag = 'no_fall'; text = 'No Fall'});
							end;
						end;
					end;

					local section = group:section({icon = 'rbxassetid://90882218069578'; text = 'Anti-Aim'; divider = 2});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'antiaim'; text = 'Anti-Aim'});
						end;

						local group = section:group(1);
						do
							local default = (
								(game.name == 'Phantom Forces') and 360
								or 180
							);

							group:toggle({flag = 'antiaim_yaw'; text = 'Yaw'});
							group:slider({flag = 'antiaim_yaw_degree'; text = 'Degree'; min = -default; max = default; float = 1; default = 0; suffix = '°'});
							group:dropdown({flag = 'antiaim_yaw_mode'; text = 'Mode'; default = 'Absolute'; options = {'Absolute'; 'Relative'}});
							group:toggle({flag = 'antiaim_yaw_jitter'; text = 'Jitter'});
							group:slider({flag = 'antiaim_yaw_jitter_degree'; text = 'Degree'; min = -default; max = default; float = 1; default = 0; suffix = '°'});
							group:slider({flag = 'antiaim_yaw_jitter_steps'; text = 'Steps'; min = 1; max = 5; float = 1; default = 1; suffix = ''});
							group:toggle({flag = 'antiaim_yaw_jitter_randomize'; text = 'Randomize'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'spin_bot'; text = 'Spin Bot'});
							group:slider({flag = 'spin_speed'; text = 'Speed'; min = -360; max = 360; float = 1; default = 0; suffix = '°'});
						end;

						if (game.type == 'fps') then
							local group = section:group(1);
							do
								group:toggle({flag = 'antiaim_pitch'; text = 'Pitch'});
								group:slider({flag = 'antiaim_pitch_degree'; text = 'Degree'; min = -180; max = 180; float = 1; default = 0; suffix = '°'});
								group:dropdown({flag = 'antiaim_pitch_mode'; text = 'Mode'; default = 'Absolute'; options = {'Absolute'; 'Relative'}});
								group:toggle({flag = 'antiaim_pitch_jitter'; text = 'Jitter'});
								group:slider({flag = 'antiaim_pitch_jitter_degree'; text = 'Degree'; min = -360; max = 360; float = 1; default = 0; suffix = '°'});
								group:slider({flag = 'antiaim_pitch_jitter_steps'; text = 'Steps'; min = 1; max = 5; float = 1; default = 1; suffix = ''});
								group:toggle({flag = 'antiaim_pitch_jitter_randomize'; text = 'Randomize'});
							end;

							if (game.name == 'Phantom Forces') then
								local group = section:group(1);
								do
									group:toggle({flag = 'force_stance'; text = 'Force Stance'; callback = function()
										internal.need_stance_spoof = true;
									end});
									group:dropdown({flag = 'force_stance_mode'; text = 'Stance'; default = 'Crouch'; options = {'Stand','Crouch','Prone'}; callback = function()
										internal.need_stance_spoof = true;
									end});
								end;
							end;
						end;

						if (game.name == 'Universal') then
							local group = section:group(2);
							do
								group:dropdown({flag = 'fr_camera_fix'; text = 'Camera Fix'; default = '1'; options = {'1'; '2'}});
							end;
						end;

						if (game.name == 'Phantom Forces') then
							local group = section:group(2);
							do
								group:toggle({flag = 'fake_lag'; text = 'Fake Lag'});
								group:slider({flag = 'fake_lag_length'; text = 'Lag Length'; min = 0; max = 1; float = 100; default = 0.15; suffix = 's'});
								group:slider({flag = 'fake_lag_delay'; text = 'Lag Cooldown'; min = 0; max = 1; float = 100; default = 0.15; suffix = 's'});
								group:slider({flag = 'fake_lag_chance'; text = 'Lag Chance'; min = 0; max = 100; float = 1; default = 50; suffix = '%'});
							end;

							local group = section:group(2);
							do
								group:toggle({flag = 'desync'; text = 'Desync'});
								group:slider({flag = 'desync_size'; text = 'Desync Size'; min = 0; max = 100; float = 1; default = 50; suffix = ''});
							end;
						end;

						local group = section:group(2);
						do
							local settings = (
								(game.name == 'Phantom Forces') and {
									min = -10;
									max = 10;
									default = 5;
								}

								or {
									min = -100;
									max = 100;
									default = 100;
								}
							);

							group:toggle({flag = 'jitter_position'; text = 'Jitter Position'});
							group:dropdown({flag = 'jitter_position_mode'; text = 'Mode'; default = 'Absolute'; options = {'Absolute'; 'Relative'}});
							group:slider({flag = 'jitter_position_x'; text = 'X'; min = (settings.min); max = (settings.max); float = 1; default = (settings.default); suffix = 'st'});
							group:slider({flag = 'jitter_position_y'; text = 'Y'; min = (settings.min); max = (settings.max); float = 1; default = (settings.default); suffix = 'st'});
							group:slider({flag = 'jitter_position_z'; text = 'Z'; min = (settings.min); max = (settings.max); float = 1; default = (settings.default); suffix = 'st'});
							group:toggle({flag = 'jitter_position_negative'; text = 'Negative'});
							group:toggle({flag = 'jitter_position_randomize'; text = 'Randomize'});
						end;
					end;
				end;
			end;

			local tab = window:tab({name = 'Miscellaneous'; icon = 'rbxassetid://79410569781990'; type = 'normal'});
			do
				local group = tab:group('Miscellaneous');
				do
					local section = group:section({icon = 'rbxassetid://128179639942125'; text = 'Security'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'name_protection'; text = 'Name Protection [visual]'; callback = function()
								update_name_protection();
							end});

							if (game.name == 'Counter Blox') then
								group:toggle({flag = 'anti_kick'; text = 'Anti-Kick'});
							end;
						end;
					end;

					if (game.type == 'fps' or game.type == 'survival') then
						local section = group:section({icon = 'rbxassetid://104795979648609'; text = 'Gun Mods'; divider = 1});
						do
							local group = section:group(1);
							do
								group:toggle({flag = 'modify_recoil'; text = 'Modify Recoil'});
								group:slider({flag = 'recoil_percent'; text = 'Recoil'; min = 0; max = 100; float = 1; default = 100; suffix = '%'});
								group:toggle({flag = 'modify_spread'; text = 'Modify Spread'});
								group:slider({flag = 'spread_percent'; text = 'Spread'; min = 0; max = 100; float = 1; default = 100; suffix = '%'});
							end;

							if (game.name == 'Counter Blox') then
								local group = section:group(1);
								do
									group:toggle({flag = 'infinite_ammo'; text = 'Infinite Ammo'});
									group:toggle({flag = 'modify_firerate'; text = 'Modify Fire Rate'});
									group:slider({flag = 'firerate_percent'; text = 'Fire Rate'; min = 0; max = 100; float = 1; default = 100; suffix = '%'});
								end;

								local group = section:group(1);
								do
									group:toggle({flag = 'extra_shot'; text = 'Extra Shots'});
									group:slider({flag = 'extra_shots'; text = 'Shots'; min = 0; max = 50; float = 1; default = 2; suffix = ''});
								end;
							elseif (game.name == 'Phantom Forces') then
								group:toggle({flag = 'instant_reload'; text = 'Instant Reload'});
								group:toggle({flag = 'no_gun_sway'; text = 'No Gun Sway'});
								group:toggle({flag = 'no_walk_sway'; text = 'No Walk Sway'});
								group:toggle({flag = 'no_camera_sway'; text = 'No Camera Sway'});
								group:toggle({flag = 'faster_aim'; text = 'Modify Aim Animation'});
								group:slider({flag = 'aim_percent'; text = 'Aim Animation Speed'; min = 0; max = 100; float = 1; default = 100; suffix = '%'});
							end;
						end;
					end;

					local section = group:section({icon = 'rbxassetid://96864085009980'; text = 'Other'; divider = 2});
					do
						if (game.type == 'fps' or game.type == 'survival') then
							for _, data in {
								{'hit'; 'Hit'};
								{'kill'; 'Kill'};
							} do
								local group = section:group(1);
								do
									group:toggle({flag = (data[1] .. '_sound'); text = (data[2] .. ' Sound')});
									group:button({text = 'Test Sound'; callback = function()
										play_sound('eternal/sounds/' .. (flags[data[1] .. '_sound_selected']), flags[data[1] .. '_sound_volume']);
									end});
									group:slider({flag = (data[1] .. '_sound_volume'); text = 'Volume'; min = 0; max = 5; float = 10; default = 2; suffix = ''});
									local dropdown = group:dropdown({flag = (data[1] .. '_sound_selected'); text = 'Selected Sound'; default = ''; options = {}});

									local function refresh()
										local sounds = {};
										for _, sound in listfiles('eternal/sounds') do
											table_insert(sounds, string_sub(sound, #'eternal/sounds/' + 1, #sound));
										end
										dropdown:set_options(sounds);
									end; refresh();

									group:button({text = 'Refresh Sound List'; callback = function()
										refresh();
									end});
								end;
							end;

							local group = section:group(2);
							do
								group:toggle({flag = 'auto_chat'; text = 'Auto Chat'});
								local dropdown = group:dropdown({flag = 'auto_chat_selected'; text = 'Selected Chat List'; default = ''; options = {}});

								local function refresh()
									local chats = {};
									for _, chat in listfiles('eternal/chat') do
										table_insert(chats, string_sub(chat, #'eternal/chat/' + 1, #chat));
									end
									dropdown:set_options(chats);
								end; refresh();

								group:button({text = 'Refresh Chat List'; callback = function()
									refresh();
								end});
								group:dropdown({flag = 'auto_chat_mode'; text = 'Mode'; default = 'Spam'; options = (game.type == 'Universal' and {'Spam'} or {'Spam'; 'Chat On Kill'})});
								group:slider({flag = 'auto_chat_delay'; text = 'Send Delay'; min = 1; max = 5; float = 100; default = 2; suffix = 's'});
							end;

							if (game.name == 'Phantom Forces') then
								local group = section:group(2);
								do
									group:toggle({flag = 'custom_kill_message'; text = 'Custom Kill Message'});
									group:textbox({flag = 'custom_kill_message_text'; text = 'Message'; default = 'ez'});
								end;

								local group = section:group(2);
								do
									internal.unlock_all = (function(bool)
										if (bool) then
											local class_data = internal.modules.PlayerDataUtils.getClassData(
												internal.modules.PlayerDataClientInterface.getPlayerData()
											);
						
											for _, class in {'Assault'; 'Scout'; 'Support'; 'Recon'} do
												local primary = class_data[class].Primary.Name;
												local secondary = class_data[class].Secondary.Name;
						
												internal.fake_weapons[class] = {primary; secondary};
												internal.real_weapons[class] = {primary; secondary};
											end;
										end;
						
										internal.modules.PlayerDataClientInterface.getPlayerData().unlockAll = bool;
									end);

									internal.unlock_camos = (function(bool)
										for name, data in internal.camo_database do
											if (data.Case) then
												internal.modules.PlayerDataUtils.getCasePacketData(
													internal.modules.PlayerDataClientInterface.getPlayerData(),
													data.Case,
													true
												).Skins[name] = {
													ALL = bool;
												};
											end;
										end;
									end);

									group:toggle({flag = 'unlock_all'; text = 'Unlock All'; callback = internal.unlock_all});
									group:toggle({flag = 'unlock_camos'; text = 'Unlock Camos'; callback = internal.unlock_camos});
									group:toggle({flag = 'unlock_attachments'; text = 'Unlock Attachments'});
								end;
							end;
						end;
					end;
				end;
			end;

			if (game.name == 'Counter Blox') then
				local images = client.PlayerGui.Client.Images;

				local icons = {};
				local categories = {
					['Knife'] = (function()
						local list = {};

						for _, knife in internal.CurrentKnives do
							if (images:FindFirstChild(knife)) then
								table_insert(list, knife);
							end;
						end;

						return (list);
					end)();
					['Glove'] = (function()
						local list = {};

						for _, glove in internal.CurrentGloves do
							if (images:FindFirstChild(glove)) then
								table_insert(list, glove);
							end;
						end;

						return (list);
					end)();
				};

				for _, instance in images:GetChildren() do
					local list = {};
					for _, instance in instance:GetChildren() do
						if (instance:IsA('StringValue')) then
							list[instance.Name] = instance.Value;
						end;
					end;

					local name = instance.Name;
					if (instance:IsA('StringValue')) then
						local type = instance.Value;
						if (not categories[type]) then
							categories[type] = {};
						end;

						table_insert(categories[type], name);
					end;

					icons[name] = list;
				end;

				categories.Equipment = nil;

				local tab = window:tab({
					name = 'Skin Changer';
					icon = 'rbxassetid://103764985385730';
					type = 'skin changer';

					skins_rules = {
						stattrak = true;
					}; 

					categories = (function()
						local list = {};

						for category, data in categories do
							list[category] = {
								icon = (
									category == 'Heavy' and icons.M249.Stock
									or category == 'Rifle' and icons.AWP.Stock
									or category == 'SMG' and icons.UMP.Stock
									or category == 'Pistol' and icons.DesertEagle.Stock
									or category == 'Knife' and icons.Bayonet.Stock
									or ''
								);
								items = {};
							};

							for _, item in data do
								list[category].items[item] = {
									icon = icons[item].Stock or '';
								};
							end;
						end;

						return (list);
					end)();

					skins = (function()
						local list = {};

						local rarities = client.PlayerGui.Client.Rarities;
						for _, instance in client.PlayerGui.Client.Images:GetChildren() do
							local item_name = instance.Name;

							for _, skin in instance:GetChildren() do
								local skin_name = skin.Name;

								if (skin_name ~= 'Stock' and skin_name ~= 'DisplayName' and skin_name ~= 'Type') then
									local search = (item_name .. '_' .. skin_name);

									local found = rarities:FindFirstChild(search);
									if (found) then
										list[skin_name] = {item = item_name; icon = skin.Value or ''; rarity = found.Value};
									end;
								end;
							end;
						end;

						return (list);
					end)();

					rarities = (function()
						local list = {};

						for _, rarity in client.PlayerGui.Client.Colors:GetChildren() do
							list[rarity.Name] = {color = rarity.Value};
						end;

						return (list);
					end)();

					on_add = function(args)
						skins[args.id] = args;
					end;

					on_remove = function(args)
						skins[args.id] = nil;
					end;

					on_clear = function()
						skins = {};
					end;
					
					icons_scale = {x = 1; y = ((1 / 4) * 3)};
				});
			end;

			local tab = window:tab({
				name = 'Files';
				icon = 'rbxassetid://115785869384687';
				type = 'files';

				get_configs = function()
					local configs = {};
					
					local path = 'eternal/games/' .. game.name .. '/configs/';
					for _, file in listfiles(path) do
						configs[string_sub(file, #path + 1, #file)] = http:JSONDecode(readfile(file));
					end;

					return (configs);
				end;

				on_create = function(name)
					local path = ('eternal/games/' .. game.name .. '/configs/' .. name);
					if (not isfile(path)) then
						writefile(path, http:JSONEncode(flags));

						repeat fwait(0.1); until (isfile(path));
						return (true);
					end;
				end;

				on_save = function(name)
					writefile('eternal/games/' .. game.name .. '/configs/' .. name, http:JSONEncode(flags));
				end;

				on_delete = function(name)
					local path = ('eternal/games/' .. game.name .. '/configs/' .. name);
					if (isfile(path)) then
						delfile(path);
						repeat fwait(0.1); until (not isfile(path));
					end;
				end
			});

			local tab = window:tab({name = 'Settings'; icon = 'rbxassetid://123909051282257'; type = 'settings'});
			do
				local group = tab:group('Settings');
				do
					local section = group:section({icon = ''; text = ''; divider = 2});
					do
						local group = section:group(1);
						do
							for index, color in window:get_colors() do
								group:colorpicker({flag = ('ui_color_' .. index); text = ('Color ' .. index); colors = {
									{color = color};
								}; callback = function(color)
									window:set_color(index, color);
								end});
							end;
						end;

						local group = section:group(2);
						do
							group:toggle({flag = 'show_gui'; text = 'Gui'; bind = {path = 'KeyCode'; name = 'LeftAlt'}; default = true; callback = function(bool)
								window:hide(not bool);
							end});
							group:button({text = 'Unhook'; callback = function()
								getgenv().eternal_unhook();
							end});
						end;

						local group = section:group(2);
						do
							group:toggle({flag = 'show_hotkeys'; text = 'Hotkeys'; callback = function(bool)
								hotkeys:hide(not bool);
							end});

							if (game.name == 'Counter Blox') then
								group:toggle({flag = 'show_spectator_list'; text = 'Spectator List'; callback = function(bool)
									spectator_list:hide(not bool);
								end});
							end;

							if (game.name ~= 'Universal') then
								group:toggle({flag = 'show_hitlogs'; text = 'Hit Logs'});
							end;

							group:toggle({flag = 'show_watermark'; text = 'Watermark'; callback = function(bool)
								watermark:hide(not bool);
							end});
						end;
					end;
				end;
			end;
		end;

		-- ☆ //   variables   // ☆ --

		local is_gui_visible;

		local player_cache = {};
		local item_cache = {};
		
		local vertices = {
			vector3_new(-0.5, -0.5, -0.5);
			vector3_new(-0.5,  0.5, -0.5);
			vector3_new( 0.5, -0.5, -0.5);
			vector3_new( 0.5,  0.5, -0.5);
			vector3_new(-0.5, -0.5,  0.5);
			vector3_new(-0.5,  0.5,  0.5);
			vector3_new( 0.5, -0.5,  0.5);
			vector3_new( 0.5,  0.5,  0.5);
		};

		local material_modifier = {
			[Enum.Material.DiamondPlate] = 3;
			[Enum.Material.CorrodedMetal] = 2;
			[Enum.Material.Metal] = 2;
			[Enum.Material.Concrete] = 2;
			[Enum.Material.Brick] = 2;
			[Enum.Material.Wood] = 0.1;
			[Enum.Material.WoodPlanks] = 0.1;
		};

		local beams = {};
		local weapon;
		local last_shoot = 0;
		local should_shoot;
		local last_spawn = 0;

		local character;
		local root;
		local head;
		local humanoid;

		local client_cache = {
			desync = {};
		};

		local can_silent_aim;
		local can_aimbot;
		local aimbot_target;
		local aimbot_fov = drawing.new('circle'); aimbot_fov.zindex = 999999;
		local aimbot_deadfov = drawing.new('circle'); aimbot_deadfov.zindex = 999999;
		local aimbot_snapline = drawing.new('line'); aimbot_snapline.zindex = 999999 + 1;

		local get_character;
		local get_health;
		local get_body_part;
		local get_weapon;
		local team_check;
		local calculate_bounds;
		local set_color;
		local clear_drawings;
		local clear_chams;
		local beam;
		local can_shoot;
		local penetration_check;
		local wall_check;
		local shoot;
		local predict;
		local trajectory;
		local is_weapon_valid;
		local move_directionally;

		LPH_NO_VIRTUALIZE(function()
			get_character = function(player)
				if (game.name == 'Phantom Forces') then
					return player_cache[player.Name].advanced.character_model;
				else
					return (player.Character);
				end;
			end;

			get_health = function(player, character)
				if (game.name == 'Phantom Forces') then
					local entry = player_cache[player.Name].advanced.entry;

					return (entry and entry:getHealth()), 100;
				elseif (character:FindFirstChild('Humanoid')) then
					return character.Humanoid.Health, (game.name == 'Rivals' and 150 or 100);
				end;
			end;

			get_body_part = function(player, character, part)
				if (game.name == 'Phantom Forces') then
					local hash = player_cache[player.Name].advanced.character_model_hash;

					return (hash and hash[part]);
				elseif (game.name == 'Lone Survival') then
					return character:GetAttribute('LastACViolationPos');
				else
					return (
						character:FindFirstChild(part)

						or part == 'Torso' and (
							character:FindFirstChild('UpperTorso')
						)

						or part == 'LeftArm' and (
							character:FindFirstChild('Left Arm')
							or character:FindFirstChild('LeftUpperArm')
							or character:FindFirstChild('LeftLowerArm')
						)

						or part == 'RightArm' and (
							character:FindFirstChild('Right Arm')
							or character:FindFirstChild('RightUpperArm')
							or character:FindFirstChild('RightLowerArm')
						)

						or part == 'LeftLeg' and (
							character:FindFirstChild('Left Leg')
							or character:FindFirstChild('LeftUpperLeg')
							or character:FindFirstChild('LeftLowerLeg')
						)

						or part == 'RightLeg' and (
							character:FindFirstChild('Right Leg')
							or character:FindFirstChild('RightUpperLeg')
							or character:FindFirstChild('RightLowerLeg')
						)
					);
				end;
			end;

			get_weapon = function(player, character)
				if (game.name == 'Phantom Forces') then
					local object = player_cache[player.Name].advanced.weapon_object;

					return (object and object.weaponName);
				elseif (game.name == 'Counter Blox') then
					return character.EquippedTool.Value;
				end;
			end;

			team_check = function(player)
				if (game.name == 'Rivals') then
					local player_team = player:GetAttribute('TeamID');
					local client_team = client:GetAttribute('TeamID');

					return (player_team and client_team and string_byte(player_team) == string_byte(client_team));
				else
					return (player.Team == client.Team);
				end;
			end;
			
			calculate_bounds = function(model)
				local minX, minY, minZ = math_huge, math_huge, math_huge;
				local maxX, maxY, maxZ = -math_huge, -math_huge, -math_huge;
				local min_width = 2.5;
				
				for _, part in model:GetChildren() do
					if (part:IsA('BasePart') and part.Name ~= 'Gun') then
						local cframe, size = part.CFrame, part.Size
						local sx, sy, sz = size.X, size.Y + 0.2, size.Z
						local yOffset = 0.2 * sy
						
						for _, v in vertices do
							local world_pos = cframe:PointToWorldSpace(
								vector3_new(v.X * sx, v.Y * sy + yOffset, v.Z * sz)
							);

							local worldX = world_pos.X;
							local worldY = world_pos.Y;
							local worldZ = world_pos.Z;
							
							minX = math_min(minX, worldX);
							minY = math_min(minY, worldY);
							minZ = math_min(minZ, worldZ);
							maxX = math_max(maxX, worldX);
							maxY = math_max(maxY, worldY);
							maxZ = math_max(maxZ, worldZ);
						end;
					end;
				end;
				
				if (minX == math_huge) then 
					return;
				end;
				
				local sizeX = math_max(maxX - minX, min_width);
				local sizeY = maxY - minY;
				local sizeZ = maxZ - minZ;
				
				local centerX = (minX + maxX) * 0.5;
				local centerY = (minY + maxY) * 0.5;
				local centerZ = (minZ + maxZ) * 0.5;
				
				return vector3_new(centerX, centerY, centerZ), vector3_new(sizeX, sizeY, sizeZ);
			end;

			set_color = function(data)
				local drawing = data.drawing;
				local flag = data.flag;
				local index = data.index;
				local fill = data.fill;

				local colors = flag.color[index];
				local alphas = flag.alpha[index];

				if (flag.gradient[index]) then
					drawing[(fill and 'fill_' or '') .. 'color'] = {color3_fromhsv(unpack(colors[1])); color3_fromhsv(unpack(colors[2]))};
					drawing[(fill and 'fill_' or '') .. 'alpha'] = alphas;
					drawing.gradient_rotation = flag.rotation[index][2];
				else
					local selected = flag.current[index];

					drawing[(fill and 'fill_' or '') .. 'color'] = color3_fromhsv(unpack(colors[selected]));
					drawing[(fill and 'fill_' or '') .. 'alpha'] = alphas[selected];
				end;
			end;

			clear_drawings = function(cache, ignore_arrow)
				for index, drawing in cache.drawings do
					if (ignore_arrow and index == 'arrow') then
						continue;
					end;

					if (index == 'skeleton_bones') then
						local bones = drawing;

						for index, drawing in bones do
							drawing:destroy();
							bones[index] = nil;
						end;
					else
						drawing:destroy();
						cache.drawings[index] = nil;
					end;
				end;
			end;

			clear_chams = function(cache)
				local highlight = cache.chams.highlight;
				if (highlight) then
					highlight:Destroy();
					cache.chams.highlight = nil;
				end;

				for index, box in cache.chams.boxes do
					box:Destroy();
					cache.chams.boxes[index] = nil;
				end;
			end;

			beam = function(origin, target)
				local count = 0;
				for _, data in beams do
					count += 1
					
					if (count >= 100 or (data.origin - origin).Magnitude < 0.1 and (data.target - target).Magnitude < 0.1) then
						return;
					end;
				end;

				local main_part = draw('Part');
				beams[main_part] = {
					origin = origin; 
					target = target
				};

				main_part.Parent = (game.name == 'Counter Blox' and workspace.Debris or workspace);
				main_part.Size = vector3_new(0, 0, 0);
				main_part.Massless = true;
				main_part.Transparency = 1;
				main_part.CanCollide = false;
				main_part.Position = origin;
				main_part.Anchored = true;

				local part0 = draw('Part');
				part0.Parent = main_part;
				part0.Size = vector3_new(0, 0, 0);
				part0.Massless = true;
				part0.Transparency = 1;
				part0.CanCollide = false;
				part0.Position = origin;
				part0.Anchored = true;

				local part1 = draw('Part');
				part1.Parent = main_part;
				part1.Size = vector3_new(0, 0, 0);
				part1.Massless = true;
				part1.Transparency = 1;
				part1.CanCollide = false;
				part1.Position = target;
				part1.Anchored = true;

				local attachment0 = draw('Attachment');
				attachment0.Parent = part0;

				local attachment1 = draw('Attachment');
				attachment1.Parent = part1;

				local beam = draw('Beam');
				beam.Texture = (flags.bullet_tracer_image == '1' and 'rbxassetid://446111271' or 'rbxassetid://2382169232');
				beam.TextureMode = Enum.TextureMode.Wrap;
				beam.TextureLength = 10;
				beam.LightEmission = 1;
				beam.LightInfluence = 1;
				beam.FaceCamera = true;
				beam.ZOffset = -1;
				beam.Attachment0 = attachment0;
				beam.Attachment1 = attachment1;
				beam.Enabled = true;
				beam.Width0 = flags.bullet_tracer_width;
				beam.Width1 = flags.bullet_tracer_width;
				beam.Parent = main_part;

				local alpha1, alpha2;
				if (flags.bullet_tracer_color.gradient[1]) then
					alpha1 = flags.bullet_tracer_color.alpha[1][1];
					alpha2 = flags.bullet_tracer_color.alpha[1][2];
				else
					alpha1 = flags.bullet_tracer_color.alpha[1][flags.bullet_tracer_color.current[1]];
					alpha2 = alpha1;
				end;

				local alpha1value = draw('NumberValue');
				local alpha2value = draw('NumberValue');

				alpha1value.Value = alpha1;
				alpha2value.Value = alpha2;

				local hook; hook = run.Heartbeat:Connect(function()
					beam.Transparency = numbersequence_new({
						numbersequencekeypoint_new(0, alpha1value.Value);
						numbersequencekeypoint_new(1, alpha2value.Value);
					});

					local color1, color2;
					if (flags.bullet_tracer_color.gradient[1]) then
						color1 = flags.bullet_tracer_color.color[1][1];
						color2 = flags.bullet_tracer_color.color[1][2];
					else
						color1 = flags.bullet_tracer_color.color[1][flags.bullet_tracer_color.current[1]];
						color2 = color1;
					end;

					beam.Color = colorsequence_new({
						colorsequencekeypoint_new(0, color3_fromhsv(unpack(color1)));
						colorsequencekeypoint_new(1, color3_fromhsv(unpack(color2)));
					});
				end);
				
				fwait(flags.bullet_tracer_live);
				tween:Create(alpha1value, tweeninfo_new(1), {Value = 1}):Play();
				tween:Create(alpha2value, tweeninfo_new(1), {Value = 1}):Play();
				fwait(1);
				beams[main_part] = nil;

				hook:Disconnect();
				main_part:Destroy();
				alpha1value:Destroy();
				alpha2value:Destroy();
			end;

			is_weapon_valid = (
				(game.name == 'Counter Blox') and (function()
					return (typeof(weapon) == 'Instance');
				end)

				or (game.name == 'Phantom Forces') and (function()
					return (weapon);
				end)

				or (function()

				end)
			);

			can_shoot = (
				(game.name == 'Counter Blox') and (function()
					return (is_weapon_valid() and (tick() - last_shoot) >= (weapon:FindFirstChild('FireRate') and weapon.FireRate.Value or 0.4));
				end)

				or (game.name == 'Phantom Forces') and (function()
					local character = internal.character;

					return (
						character and not character.reloading
						and is_weapon_valid()
						and (tick() - last_shoot) > (60 / weapon:getFirerate())
					);
				end)

				or (function()

				end)
			);

			penetration_check = (
				(game.name == 'Counter Blox') and (function(origin, destination, target)
					if (typeof(weapon) ~= 'Instance' or not weapon:FindFirstChild('Penetration')) then
						return;
					end;

					local direction = ((destination - origin).Unit * 900);
					local power = (weapon.Penetration.Value / 100);

					local hit_list = {unpack(physics_ignore)};

					local parts_penetrated = 0;
					local limit = 0;

					local hit;
					local position;
					local normal;

					local part_modifier = 1;
					local damage_modifier = 1;

					repeat
						hit, position, normal = workspace:FindPartOnRayWithIgnoreList(ray_new(origin, direction), hit_list, false, true, nil,nil,nil,nil,nil, true);
					
						local parent = hit and hit.Parent;
						if (parent) then
							local name = hit.Name;

							part_modifier = (
								name == 'nowallbang' and 100 or
								hit:FindFirstChild('PartModifier') and hit.PartModifier.Value or
								(name == 'Grate' or parent:FindFirstChild('Humanoid')) and 0.1 or
								(hit.Transparency == 1 or not hit.CanCollide or name == 'Glass' or name == 'Cardboard' or hit:IsDescendantOf(workspace.Ray_Ignore) or hit:IsDescendantOf(workspace.Debris) or parent.Name == 'Hitboxes') and 0 or
								material_modifier[hit.Material] or
								1
							);

							if (part_modifier > 0) then
								parts_penetrated += 1;
							end;

							local _, exit = workspace:FindPartOnRayWithWhitelist(ray_new(position + (direction * 1), direction * -2), {hit}, true);
							local penetrated = (exit - position).Magnitude * part_modifier;

							limit = math_min(power, limit + penetrated);
							damage_modifier = 1 - limit / power;

							if (parent.Name == 'Hitboxes' or parent.Parent and parent.Parent:FindFirstChild('Humanoid2') or parent:FindFirstChild('Humanoid2') or parent:FindFirstChild('Humanoid') and (hit.Transparency<1 or name == 'HeadHB') and parent:IsA('Model')) then
								table_insert(hit_list, parent);
							else
								table_insert(hit_list, hit);
							end;

							for _, model in target do
								if (hit:IsDescendantOf(model)) then
									return true;
								end;
							end;
						end;
					until (
						not hit or 
						limit >= power or 
						damage_modifier <= 0
					);
				end)

				or (game.name == 'Phantom Forces') and (function(origin, destination)
					if (not is_weapon_valid()) then return; end;
					
					local acceleration = internal.modules.PublicSettings.bulletAcceleration;
					local data = weapon._weaponData;
					local speed = data.bulletspeed;
					local depth = data.penetrationdepth;

					if (not speed) then return; end;

					local result;
					run_on_other_thread(function()
						result = internal.modules.BulletCheck(
							origin,
							destination,
							trajectory(
								origin,
								destination,
								-acceleration,
								speed
							),
							acceleration,
							depth,
							(1 / 30)
						);
					end);

					repeat fwait(); until (result ~= nil);
					return (result);
				end)
			);
			
			wall_check = (
				(game.name == 'Phantom Forces') and (function(origin, goal)
					local hit;
					local ignore = physics_ignore;
					repeat
						hit = raycast(2, camera.CFrame.Position, (origin - camera.CFrame.Position).Unit * 900, ignore);

						if (hit and (hit.Transparency == 1 or not hit.CanCollide)) then
							table_insert(ignore, hit);
						end;
					until (not hit or hit.Transparency < 1 and hit.CanCollide);

					return (hit and hit:IsDescendantOf(goal));
				end)

				or (function(origin, goal)
					local hit = raycast(2, camera.CFrame.Position, (origin - camera.CFrame.Position).Unit * 900);
					return (hit and hit:IsDescendantOf(goal));
				end)
			);

			shoot = (
				(game.name == 'Counter Blox') and (function(mode, origin, destination)
					if (not can_shoot()) then return; end;

					if (origin) then
						aimbot_target = {
							origin = origin;
							destination = destination;
						};
						can_silent_aim = true;
					end;

					return run_on_other_thread(internal.shoot);
				end)

				or (game.name == 'Phantom Forces') and (function(mode, origin, destination, player, head)
					if (not can_shoot()) then return; end;

					if (mode == 'rage') then
						local acceleration = internal.modules.PublicSettings.bulletAcceleration;

						local weapon_data = weapon._weaponData;
						local speed = weapon_data.bulletspeed;

						if (not speed) then return; end;

						if (weapon and weapon._magCount < 1) then
							if (weapon._spareCount >= weapon_data.magsize) then
								weapon._magCount = weapon_data.magsize;
								weapon._spareCount = weapon._spareCount - weapon._magCount;
							else
								weapon._magCount = weapon._spareCount;
								weapon._spareCount = 0;
							end;

							internal.send('reload');
						end;

						local bullets = {};
						local bullet_data = {
							camerapos = client_cache.last_update;
							firepos = origin;
							bullets = bullets;
						};

						local module = internal.modules.FirearmObject;
						for _= 1, (weapon_data.pelletcount or 1) do
							table_insert(bullets, {
								trajectory(
									origin,
									destination,
									-acceleration,
									speed
								).Unit;
								internal.ticket + internal.ticket_addition
							});
							internal.ticket_addition += 1;
						end;

						internal.send('newbullets',
							weapon.uniqueId,
							bullet_data,
							internal.modules.NetworkClient.getTime()
						);

						for _, bullet in bullets do
							internal.send('bullethit',
								weapon.uniqueId,
								player,
								destination,
								'Head',
								bullet[2],
								internal.modules.NetworkClient.getTime()
							);
						end;

						last_shoot = tick();
						weapon._magCount -= 1;
					else
						should_shoot = true;
					end;
				end)

				or (function()

				end)
			);

			predict = (
				(game.name == 'Phantom Forces') and (function()
					local function solve(v44, v45, v46, v47, v48) -- i did not write this
						if not v44 then
							return
						elseif v44 > -1.0E-10 and v44 < 1.0E-10 then
							return solve(v45, v46, v47, v48)
						else
							if v48 then
								local v49 = -v45 / (4 * v44)
								local v50 = (v46 + v49 * (3 * v45 + 6 * v44 * v49)) / v44
								local v51 = (v47 + v49 * (2 * v46 + v49 * (3 * v45 + 4 * v44 * v49))) / v44
								local v52 = (v48 + v49 * (v47 + v49 * (v46 + v49 * (v45 + v44 * v49)))) / v44
								if v51 > -1.0E-10 and v51 < 1.0E-10 then
									local v53, v54 = solve(1, v50, v52)
									if not v54 or v54 < 0 then
										return
									else
										local v55 = math.sqrt(v53)
										local v56 = math.sqrt(v54)
										return v49 - v56, v49 - v55, v49 + v55, v49 + v56
									end
								else
									local v57, _, v59 = solve(1, 2 * v50, v50 * v50 - 4 * v52, -v51 * v51)
									local v60 = v59 or v57
									local v61 = math.sqrt(v60)
									local v62, v63 = solve(1, v61, (v60 + v50 - v51 / v61) / 2)
									local v64, v65 = solve(1, -v61, (v60 + v50 + v51 / v61) / 2)
									if v62 and v64 then
										return v49 + v62, v49 + v63, v49 + v64, v49 + v65
									elseif v62 then
										return v49 + v62, v49 + v63
									elseif v64 then
										return v49 + v64, v49 + v65
									end
								end
							elseif v47 then
								local v66 = -v45 / (3 * v44);
								local v67 = -(v46 + v66 * (2 * v45 + 3 * v44 * v66)) / (3 * v44)
								local v68 = -(v47 + v66 * (v46 + v66 * (v45 + v44 * v66))) / (2 * v44)
								local v69 = v68 * v68 - v67 * v67 * v67
								local v70 = math.sqrt((math.abs(v69)))
								if v69 > 0 then
									local v71 = v68 + v70
									local v72 = v68 - v70
									v71 = v71 < 0 and -(-v71) ^ 0.3333333333333333 or v71 ^ 0.3333333333333333
									local v73 = v72 < 0 and -(-v72) ^ 0.3333333333333333 or v72 ^ 0.3333333333333333
									return v66 + v71 + v73
								else
									local v74 = math.atan2(v70, v68) / 3
									local v75 = 2 * math.sqrt(v67)
									return v66 - v75 * math.sin(v74 + 0.5235987755982988), v66 + v75 * math.sin(v74 - 0.5235987755982988), v66 + v75 * math.cos(v74)
								end;
							elseif v46 then
								local v76 = -v45 / (2 * v44)
								local v77 = v76 * v76 - v46 / v44
								if v77 < 0 then
									return
								else
									local v78 = math.sqrt(v77)
									return v76 - v78, v76 + v78
								end
							elseif v45 then
								return -v45 / v44
							end
							return
						end
					end

					return (function(destination, player, origin, predict, more_info)
						local magnitude = (destination - origin);
						
						local acceleration = -(more_info and more_info.acceleration or internal.modules.PublicSettings.bulletAcceleration);
						local speed = lerp(
							10000,
							(more_info and more_info.speed or weapon and weapon._weaponData.bulletspeed) or 10000,
							
							predict.bullet.enabled and math_clamp(predict.bullet.size / 100, 0, 1) or 0
						);

						local velocity = (function()
							if (predict.movement.enabled) then
								local cache = (player and player_cache[player.Name].movement);
								local position = (cache and cache.position);
								local time = (cache and cache.time);
								return (
									(
										position[15] and time[15] and
										(
											(position[15] - position[1]) / (time[15] - time[1])
											* (predict.movement.size / 100)
										)
									)
									or vector3_zero
								);
							else
								return (vector3_zero);
							end;
						end)();

						local r1, r2, r3, r4 = solve(
							acceleration:Dot(acceleration) * 0.25,
							acceleration:Dot(velocity),
							acceleration:Dot(magnitude) + velocity:Dot(velocity) - speed ^ 2,
							magnitude:Dot(velocity) * 2,
							magnitude:Dot(magnitude)
						);

						local x = (r1 > 0 and r1) or (r2 > 0 and r2) or (r3 > 0 and r3) or r4;
						local v = (magnitude + velocity * x + 0.5 * acceleration * x ^ 2) / x;
						return v, x;
					end);
				end)

				or (function()
					return (function(destination, player, origin, predict)
						local velocity = (function()
							if (predict.movement.enabled) then
								local cache = (player and player_cache[player.Name].movement);
								local position = (cache and cache.position);
								return (
									(
										position[15] and
										(
											(position[1] - position[15])
											* (predict.movement.size / 100)
										)
									)
									or vector3_zero
								);
							else
								return (vector3_zero);
							end;
						end)();

						return (destination + velocity);
					end);
				end)
			)();

			trajectory = (
				(game.name == 'Phantom Forces') and (function()
					return (function(origin, destination, acceleration, speed)
						local distance = (destination - origin);
						local acceleration_dot = acceleration:Dot(acceleration);
						local k = (4 * (acceleration:Dot(distance) + speed * speed)) / (2 * acceleration_dot);
						local v = (k * k - (4 * distance:Dot(distance)) / acceleration_dot) ^ 0.5;
						local time, time2 = (k - v), (k + v);
		
						time = (time < 0 and time2 or time) ^ 0.5;
						return (acceleration * time / 2 + distance / time);
					end);
				end)

				or (function()
					return (function(target, player, origin)

					end);
				end)
			)();

			move_directionally = (function(direction)
				local x,y,z = camera.CFrame:ToOrientation();
				local position = ((cframe_new(root.CFrame.Position) * cframe_angles(0, y, z)) * direction).Position;
	
				character:PivotTo(cframe_new(position, position + client.Character:GetPivot().LookVector));
			end);
		end)();

		local last_shoot_position;
		local last_chat = 0;
		local function on_kill()
			if (flags.kill_sound.bool) then
				play_sound('eternal/sounds/' .. (flags.kill_sound_selected), flags.kill_sound_volume);
			end;

			local selected = flags.auto_chat_selected;
			if (
				selected ~= ''
				and (tick() - last_chat) >= flags.auto_chat_delay
				and flags.auto_chat.bool
				and flags.auto_chat_mode == 'Chat On Kill'
			) then
				local chat = 'eternal/chat/' .. selected;

				if (isfile(chat)) then
					local texts = string_split(readfile(chat), '\n');
					local text = texts[math_random(1, #texts)];

					last_chat = tick();
					if (game.name == 'Counter Blox') then
						storage.Events.PlayerChatted:FireServer(text, false);
					elseif (game.name == 'Phantom Forces') then
						textchat:FindFirstChild('TextChannels'):FindFirstChild('Global'):SendAsync(text);
					end;
				end;
			end;
		end;

		local function on_hit(victim, damage, hit_part)
			local character;
			local health;
			local parent;

			if (game.name == 'Phantom Forces') then
				character = get_character(victim);
				health = (get_health(victim) // 1);
				parent = workspace.Ignore;
			else
				character = victim.Character;
				health = (character and (math_clamp(character.Humanoid.Health, 0, 1337) // 1) or 0);
				parent = workspace.Debris;
			end;

			if (flags.show_hitlogs.bool) then
				local color = window:get_colors()[1];
				local string_color = ('rgb(' .. math_round(color.R * 255) .. ', ' .. math_round(color.G * 255) .. ', ' .. math_round(color.B * 255) .. ')');

				window:notify(
					' '
					..
					'hit <font color="' .. (string_color) .. '">' .. (victim.Name) .. '</font> ' ..
					(hit_part and ('in the <font color="' .. (string_color) .. '">' .. (hit_part) .. '</font> ') or '') ..
					'for <font color="' .. (string_color) .. '">' .. math_round(damage) .. '</font> ' ..
					'damage; <font color="' .. (string_color) .. '">' .. (health) .. ' hp remaining</font>'
					..
					' '
					, 5
				);
			end;

			if (flags.hit_chams.bool and character) then
				local model = draw('Model');
				model.Parent = parent;
				
				if (game.name == 'Phantom Forces') then
					for part, size in {
						[get_body_part(victim, nil, 'Head')] = vector3_new(1, 1, 1);
						[get_body_part(victim, nil, 'Torso')] = vector3_new(2, 2, 1);
						[get_body_part(victim, nil, 'Left Arm')] = vector3_new(1, 2, 1);
						[get_body_part(victim, nil, 'Right Arm')] = vector3_new(1, 2, 1);
						[get_body_part(victim, nil, 'Left Leg')] = vector3_new(1, 2, 1);
						[get_body_part(victim, nil, 'Right Leg')] = vector3_new(1, 2, 1);
					} do
						local clone = part:Clone();
						local chams = draw('BoxHandleAdornment');
		
						for _, part in clone:GetChildren() do
							part:Destroy();
						end;
		
						clone.Parent = model;
						clone.Size = size;
						clone.Transparency = 1;
						clone.Anchored = true;
						clone.CanCollide = false;
		
						chams.Parent = clone;
						chams.Adornee = clone;
						chams.ZIndex = 0;
						chams.Size = clone.Size;
						chams.AlwaysOnTop = true;
						chams.Transparency = flags.hit_chams_color.alpha[1];
						chams.Color3 = color3_fromhsv(unpack(flags.hit_chams_color.color[1]));
					end;
				else
					for _, part in character:GetChildren() do
						if (
							part:IsA('BasePart')
							and part.Name ~= 'HumanoidRootPart'
							and part.Name ~= 'Gun'
							and part.Name ~= 'FakeHead'
							and part.Name ~= 'HeadHB'
						) then 
							local clone = part:Clone();
							local chams = draw('BoxHandleAdornment');
			
							for _, part in clone:GetChildren() do
								part:Destroy();
							end;
			
							clone.Parent = model;
							clone.Transparency = 1;
							clone.Anchored = true;
							clone.CanCollide = false;
			
							chams.Parent = clone;
							chams.Adornee = clone;
							chams.ZIndex = 0;
							chams.Size = clone.Size;
							chams.AlwaysOnTop = true;
							chams.Transparency = flags.hit_chams_color.alpha[1];
							chams.Color3 = color3_fromhsv(unpack(flags.hit_chams_color.color[1]));
						end;
					end;
				end;
		
				fdelay(flags.hit_chams_live, function()
					for _, part in model:GetChildren() do
						animate(part.BoxHandleAdornment, tweeninfo_new(flags.hit_chams_fade), {Transparency = 1});

						fdelay(flags.hit_chams_fade, function()
							part:Destroy();
						end);
					end;
				end);
			end;

			if (flags.hit_marker.bool and last_shoot_position) then
				local selected = flags.hit_marker_selected;

				local has_cross = table_find(selected, 'Cross');
				if (has_cross) then
					local part = draw('Part');
					local billboard = draw('BillboardGui');
					local frame = draw('Frame');

					local line1 = drawing.new('line');
					local line2 = drawing.new('line');
					local line3 = drawing.new('line');
					local line4 = drawing.new('line');
					
					part.Parent = parent;
					part.Position = last_shoot_position;
					part.Transparency = 1;
					part.CanQuery = false;
					part.CanCollide = false;
					part.Anchored = true;

					billboard.Parent = part;
					billboard.Adornee = part;
					billboard.AlwaysOnTop = true;
					billboard.Size = udim2_fromoffset(50, 50);

					frame.Parent = billboard;
					frame.Size = udim2_fromscale(1, 1);
					frame.BackgroundTransparency = 1;

					for _, line in {
						line1;
						line2;
						line3;
						line4;
					} do
						line.parent = frame;
						line.color = color3_fromrgb(255, 255, 255);
						line.alpha = 0;
						line.zindex = 99999;
						line.outline_thickness = 1;
					end;

					local center = vector2_new(25, 25);
			
					line1.from = vector2_new(-3, -3) + center;
					line1.to = vector2_new(-10, -10) + center;

					line2.from = vector2_new(3, -3) + center;
					line2.to = vector2_new(10, -10) + center;

					line3.from = vector2_new(-3, 3) + center;
					line3.to = vector2_new(-10, 10) + center;

					line4.from = vector2_new(3, 3) + center;
					line4.to = vector2_new(10, 10) + center;

					animate(frame, tweeninfo_new(0.45, Enum.EasingStyle.Circular, Enum.EasingDirection.Out), {Rotation = 360});
					fdelay(2, function()
						frame.Rotation = 0;
						animate(frame, tweeninfo_new(1, Enum.EasingStyle.Circular, Enum.EasingDirection.In), {Rotation = 360});
						for _, line in frame:GetChildren() do
							animate(line, tweeninfo_new(1), {BackgroundTransparency = 1; BorderSizePixel = 0});
						end;

						fwait(1);
						part:Destroy();
					end);
				end;

				if (table_find(selected, 'Damage Dealt')) then
					local part = draw('Part');
					local billboard = draw('BillboardGui');
					
					part.Parent = parent;
					part.Position = (last_shoot_position + (has_cross and vector3_new(0, 2, 0) or vector3_zero));
					part.Transparency = 1;
					part.CanQuery = false;
					part.CanCollide = false;
					part.Anchored = true;

					billboard.Parent = part;
					billboard.Adornee = part;
					billboard.AlwaysOnTop = true;
					billboard.Size = udim2_fromoffset(50, 50);

					local text = drawing.new('text');
					text.visible = true;
					text.parent = billboard;
					text.size = 16;
					text.text = tostring(damage);
					text.font = Enum.Font.Code;
					text.outline_thickness = 1;
					text.color = color3_fromrgb(255, 255, 255);
					text.alpha = 0;
					text.zindex = 99999;
					text.position = vector2_new(25, 25);

					animate(part, tweeninfo_new(2, Enum.EasingStyle.Circular, Enum.EasingDirection.Out), {Position = (part.Position + vector3_new(0, 0.5, 0))});
					fdelay(2, function()
						local text = billboard.TextLabel;
						animate(text, tweeninfo_new(1, Enum.EasingStyle.Circular, Enum.EasingDirection.In), {TextTransparency = 1});
						animate(text.UIStroke, tweeninfo_new(1, Enum.EasingStyle.Circular, Enum.EasingDirection.In), {Transparency = 1});
						
						animate(part, tweeninfo_new(1, Enum.EasingStyle.Circular, Enum.EasingDirection.In), {Position = (part.Position + vector3_new(0, 1, 0))});

						fwait(1);
						part:Destroy();
					end);
				end;
			end;

			if (flags.hit_sound.bool and health > 0) then
				play_sound('eternal/sounds/' .. (flags.hit_sound_selected), flags.hit_sound_volume);
			end;

			if (game.name == 'Phantom Forces' and health == 100) then
				on_kill();
			end;
		end;

		local replication = {
			spoofed = false;
			real = nil;
			faked = vector3_zero;
		};

		local spin_progress = 0;
		local jitter_position_step = 1;
		local jitter_yaw_step = 0;
		local jitter_pitch_step = 0;

		local stop_movement;

		local trails = {};
		local last_hop = 0;
		local crosshair_rotation = 0;
		local crosshair_cool_progress;
		local crosshair_cool_start;
		local crosshair_cool_goal;
		local scan_spin_x = 0;
		local scan_spin_y = 0;
		local china_hat_spin = 0;

		loops = {
			{
				delay = 0.01;
				loop = LPH_NO_VIRTUALIZE(function()
					if (flags.fly and flags.fly.bool and character) then
                        local speed = (flags.fly_speed / 5);
                        local x,y,z = camera.CFrame:ToOrientation();
						local result = (cframe_new(character:GetPivot().Position) * cframe_angles(0, y, z)) * cframe_new(0, 0.015, 0);

						if (not uis:GetFocusedTextBox()) then 
							if (uis:IsKeyDown(Enum.KeyCode.Space) or uis:IsKeyDown(Enum.KeyCode.E)) then
								result *= cframe_new(0, speed, 0);
							end;
							if (uis:IsKeyDown(Enum.KeyCode.W)) then
								result *= cframe_new(0, 0, -speed);
							end;
							if (uis:IsKeyDown(Enum.KeyCode.A)) then
								result *= cframe_new(-speed, 0, 0);
							end;
							if (uis:IsKeyDown(Enum.KeyCode.S)) then
								result *= cframe_new(0, 0, speed);
							end;
							if (uis:IsKeyDown(Enum.KeyCode.D)) then
								result *= cframe_new(speed, 0, 0);
							end;
							if (uis:IsKeyDown(Enum.KeyCode.LeftShift) or uis:IsKeyDown(Enum.KeyCode.Q)) then
								result *= cframe_new(0, -speed, 0);
							end;
						end;

						character:PivotTo(result);
						root.Velocity = vector3_zero;
                    end;
				end);
			};
			{
				delay = 0.05;
				loop = LPH_NO_VIRTUALIZE(function()
					if (flags.trail.bool and can_work) then
						local cframe, size = character:GetBoundingBox();
						local position = cframe.Position - vector3_new(0, size.Y / 2, 0);
						local vector, visible = camera:WorldToViewportPoint(position); vector = vector2_new(vector.X, vector.Y);
		
						if trails[1] then
							trails[1].end_position = position;
						end;
		
						local line = drawing.new('line');
						line.visible = false;
						line.zindex = 999999;
						line.outline_size = 0;
						line.from = vector;

						set_color({drawing = line; flag = flags.trail_color; index = 1});
		
						table_insert(trails, 1, {
							start_position = position;
							instance = line;
						})
						
						if trails[20] then
							trails[20].instance.destroy();
						end;
		
						table_remove(trails, 20);
					end;
				end);
			};
			{
				delay = 0.01;
				loop = LPH_NO_VIRTUALIZE(function()
					if (flags.bunnyhop.bool and can_work) then
						local mode = flags.bunnyhop_mode;
						local can_jump = (humanoid.FloorMaterial.Name ~= 'Air');

						stop_movement = (mode == 'Directional 1' and can_jump or mode == 'Directional 2');
			
						if ((tick() - last_hop) >= 0.1 and can_jump and uis:IsKeyDown(Enum.KeyCode.Space)) then
							character.Humanoid:ChangeState('Jumping');
						end;
			
						if (mode == 'Directional 1' and can_jump or mode == 'Directional 2') then
							local speed = flags.bunnyhop_speed;
			
							if uis:IsKeyDown(Enum.KeyCode.W) then
								move_directionally(cframe_new(0, 0, -speed));
							elseif uis:IsKeyDown(Enum.KeyCode.S) then
								move_directionally(cframe_new(0, 0, speed));
							end
			
							if uis:IsKeyDown(Enum.KeyCode.A) then
								move_directionally(cframe_new(-speed, 0, 0));
							elseif uis:IsKeyDown(Enum.KeyCode.D) then
								move_directionally(cframe_new(speed, 0, 0));
							end;
						end;
					else
						stop_movement = false;
					end;
				end);
			};
			{
				delay = 0.01;
				loop = LPH_NO_VIRTUALIZE(function()
					if (not flags.crosshair_cooler_spin.bool) then
						crosshair_rotation += (360 * (flags.crosshair_spin_speed / 100));
						if (crosshair_rotation >= 360) then
							crosshair_rotation -= 360;
						elseif (crosshair_rotation <= 0) then
							crosshair_rotation += 360;
						end;
					end;

					if (flags.ragebot_enabled) then
						scan_spin_x += flags.ragebot_scan_spin_x;
						if (scan_spin_x >= 360) then
							scan_spin_x -= 360;
						elseif (scan_spin_x <= 0) then
							scan_spin_x += 360;
						end;

						scan_spin_y += flags.ragebot_scan_spin_x;
						if (scan_spin_y >= 360) then
							scan_spin_y -= 360;
						elseif (scan_spin_y <= 0) then
							scan_spin_y += 360;
						end;
					end;

					china_hat_spin += flags.china_hat_spin_speed;
					if (china_hat_spin >= 360) then
						china_hat_spin -= 360;
					elseif (china_hat_spin <= 0) then
						china_hat_spin += 360;
					end;
				end);
			};
		};
		
		local scan_points = {};
		local scan_verticies = {};

		local old_ambient;
		local old_world_color;

		local arms_cache = {};
		local weapon_cache = {};

		local crosshair = draw('Frame');
		crosshair.Parent = window:get_screen();
		crosshair.Size = udim2_new(0, 0, 0, 0);
		crosshair.BorderSizePixel = 0;
		crosshair.BackgroundTransparency = 1;

		local crosshair_parts = {
			left  = drawing.new('square', crosshair);
			up    = drawing.new('square', crosshair);
			right = drawing.new('square', crosshair);
			down  = drawing.new('square', crosshair);
		};

		local china_hat_lines = (function()
			local lines = {};
			for i = 1, 30 do
				table_insert(lines, {
					line = drawing.new('line', files);
					connector = drawing.new('line', files);
				});
			end;
			return lines;
		end)();

		local item_cache = {};

		append_unhook(function()
			for index, data in scan_points do
				data.part:Destroy();
				scan_points[index] = nil;
			end;
		end);

		local spectators = {};
		local custom_color_correction;
		local old_walkspeed;
		local old_jumppower;
		local old_jumpheight;
		local fr_camera_fix;
		local aimbot_speed;
		local fake_character;
		local old_fov;
		local zoom_progress = draw('NumberValue');
		local camera_tween = draw('NumberValue');
		local camera_progress = 0;
		local original_hitboxes = {};
		local third_person = {
			['client'] = {
				recolor_cache = {};
			};
			['server'] = {
				recolor_cache = {};
			};
		};
		local weapon_cham;

		-- ☆ //   hooks   // ☆ --

		local debounce;
		table_insert(connections, run.Heartbeat:Connect(function(ndt)

			-- ☆ //   indexing   // ☆ --

			if (not character and client.Character) then
				last_spawn = tick();
			end;

			debounce = (not debounce);

			fr_camera_fix = flags.fr_camera_fix;
			aimbot_speed = flags.aimbot_speed;

			if (game.name == 'Phantom Forces') then
				local object = internal.modules.CharacterInterface.getCharacterObject();
				internal.character = object;

				if (object and not client_cache.walk_speed) then
					client_cache.walk_speed = object._baseWalkSpeed;
				end;

				character = (object and object._characterModel);
				head = (third_person.client.object and third_person.client.object._characterModelHash.Head);
				root = (object and object:getRealRootPart());

				can_work = (root);
			else
				character = client.Character;
				root = (character and character.PrimaryPart);
				head = (character and character:FindFirstChild('Head'));
				humanoid = (character and character:FindFirstChild('Humanoid'));

				can_work = (character and head and root and humanoid and (tick() - last_spawn) >= 0.5);
			end;

			weapon = LPH_NO_VIRTUALIZE(function()
				if (game.name == 'Counter Blox') then
					return (internal.gun);
				elseif (game.name == 'Phantom Forces') then
					local controller = internal.modules.WeaponControllerInterface.getActiveWeaponController();
        			local weapon = (controller and controller:getActiveWeapon());

					return (weapon);
				end;
			end)();

			is_gui_visible = window:is_visible();

			can_aimbot = false;
			can_silent_aim = false;

			-- ☆ //   fake position replication   // ☆ --

			if (not fake_character and can_work) then
				fake_character = draw('Model');
				for _, instance in character:GetChildren() do
					if (instance.Name == 'Humanoid') then continue; end;
					instance:Clone().Parent = fake_character;
				end;

				for _, instance in fake_character:GetDescendants() do
					local classname = instance.ClassName;
					if (classname == 'BasePart') then
						instance.CanCollide = false;
					elseif (classname == 'Weld' or classname == 'Motor6D') then
						if (instance.Part0.Parent == character) then
							instance.Part0 = fake_character[instance.Part0.Name];
						elseif (instance.Part1.Parent == character) then
							instance.Part1 = fake_character[instance.Part1.Name];
						end;
					end;
				end;
				fake_character.PrimaryPart = fake_character.HumanoidRootPart;
				character.Humanoid:Clone().Parent = fake_character;
			elseif (fake_character and not can_work) then
				fake_character:Destroy();
			end;

			if (can_work) then
				local delta = vector3_zero;

				if (flags.invisible and flags.invisible.bool) then
					delta = vector3_new(math_random(5000, 10000), math_random(5000, 10000), math_random(5000, 10000));
				elseif (flags.antiaim.bool and flags.jitter_position.bool) then
					local x = flags.jitter_position_x;
					local y = flags.jitter_position_y;
					local z = flags.jitter_position_z;

					if (flags.jitter_position_randomize.bool) then
						x = math_random((x < 0) and x or -x, 0);
						y = math_random((y < 0) and y or -y, 0);
						z = math_random((z < 0) and z or -z, 0);
					end;

					if (debounce) then
						if (flags.jitter_position_negative.bool) then
							if (x < 0) then x = math_abs(x); else x = -x; end;
							if (y < 0) then y = math_abs(y); else y = -y; end;
							if (z < 0) then z = math_abs(z); else z = -z; end;
						else
							x = 0;
							y = 0;
							z = 0;
						end;
					end;
					
					delta = vector3_new(x, y, z);
					if (flags.jitter_position_mode == 'Relative') then
						delta = ((root.CFrame * cframe_new(delta)).Position - root.CFrame.Position);
					end;
				end;

				replication.spoofed = (delta ~= vector3_zero);
				replication.faked += delta;
				replication.last_faked = delta;

				if (game.name ~= 'Phantom Forces') then
					root.CFrame += delta;
				end;

				if (game.name == 'Counter Blox') then
					if (replication.spoofed) then
						humanoid.AutoRotate = false;

						local pitch,yaw,_ = camera.CFrame:ToOrientation();
						root.CFrame = cframe_new(root.CFrame.Position) * cframe_angles(0, math_rad(yaw * 60), 0);
					else
						humanoid.AutoRotate = true;
					end;
				end;
			end;

			-- ☆ //   caching players   // ☆ --

			for _, player in players:GetPlayers() do
				if (player ~= client) then
					local name = player.Name;

					if (not player_cache[name]) then
						player_cache[name] = {
							advanced = {};
							backtrack = {
								position = {};
							};
							movement = {
								position = {};
								time = {};
							};
						};
					end;

					if (not player_cache[name].esp) then
						player_cache[name].esp = {
							billboard = draw('BillboardGui');
							drawings = {
								skeleton_bones = {};
							};
							chams = {
								highlight = nil;
								boxes = {};
							};
						};
					end;

					local character = get_character(player);
					local head = (character and get_body_part(player, character, 'Head'));

					if (game.name == 'Phantom Forces') then
						local entry = internal.get_entry(player);
						local third_person_object = (entry and entry._thirdPersonObject);
						local character_model = (third_person_object and third_person_object._characterModel);
						local character_model_hash = (third_person_object and third_person_object._characterModelHash);
						local weapon_object = (entry and entry:getWeaponObject());

						player_cache[name].advanced = {
							entry = entry;
							third_person_object = third_person_object;
							character_model = character_model;
							character_model_hash = character_model_hash;
							weapon_object = weapon_object;
						};
					elseif (game.name == 'Counter Blox') then
						if (player:FindFirstChild('Status') and player.Status:FindFirstChild('SpecMode') and player.Status.SpecMode.Value) then
							local previous = spectators[player];

							if ((player.CameraCF.Value.Position - camera.CFrame.Position).Magnitude <= 15) then
								if (not spectators[player]) then
									spectators[player] = true;
								end;
							else
								if (spectators[player]) then
									spectators[player] = nil;
								end;
							end;

							if (spectators[player] ~= previous) then
								if (spectators[player]) then
									spectator_list:add(name);
								else
									spectator_list:remove(name);
								end;
							end;
						end;
					end;

					if (head and character) then
						table_insert(player_cache[name].movement.position, 1, head.Position);
						table_remove(player_cache[name].movement.position, 16);

						table_insert(player_cache[name].movement.time, 1, os_clock());
						table_remove(player_cache[name].movement.time, 16);

						--[[if (flags.backtrack and flags.backtrack.bool) then
							local torso = get_body_part(player, character, 'Torso');
							local left_arm = get_body_part(player, character, 'LeftArm');
							local right_arm = get_body_part(player, character, 'RightArm');
							local left_leg = get_body_part(player, character, 'LeftLeg');
							local right_leg = get_body_part(player, character, 'RightLeg');

							local cache = player_cache[name].backtrack.position;
							table_insert(cache, 1, {
								Head = head.CFrame;
								Torso = (torso and torso.CFrame);
								LeftArm = (left_arm and left_arm.CFrame);
								RightArm = (right_arm and right_arm.CFrame);
								LeftLeg = (left_leg and left_leg.CFrame);
								RightLeg = (right_leg and right_leg.CFrame);
							});

							if (#cache > flags.backtrack_size) then
								repeat
									table_remove(cache, #cache);
								until (#cache <= flags.backtrack_size);
							end;

							local model = player_cache[name].backtrack.model;
							if (not model) then
								model = draw('Model');
								model.Name = ('backtrack ' .. name);
								model.Parent = workspace;

								for name, size in {
									['Head'] = vector3_new(1, 1, 1);
									['Torso'] = vector3_new(2, 2, 1);
									['LeftArm'] = vector3_new(1, 2, 1);
									['RightArm'] = vector3_new(1, 2, 1);
									['LeftLeg'] = vector3_new(1, 2, 1);
									['RightLeg'] = vector3_new(1, 2, 1);
								} do
									local part = draw('Part');
									local cham = draw('BoxHandleAdornment')

									part.Parent = model;
									part.Name = name;
									part.Size = size;
									part.CanCollide = false;
									part.Anchored = true;
									part.Transparency = 1;

									cham.Parent = part;
									cham.Size = part.Size;
									cham.Adornee = part;
									cham.ZIndex = 0;
									cham.AlwaysOnTop = true;
								end;

								player_cache[name].backtrack.model = model;
							end;

							for _, part in model:GetChildren() do
								part.CFrame = cache[#cache][part.Name];
								part:FindFirstChildWhichIsA('BoxHandleAdornment').Color3 = color3_fromhsv(unpack(flags.backtrack_color.color[1]));
							end;
						end;]]
					end;
				end;
			end;

			-- ☆ //   legit bot   // ☆ --

			if (flags.aimbot_enabled.bool) then
				local center = (game.name == 'Universal' and uis:GetMouseLocation() or (camera.ViewportSize / 2));
				local fov = flags.aimbot_fov * (flags.aimbot_dynamic.bool and (70 / camera.FieldOfView) or 1);
				local deadfov = (flags.aimbot_deadfov.bool and flags.aimbot_deadfov_fov or 0);

				local closest, closest_player;
				local last_distance = math_huge;
				for _, player in players:GetPlayers() do
					if (player == client) then continue; end;
					if (flags.aimbot_teamcheck.bool and team_check(player)) then continue; end;

					local character = get_character(player);
					if (not character) then continue; end;

					local health = get_health(player, character);
					if (not health or health <= 0) then continue; end;

					local targets = LPH_NO_VIRTUALIZE(function()
						local list = {};

						for _, option in flags.aimbot_target do
							if (option == 'Head') then
								table_insert(list, 'Head');
							elseif (option == 'Torso') then
								table_insert(list, 'Torso');
							elseif (option == 'Arms') then
								table_insert(list, 'LeftArm');
								table_insert(list, 'RightArm');
							elseif (option == 'Legs') then
								table_insert(list, 'LeftLeg');
								table_insert(list, 'RightLeg');
							end;
						end;

						return (list);
					end)();

					for _, target in targets do
						local part = get_body_part(player, character, target);
						if (not part) then continue; end;

						local position, is_visible = camera:WorldToViewportPoint(part.Position);
						if (not is_visible or not position) then continue; end;

						local distance = (vector2_new(position.X, position.Y) - center).Magnitude;
						if (distance <= last_distance and distance <= fov and (deadfov == 0 or distance > (fov / deadfov)) and
							(flags.aimbot_visiblity_check ~= 'Penetration Check' or penetration_check(camera.CFrame.Position, part.Position, {character})) and
							(flags.aimbot_visiblity_check ~= 'Wall Check' or wall_check(part.Position, character))
						) then
							closest = part;
							closest_player = player;
							last_distance = distance;
						end;
					end;
				end;

				local cache = (closest_player and player_cache[closest_player.Name].movement.position);

				aimbot_target = (closest and {
					player = closest_player;
					part = closest;
					origin = camera.CFrame.Position;
					destination = (
						(game.name == 'Phantom Forces') and closest.Position
						or predict(
							closest.Position,
							closest_player,
							camera.CFrame.Position,
							{
								movement = {
									enabled = flags.aimbot_predict.bool;
									size = flags.aimbot_predict_size;
								};
								bullet = {
									enabled = (flags.aimbot_bullet_predict and flags.aimbot_bullet_predict.bool);
									size = flags.aimbot_bullet_predict_size;
								};
							}
						)
					);
				} or nil);

				if (closest and (flags.aimbot_chance == 100 or math_random(0, 100) <= flags.aimbot_chance)) then
					can_aimbot = (flags.aimbot_type == 'Default');
					can_silent_aim = (flags.aimbot_type == 'Silent');
				else
					can_silent_aim = false;
					can_aimbot = false;
				end;

				if (game.name == 'Phantom Forces' and can_aimbot) then
					local camera_object = internal.modules.CameraInterface.getActiveCamera();
					local current_angles = camera_object._angles;
					local min_angle = camera_object._minAngle;
					local max_angle = camera_object._maxAngle;

					if (current_angles and min_angle and max_angle) then
						local velocity = (function()
							local predicted = predict(
								closest.Position,
								closest_player,
								(camera.CFrame * vector3_new(0, 0, 0.5)),
								{
									movement = {
										enabled = flags.aimbot_predict.bool;
										size = flags.aimbot_predict_size;
									};
									bullet = {
										enabled = flags.aimbot_bullet_predict.bool;
										size = flags.aimbot_bullet_predict_size;
									};
								}
							);

							local x = predicted.x;
							local y = predicted.y;
							local z = predicted.z;

							return vector3_new(
								math_asin(y / (x * x + y * y + z * z) ^ 0.5),
								math_atan2(-x, -z),
								0
							);
						end)();

						local angles = vector3_new(
							math_clamp(velocity.x, min_angle, max_angle),
							(velocity.y + math_pi - current_angles.y) % (math_pi * 2) - math_pi + current_angles.y,
							0
						);

						local aimbot_speed = flags.aimbot_speed;
						if (aimbot_speed < 100) then
							angles = current_angles:Lerp(angles, math_clamp((aimbot_speed / 100 * ndt) * 20, 0, 1));
						end;

						camera_object._delta = (angles - current_angles) / ndt;
						camera_object._angles = angles;
					end;
				end;

				if (closest and flags.aimbot_autoshoot.bool) then
					fdelay(flags.aimbot_autoshoot_reaction / 1000, function()
						shoot();
					end);
				end;

				if (flags.visualize_aimbot_fov.bool) then
					aimbot_fov.visible = true;
					aimbot_fov.position = center;
					aimbot_fov.radius = fov;

					set_color({drawing = aimbot_fov; flag = flags.aimbot_fov_color; index = 2});
					set_color({drawing = aimbot_fov; flag = flags.aimbot_fov_color; index = 1; fill = true});

					if (flags.aimbot_deadfov.bool and flags.visualize_aimbot_deadfov.bool) then
						aimbot_deadfov.visible = true;
						aimbot_deadfov.position = center;
						aimbot_deadfov.radius = (fov * (deadfov / 100));
	
						set_color({drawing = aimbot_deadfov; flag = flags.aimbot_deadfov_color; index = 2});
						set_color({drawing = aimbot_deadfov; flag = flags.aimbot_deadfov_color; index = 1; fill = true});
					else
						aimbot_deadfov.visible = false;
					end;
				else
					aimbot_fov.visible = false;
					aimbot_deadfov.visible = false;
				end;

				if (flags.aimbot_snapline.bool and closest) then
					local vector, is_visible = camera:WorldToViewportPoint(closest.Position); vector = vector2_new(vector.X, vector.Y);

					aimbot_snapline.visible = true;
					aimbot_snapline.from = center;
					aimbot_snapline.to = vector;

					set_color({drawing = aimbot_snapline; flag = flags.aimbot_snapline_color; index = 1});
				else
					aimbot_snapline.visible = false;
				end;
			else
				can_silent_aim = false;
				can_aimbot = false;

				aimbot_fov.visible = false;
				aimbot_deadfov.visible = false;
				aimbot_snapline.visible = false;
			end;

			if (flags.hitbox_expander and flags.hitbox_expander.bool) then
				local targets = flags.hitbox_expander_target;

				local has_head  = table_find(targets, 'Head');
				local has_torso = table_find(targets, 'Torso');
				local has_arms  = table_find(targets, 'Arms');
				local has_legs  = table_find(targets, 'Legs');

				local addition = flags.hitbox_expander_addition;
				addition = vector3_new(addition, addition, addition);

				for _, player in players:GetPlayers() do
					if (player == client) then continue; end;
					if (not player.Character) then continue; end;

					for _, part in player.Character:GetChildren() do
						if (not part:IsA('BasePart')) then continue; end;

						local name = part.Name;
						if (
							(has_head and string_find(name, 'Head'))
							or (has_torso and string_find(name, 'Torso'))
							or (has_arms and string_find(name, 'Arm'))
							or (has_legs and string_find(name, 'Leg'))
						) then
							local original = original_hitboxes[part];
							if (not original) then
								original_hitboxes[part] = part.Size;
								original = original_hitboxes[part];
							end;

							part.Size = (original + addition);
						elseif (original_hitboxes[part]) then
							part.Size = original_hitboxes[part];
						end;
					end;
				end;
			else
				for part, original_size in original_hitboxes do
					part.Size = original_size;
					original_hitboxes[part] = nil;
				end;
			end;

			if (flags.triggerbot_enabled.bool) then
				if (game.name == 'Phantom Forces') then
					local center = (camera.ViewportSize / 2);

					local closest, closest_player;
					local last_distance = math_huge;
					for _, player in players:GetPlayers() do
						if (player == client or team_check(player)) then continue; end;

						local character = get_character(player);
						if (not character) then continue; end;

						local health = get_health(player, character);
						if (not health or health <= 0) then continue; end;

						local part = get_body_part(player, character, 'Torso');
						if (not part) then continue; end;

						local position, is_visible = camera:WorldToViewportPoint(part.Position);
						if (not is_visible or not position) then continue; end;

						local distance = (vector2_new(position.X, position.Y) - center).Magnitude;
						if (distance <= last_distance and distance <= 30 and wall_check(part.Position, character)) then
							closest = part;
							closest_player = player;
							last_distance = distance;
						end;
					end;

					if (closest) then
						fdelay(flags.triggerbot_reaction / 1000, function()
							shoot();
						end);
					end;
				else
					local result = raycast(2, camera.CFrame.Position, (client:GetMouse().Hit.Position - camera.CFrame.Position).Unit * 900)
					result = result and result:FindFirstAncestorWhichIsA('Model')

					if (result and result:FindFirstChild('HumanoidRootPart') and players:FindFirstChild(result.Name)) then
						fdelay(flags.triggerbot_reaction / 1000, function()
							shoot();
						end);
					end;
				end;
			end;

			--[[local flag = flags.backtrack;
			if (flag) then
				for _, model in workspace:GetChildren() do
					local name = model.Name;
					if (string_sub(name, 1, 10) ~= 'backtrack ') then
						continue;
					end;

					local player = players:FindFirstChild(string_sub(name, 11));
					if (not player or not player.Character or not flag.bool) then
						model:Destroy();
					end;
				end;
			end;]]

			-- ☆ //   rage bot   // ☆ --

			if (flags.ragebot_enabled and flags.ragebot_enabled.bool and root) then
				if (flags.ragebot_manipulation.bool) then
					local origin = cframe_new(root.Position) * cframe_angles(unpack(
						flags.ragebot_scan_spin.bool and {math_rad(scan_spin_x); math_rad(scan_spin_y); 0}
						or {0; 0; 0}
					));

					local scan_offset = (flags.ragebot_scan_offset_randomize.bool and (math_random(0, flags.ragebot_scan_offset * 100) / 100) or flags.ragebot_scan_offset);
					local scan_layers = flags.ragebot_scan_layers;
					local scan_type = flags.ragebot_scan_type;

					scan_verticies = (
						scan_type == 'Line' and {
							vector3_new(0, 0, -1);
							vector3_new(0, -1, 0);
							vector3_new(-1, 0, 0);
							vector3_new(0, 0, 1);
							vector3_new(0, 1, 0);
							vector3_new(1, 0, 0);
							vector3_zero;
						} or
						scan_type == 'Corner' and {
							vector3_new(-1, 1, -1);
							vector3_new(-1, 1, 1);
							vector3_new(1, 1, -1);
							vector3_new(1, 1, 1);
							vector3_new(-1, -1, -1);
							vector3_new(-1, -1, 1);
							vector3_new(1, -1, -1);
							vector3_new(1, -1, 1);
							vector3_zero;
						}
					);

					if (#scan_points ~= ((scan_layers * #scan_verticies) - (scan_layers - 1))) then
						for index, data in scan_points do
							data.part:Destroy();
							scan_points[index] = nil;
						end;

						for layer = 1, scan_layers do
							for _, vector in scan_verticies do
								if (vector == vector3_zero and layer > 1) then
									continue;
								end;

								local part = draw('Part');

								part.Parent = workspace;
								part.CanCollide = false;
								part.Anchored = true;
								part.Shape = Enum.PartType.Ball;
								part.Size = (vector3_one / 2);
								scan_points[#scan_points + 1] = {
									part = part;
									vector = vector;
									layer = layer;
								};
							end;
						end;
					else
						local material = materials[flags.ragebot_scan_material];
						local color = color3_fromhsv(unpack(flags.ragebot_scan_color.color[1]));
						local alpha = (
							flags.ragebot_visualize.bool and flags.ragebot_scan_color.alpha[1]
							or 1
						);

						for _, data in scan_points do
							local part = data.part;

							part.Position = (origin * cframe_new(data.vector * ((scan_offset / scan_layers) * data.layer))).Position;
							part.Material = material;
							part.Color = color;
							part.Transparency = alpha;
						end;
					end;
				else
					for index, data in scan_points do
						data.part:Destroy();
						scan_points[index] = nil;
					end;
				end;

				for _, player in players:GetPlayers() do
					if (player == client or (flags.ragebot_filter == 'Kill Enemies' and team_check(player)) or (flags.ragebot_filter == 'Kill Teammates' and not team_check(player)) or (flags.ragebot_filter == 'Kill Only Target' and not table_find(flags.ragebot_target, player.Name))) then
						continue;
					end;

					local character = get_character(player);
					if (not character) then continue; end;

					local head = get_body_part(player, character, 'Head');
					if (not head) then continue; end;

					local health = get_health(player, character);
					if (not health or health <= 0) then continue; end;

					local scan_points = scan_points;
					if (#scan_points == 0) then
						scan_points[1] = {
							part = {
								Position = client.Character.Head.Position;
							};
						};
					end;

					for _, data in scan_points do
						local origin = data.part.Position;
						local hit = raycast(2, origin, (head.Position - origin).Unit * 900);
					
						if (hit and hit:IsDescendantOf(character) or flags.ragebot_penetrate_walls.bool and penetration_check(origin, head.Position, {character})) then
							run_on_other_thread(shoot,
								'rage',
								origin,
								(
									(game.name == 'Phantom Forces') and head.Position
									or predict(
										head.Position,
										player,
										camera.CFrame,
										{
											movement = {
												enabled = flags.aimbot_predict.bool;
												size = flags.aimbot_predict_size;
											};
											bullet = {
												enabled = (flags.aimbot_bullet_predict and flags.aimbot_bullet_predict.bool);
												size = flags.aimbot_bullet_predict_size;
											};
										}
									)
								),
								player,
								head
							);
						end;
					end;
				end;
			else
				for index, data in scan_points do
					data.part:Destroy();
					scan_points[index] = nil;
				end;
			end;

			if (flags.loop_kill and flags.loop_kill.bool and root) then
				for _, player in players:GetPlayers() do
					if (player == client or (flags.loop_kill_mode == 'Kill Enemies' and team_check(player)) or (flags.loop_kill_mode == 'Kill Teammates' and not team_check(player)) or (flags.loop_kill_mode == 'Kill Only Target' and not table_find(flags.loop_kill_target, player.Name))) then
						continue;
					end;

					local character = player.Character;
					if (not character or not character:FindFirstChild('Head')) then
						continue;
					end;

					local head = character.Head;
					local humanoid = character:FindFirstChild('Humanoid');

					if (humanoid and humanoid.Health > 0) then
						for i = 1, 2 do
							run_on_other_thread(shoot,
								'rage',
								(character.Head.Position + vector3_new(0, 5, 0)),
								(
									(i == 1) and (function()
										local cache = player_cache[player.Name].movement.position;
										local predicted = (cache and cache[15] and ((cache[1] - cache[15]) * 1.5) or vector3_zero);

										return (character.Head.Position + predicted);
									end)() or character.Head.Position
								)
							);
						end;
					end;
				end;
			end;

			-- ☆ //   visuals   // ☆ --

			if (flags.crosshair_cooler_spin.bool) then
				if (not crosshair_cool_goal or math_abs(crosshair_rotation) == crosshair_cool_goal) then
					crosshair_cool_progress = 0;
					crosshair_cool_start = math_abs(crosshair_rotation);

					local old = (crosshair_cool_goal or -1337);
					repeat
						crosshair_cool_goal = math_random(0, 360);
					until (math_abs(old - crosshair_cool_goal) > 70);
				end;

				local time = (3 * (1 - (math_abs(flags.crosshair_spin_speed) / 100)));
				crosshair_cool_progress = math_min(crosshair_cool_progress + ndt, time);
				crosshair_rotation = (
					crosshair_cool_start
					+ (crosshair_cool_goal - crosshair_cool_start)
					* tween:GetValue(crosshair_cool_progress / time, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
				);

				if (flags.crosshair_spin_speed < 0) then
					crosshair_rotation = -crosshair_rotation;
				end;
			end;

			if (game.name == 'Phantom Forces') then
				run_on_other_thread(function()
					for _, type in {
						'client';
						'server';
					} do
						local replication = third_person[type].replication;
						local object = third_person[type].object;

						if (not third_person[type].delta_time) then
							third_person[type].delta_time = 0;
						end;
						third_person[type].delta_time += ndt;

						local flag = flags[type .. '_third_person'];
						if (flag and flag.bool and root) then
							local position, angles;
							if (type == 'client') then
								position = root.Position;
								angles = internal.modules.CameraInterface.getActiveCamera():getAngles();
							else
								position = client_cache.last_update;
								angles = client_cache.last_angles;
							end;
							
							third_person[type].last_pos = (third_person[type].last_pos or position);
							local velocity = (position - third_person[type].last_pos) / third_person[type].delta_time;

							third_person[type].delta_time = 0;

							if (not replication) then
								third_person[type].replication = internal.modules.ReplicationObject.new(setmetatable({}, {
									__index = function(self, index)
										return client[index];
									end;

									__newindex = function(self, index, value)
										client[index] = value;
										return;
									end;
								}));

								replication = third_person[type].replication;
							end;

							if (not object) then
								local class_data = internal.modules.PlayerDataClientInterface.getPlayerData().settings.classdata;

								replication._player = client;
								replication:spawn(nil, class_data[class_data.curclass]);

								object = replication._thirdPersonObject;
								third_person[type].object = object;

								replication:setActiveIndex(1);
								for i = 1, 3 do
									if (replication:getWeaponObjects()[i]) then
										object:buildWeapon(i);
									end;
								end;

								repeat fwait(); until (object._characterModel);
							end;

							object.canRenderWeapon = true;
							
							local tick = tick();
							local clock = os_clock();

							replication._posspring.t = position;
							replication._posspring.p = position;

							replication._lookangles.t = angles;
							replication._lookangles.p = angles;

							replication._smoothReplication:receive(clock, tick, {
								t = tick;
								position = position;
								velocity = velocity;
								angles = angles;
								barrelAngles = vector3_zero;
								breakcount = 0;
							}, false);

							replication._updaterecieved = true;
							replication._receivedPosition = position;
							replication._receivedFrameTime = internal.modules.NetworkClient.getTime();
							replication._lastPacketTime = clock;
							replication._lastBarrelAngles = vector3_zero;
							replication:step(3, true);

							internal.set_character_render(object, true);
						else
							if (replication) then
								replication:despawn();
							end;

							if (object) then
								object:Destroy();
								third_person[type].object = nil;
							end;

							third_person[type].last_pos = nil;
						end;
					end;
				end);
			end;

			if (flags.client_third_person.bool) then
				tween:Create(camera_tween, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {Value = 1}):Play();
				camera_progress = camera_tween.Value;
			else
				tween:Create(camera_tween, tweeninfo_new(0), {Value = 0}):Play();
				camera_progress = 0;
			end;

			if (flags.zoom_smooth.bool) then
				local goal;
				if (flags.zoom.bool) then
					goal = 1;
				else
					goal = 0;
				end;
				tween:Create(zoom_progress, tweeninfo_new(0.45, Enum.EasingStyle.Circular), {Value = goal}):Play();
			else
				zoom_progress.Value = (flags.zoom.bool and 1 or 0);
			end;

			local progress = zoom_progress.Value;
			if (flags.custom_fov.bool or progress ~= 0) then
				if (not old_fov) then
					old_fov = camera.FieldOfView;
				end;
			elseif (old_fov) then
				camera.FieldOfView = old_fov;
				old_fov = nil;
			end;

			if (flags.custom_fov.bool) then
				camera.FieldOfView = flags.custom_fov_fov;
			end;

			if (progress ~= 0) then
				camera.FieldOfView = lerp((flags.custom_fov.bool and flags.custom_fov_fov or old_fov), flags.zoom_fov, progress);
			end;

			if (unhooked and old_fov) then
				camera.FieldOfView = old_fov;
				old_fov = nil;
			end;

			if (flags.recolor_ambient.bool) then
				if (game.name == 'Counter Blox') then
					pcall(function()
						old_ambient = workspace.Map.Lighting.Ambient.Value;
					end);
				elseif (not old_ambient) then
					old_ambient = lighting.Ambient;
				end;

				lighting.Ambient = color3_fromhsv(unpack(flags.recolor_ambient_color.color[1]));
			elseif (old_ambient) then
				lighting.Ambient = old_ambient;
			end;

			if (game.name == 'Counter Blox') then
				if (lighting:FindFirstChild('ColorCorrection')) then
					if (flags.recolor_world.bool) then
						if (not old_world_color) then
							old_world_color = lighting.ColorCorrection.TintColor;
						end;

						lighting.ColorCorrection.TintColor = color3_fromhsv(unpack(flags.recolor_world_color.color[1]));
					elseif (old_world_color) then
						lighting.ColorCorrection.TintColor = old_world_color;
					end;
				end;

				if (flags.anti_flashbang.bool) then
					client.PlayerGui.Blnd.Blind.BackgroundTransparency = 1;
				end;

				if (flags.anti_smoke.bool) then
					for _, smoke in workspace.Ray_Ignore.Smokes:GetChildren() do
						smoke:Destroy();
					end;
				end;
			else
				if (flags.recolor_world.bool) then
					if (not custom_color_correction) then
						custom_color_correction = draw('ColorCorrectionEffect');
						custom_color_correction.Parent = lighting;
					end;

					custom_color_correction.TintColor = color3_fromhsv(unpack(flags.recolor_world_color.color[1]));
				elseif (custom_color_correction) then
					custom_color_correction:destroy();
				end;
			end;

			if (game.name == 'Counter Blox') then
				if (flags.no_crosshair.bool) then
					client.PlayerGui.GUI.Crosshairs.Crosshair.Visible = false;
				end;
			elseif (game.name == 'Phantom Forces') then
				if (root) then
					client.PlayerGui.HudScreenGui.Main.DisplayCrosshairs.Visible = (not flags.no_crosshair.bool);
				else
					client.PlayerGui.HudScreenGui.Main.DisplayCrosshairs.Visible = false;
				end;
			end;

			for _, type in {
				'client';
				'server';
			} do
				local model = (
					(game.name == 'Phantom Forces') and (
						third_person[type].object and third_person[type].object._characterModel
					) or character
				);
				local flag = flags[type .. '_third_person'];
				if (flag and flag.bool and model) then
					if (not model:FindFirstChildWhichIsA('Humanoid')) then
						local humanoid = draw('Humanoid');
						humanoid.Parent = model;
						humanoid.Name = '';
					end;

					for _, part in model:GetDescendants() do
						if (
							part.Name ~= 'SightMark'
							and part.Name ~= 'HumanoidRootPart'
							and (
								part:IsA('BasePart')
								or part:IsA('SpecialMesh')
								or part:IsA('Texture')
								or part:IsA('Pants')
								or part:IsA('Shirt')
							) and not (function()
							for _, cache in third_person[type].recolor_cache do
								if (cache.object == part) then
									return true;
								end;
							end;
						end)()) then
							table_insert(third_person[type].recolor_cache, {
								old_indexes = {
									Color = (part:IsA('BasePart') and part.Color or nil);
									Transparency = (part:IsA('BasePart') and part.Transparency or nil);
									Material = (part:IsA('BasePart') and part.Material or nil);
									Texture = (part:IsA('Texture') and part.Texture or nil);
									TextureId = (part:IsA('SpecialMesh') and part.TextureId or nil);
									TextureID = (part:IsA('MeshPart') and part.TextureID or nil);
									PantsTemplate = (part:IsA('Pants') and part.PantsTemplate or nil);
									ShirtTemplate = (part:IsA('Shirt') and part.ShirtTemplate or nil);
								};
								object = part;
							});
						end;
					end;

					for index, cache in third_person[type].recolor_cache do
						local object = cache.object;

						if (object and object.Parent) then
							local old_indexes = cache.old_indexes;
							if (unhooked) then
								for index, value in old_indexes do
									object[index] = value;
								end;
								continue;
							end;

							if (flags[type .. '_third_person_recolor'].bool) then
								if (old_indexes.Color) then
									object.Color = color3_fromhsv(unpack(flags[type .. '_third_person_color'].color[1]));
									object.Transparency = flags[type .. '_third_person_color'].alpha[1];
								end;

								if (old_indexes.Texture) then
									object.Texture = '';
								end;

								if (old_indexes.TextureId) then
									object.TextureId = '';
								end;

								if (old_indexes.TextureID) then
									object.TextureID = '';
								end;

								if (old_indexes.PantsTemplate) then
									object.PantsTemplate = '';
								end;

								if (old_indexes.ShirtTemplate) then
									object.ShirtTemplate = '';
								end;
							else
								for index, value in old_indexes do
									if (index ~= 'Material') then
										object[index] = value;
									end;
								end;
							end;

							if (old_indexes.Material) then
								object.Material = (materials[flags[type .. '_third_person_material']] or cache.old_indexes.Material);
							end;
						else
							third_person[type].recolor_cache[index] = nil;
						end;
					end;
				end;

				local cham = third_person[type].cham;
				local flag = flags[type .. '_third_person_chams'];
				if (flag and flag.bool) then
					if (not cham) then
						third_person[type].cham = draw('Highlight');
						cham = third_person[type].cham;
					end;

					cham.Parent = files;
					cham.Adornee = (
						(third_person[type].object and third_person[type].object._characterModel)
						or character
					);
					cham.OutlineTransparency = flags[type .. '_third_person_chams_color'].alpha[1];
					cham.OutlineColor = color3_fromhsv(unpack(flags[type .. '_third_person_chams_color'].color[1]));
					cham.FillTransparency = flags[type .. '_third_person_chams_color'].alpha[2];
					cham.FillColor = color3_fromhsv(unpack(flags[type .. '_third_person_chams_color'].color[2]));
				elseif (cham) then
					cham:Destroy();
					third_person[type].cham = nil;
				end;
			end;

			if (character and flags.trail.bool) then
				for _, data in trails do
					if (data.end_position) then
						local start_vector, visible = camera:WorldToViewportPoint(data.start_position);
						local end_vector, visible = camera:WorldToViewportPoint(data.end_position);

						local instance = data.instance;
						if (visible) then
							instance.visible = true;
							instance.from = vector2_new(start_vector.X, start_vector.Y);
							instance.to = vector2_new(end_vector.X, end_vector.Y);
						else
							instance.visible = false;
						end;
					end;
				end;
			else
				for index, data in trails do
					data.instance:destroy();
					trails[index] = nil;
				end;
			end;

			if (flags.china_hat.bool and head) then
				local position = (head.Position + vector3_new(0, flags.china_hat_offset, 0));
				local origin = cframe_new(position, position + head.CFrame.LookVector) * cframe_angles(unpack(
					flags.china_hat_spin.bool and {0; math_rad(china_hat_spin); 0}
					or {0; 0; 0}
				));

				local head_vector, on_screen = camera:WorldToScreenPoint((origin * cframe_new(0, flags.china_hat_height, 0)).Position); head_vector = vector2_new(head_vector.X, head_vector.Y);
				if (on_screen) then
					local vectors = {};
					local distance = flags.china_hat_width;

					for i, data in china_hat_lines do
						local degree = (360 / #china_hat_lines);
						local vector = camera:WorldToScreenPoint((origin * cframe_new(math_cos(math_rad(i) * degree) * distance, 0, math_sin(math_rad(i) * degree) * distance)).Position); vector = vector2_new(vector.X, vector.Y);

						table_insert(vectors, vector);

						local line = data.line;
						line.visible = true;
						line.from = head_vector;
						line.to = vector;
						
						set_color({drawing = line; flag = flags.china_hat_color; index = 1});
					end;

					for i, data in china_hat_lines do
						local connector = data.connector;

						connector.visible = true;
						connector.from = vectors[i];
						connector.to = vectors[i + 1] or vectors[1];
						
						set_color({drawing = connector; flag = flags.china_hat_color; index = 1});
					end;
				else
					for _,data in china_hat_lines do
						for _, line in data do
							line.visible = false;
						end;
					end;
				end;
			else
				for _,data in china_hat_lines do
					for _, line in data do
						line.visible = false;
					end;
				end;
			end;

			if (game.name == 'Counter Blox' or game.name == 'Phantom Forces') then
				if (game.name == 'Counter Blox') then
					local arms = camera:FindFirstChild('Arms');
					if (arms) then
						local found = arms:FindFirstChildWhichIsA('Model');
						if (found) then
							for _, arm in found:GetChildren() do
								if (not (function()
									for _, cache in arms_cache do
										if (cache.object == arm) then
											return true;
										end;
									end;
								end)() and arm:IsA('BasePart')) then
									table_insert(arms_cache, {
										cham = nil;
										old_indexes = {
											Color = arm.Color;
											Transparency = arm.Transparency;
											Material = arm.Material;
										};
										object = arm;
									});
								end;
							end;
						end;

						for _, part in arms:GetChildren() do
							if (part:IsA('MeshPart') and not (function()
								for _, cache in weapon_cache do
									if (cache.object == part) then
										return true;
									end;
								end;
							end)()) then
								table_insert(weapon_cache, {
									cham = nil;
									old_indexes = {
										Color = part.Color;
										Transparency = part.Transparency;
										Material = part.Material;
										TextureID = part.TextureID;
									};
									object = part;
								});
							end;
						end;
					end;
				elseif (game.name == 'Phantom Forces') then
					for _, model in camera:GetChildren() do
						if (model:FindFirstChild('Arm')) then
							local arm = model:FindFirstChild('SkinTone');
							if (not (function()
								for _, cache in arms_cache do
									if (cache.object == arm) then
										return true;
									end;
								end;
							end)()) then
								table_insert(arms_cache, {
									cham = nil;
									old_indexes = {
										Color = arm.Color;
										Transparency = arm.Transparency;
										Material = arm.Material;
									};
									object = arm;
								});
							end;

							for _, part in model:GetChildren() do
								if (part.Name == 'Sleeves') then continue; end;
								if (flags.client_third_person.bool) then
									part.Transparency = 1;
								else
									if (
										part:IsA('MeshPart') and (
											part.MeshId == 'rbxassetid://12352659949'
											or part.MeshId == 'rbxassetid://12352659941'
										)
									) then
										part.Transparency = (flags.hide_gloves.bool and 1 or 0);
									else
										part.Transparency = (flags.hide_other.bool and 1 or 0);
									end;
								end;
							end;

							local found = model:FindFirstChild('Sleeves');
							if (found) then
								local value = ((flags.hide_sleeves.bool or flags.client_third_person.bool) and 1 or 0);

								found.Transparency = value;
								for _, texture in found:GetChildren() do
									texture.Transparency = value;
								end;
							end;
						else
							for _, part in model:GetChildren() do
								if (part:IsA('BasePart') and not (function()
									for _, cache in weapon_cache do
										if (cache.object == part) then
											return true;
										end;
									end;
								end)()) then
									table_insert(weapon_cache, {
										cham = nil;
										old_indexes = {
											Color = part.Color;
											Transparency = part.Transparency;
											Material = part.Material;
											TextureID = (part:IsA('MeshPart') and part.TextureID or nil);
										};
										object = part;
									});
								end;
							end;

							if (flags.weapon_chams.bool) then
								if (not weapon_cham) then
									weapon_cham = draw('Highlight');
								end;

								weapon_cham.Parent = files;
								weapon_cham.Adornee = model;
								weapon_cham.OutlineTransparency = flags.weapon_chams_color.alpha[1];
								weapon_cham.OutlineColor = color3_fromhsv(unpack(flags.weapon_chams_color.color[1]));
								weapon_cham.FillTransparency = flags.weapon_chams_color.alpha[2];
								weapon_cham.FillColor = color3_fromhsv(unpack(flags.weapon_chams_color.color[2]));
							elseif (weapon_cham) then
								weapon_cham:Destroy();
								weapon_cham = nil;
							end;
						end;
					end;
				end;

				for index, cache in arms_cache do
					local object = cache.object;

					if (object and object.Parent) then
						local found = object:FindFirstChild('Glove');
						if (found) then
							found.Transparency = (flags.hide_gloves.bool and 1 or 0);
						end;

						local found = object:FindFirstChild('Sleeve');
						if (found) then
							found.Transparency = (flags.hide_sleeves.bool and 1 or 0);
						end;

						local cham = cache.cham;
						if (flags.arms_chams.bool) then
							if (not cham) then
								cache.cham = draw('Highlight');
								cham = cache.cham;
							end;

							cham.Parent = files;
							cham.Adornee = object;
							cham.OutlineTransparency = flags.arms_chams_color.alpha[1];
							cham.OutlineColor = color3_fromhsv(unpack(flags.arms_chams_color.color[1]));
							cham.FillTransparency = flags.arms_chams_color.alpha[2];
							cham.FillColor = color3_fromhsv(unpack(flags.arms_chams_color.color[2]));
						elseif (cham) then
							cham:Destroy();
							cache.cham = nil;
						end;

						if (flags.client_third_person.bool) then
							object.Transparency = 1;
						else
							if (flags.arms_recolor.bool) then
								object.Color = color3_fromhsv(unpack(flags.arms_recolor_color.color[1]));
								object.Transparency = flags.arms_recolor_color.alpha[1];
							else
								for index, value in cache.old_indexes do
									if (index ~= 'Material') then
										object[index] = value;
									end;
								end;
							end;
						end;

						if (cache.old_indexes.Material) then
							object.Material = (materials[flags.arms_material] or cache.old_indexes.Material);
						end;
					else
						if (cache.cham) then
							cache.cham:Destroy();
						end;

						arms_cache[index] = nil;
					end;
				end;

				for index, cache in weapon_cache do
					local object = cache.object;

					if (object and object.Parent) then
						if (game.name == 'Counter Blox') then
							local cham = cache.cham;
							if (flags.weapon_chams.bool) then
								if (not cham) then
									cache.cham = draw('Highlight');
									cham = cache.cham;
								end;

								cham.Parent = files;
								cham.Adornee = object;
								cham.OutlineTransparency = flags.weapon_chams_color.alpha[1];
								cham.OutlineColor = color3_fromhsv(unpack(flags.weapon_chams_color.color[1]));
								cham.FillTransparency = flags.weapon_chams_color.alpha[2];
								cham.FillColor = color3_fromhsv(unpack(flags.weapon_chams_color.color[2]));
							elseif (cham) then
								cham:Destroy();
								cache.cham = nil;
							end;
						end;

						if (flags.client_third_person.bool) then
							object.Transparency = 1;
						else
							if (flags.weapon_recolor.bool) then
								object.Color = color3_fromhsv(unpack(flags.weapon_recolor_color.color[1]));
								object.Transparency = flags.weapon_recolor_color.alpha[1];

								if (object:IsA('MeshPart')) then
									object.TextureID = '';
								end;
							else
								for index, value in cache.old_indexes do
									if (index ~= 'Material') then
										object[index] = value;
									end;
								end;
							end;
						end;

						object.Material = (materials[flags.weapon_material] or cache.old_indexes.Material);
					else
						if (cache.cham) then
							cache.cham:Destroy();
						end;

						weapon_cache[index] = nil;
					end;
				end;
			end;

			if (flags.custom_crosshair.bool) then
				if (flags.crosshair_spin.bool) then
					crosshair.Rotation = crosshair_rotation;
				else
					crosshair.Rotation = flags.crosshair_rotation;
				end;

				local data = flags.crosshair_color;
			
				for _, part in crosshair_parts do
					part.visible = true;
					part.alpha = (flags.crosshair_outline.bool and 0 or 1);

					if (data.gradient[1]) then
						local colors = data.color[1];
						local alphas = data.alpha[1];

						part.fill_color = {color3_fromhsv(unpack(colors[1])), color3_fromhsv(unpack(colors[2]))};
						part.fill_alpha = {alphas[1]; alphas[2]};
					else
						local selected = data.current[1];

						part.fill_color = color3_fromhsv(unpack(data.color[1][selected]));
						part.fill_alpha = data.alpha[1][selected];
					end;
				end

				local mouse_location = uis:GetMouseLocation();
				crosshair.Position = udim2_fromoffset(mouse_location.X, mouse_location.Y);

				local left = crosshair_parts.left;
				local up = crosshair_parts.up;
				local right = crosshair_parts.right;
				local down = crosshair_parts.down;

				local length = flags.crosshair_length;
				local width = flags.crosshair_width;
				local distance = flags.crosshair_distance;

				local rotation = flags.crosshair_color.rotation[1][2];

				left.position = -udim2_fromoffset(length + distance, width / 2);
				left.size = udim2_fromoffset(length, width);
				left.gradient_rotation = (0 + rotation);

				up.position = -udim2_fromoffset(width / 2, length + distance);
				up.size = udim2_fromoffset(width, length);
				up.gradient_rotation = (90 + rotation);

				right.position = udim2_fromoffset(distance, -(width / 2));
				right.size = udim2_fromoffset(length, width);
				right.gradient_rotation = (180 + rotation);

				down.position = udim2_fromoffset(-(width / 2), distance);
				down.size = udim2_fromoffset(width, length);
				down.gradient_rotation = (270 + rotation);
			else
				for _, part in crosshair_parts do
					part.visible = false;
				end;
			end;

			-- ☆ //   miscellaneous   // ☆ --

			if (game.name == 'Phantom Forces') then
				if (unhooked) then
					internal.modules.PlayerDataClientInterface.getPlayerData().unlockAll = false;
				end;
			end;
			
			-- ☆ //   inventory changer   // ☆ --

			if (game.name == 'Counter Blox') then
				if (flags.__INVENTORYCHANGER.enabled) then
					for id, data in skins do
						local all_good = true;
						for index, data in internal.CurrentInventory do
							if (data.eternal_id == id) then
								all_good = false;
							end;
						end;

						if (all_good) then
							local to_send = {
								data.item .. '_' .. data.skin;
								eternal_id = id;
							};

							if (data.stattrak) then
								to_send[2] = 'StatTrak';
								to_send[4] = data.stattrak;
							end;

							table_insert(internal.CurrentInventory, to_send);
						end;
					end;
				end;

				for index, data in internal.CurrentInventory do
					if (data.eternal_id) then
						if (not flags.__INVENTORYCHANGER.enabled or not skins[data.eternal_id]) then
							internal.CurrentInventory[index] = nil;
						end;
					end;
				end;
			end;

			-- ☆ //   movement   // ☆ --

			if (game.name == 'Phantom Forces') then
				local stamina_cache = internal.stamina_cache;
				if (flags.no_slide_cooldown.bool) then
					local config = internal.modules.CharacterConfig.casualMovementConfig;

					if (not stamina_cache.normal.slideCooldown) then
						stamina_cache.normal.slideCooldown = config.normal.slideCooldown;
						stamina_cache.stamina.slideCooldown = config.stamina.slideCooldown;
					end;
					config.normal.slideCooldown = 0;
					config.stamina.slideCooldown = 0;
				else
					for path, data in stamina_cache do
						for index, value in data do
							internal.modules.CharacterConfig.casualMovementConfig[path][index] = value;
							stamina_cache[path][index] = nil;
						end;
					end;
				end;

				if (flags.bunnyhop.bool and uis:IsKeyDown(Enum.KeyCode.Space)) then
					internal.character._lastJumpTime = 0;
					internal.character:jump(
						(flags.jumphack_enabled.bool) and flags.jumphack_power
						or internal.modules.CharacterConfig.casualMovementConfig[
							internal.modules.PlayerSettingsInterface.getValue('togglestaminamovement') and 'stamina'
							or 'normal'
						].jumpHeight
					);
				end;

				if (internal.character) then
					internal.character:setBaseWalkSpeed(
						(flags.speedhack_enabled.bool) and flags.speedhack_speed
						or client_cache.walk_speed
						or 0
					);
				end;
			end;

			if (humanoid and game.name == 'Universal') then
				if (flags.speedhack_enabled.bool) then
					if (not old_walkspeed) then
						old_walkspeed = humanoid.WalkSpeed;
					end;

					humanoid.WalkSpeed = flags.speedhack_speed;
				elseif (old_walkspeed) then
					humanoid.WalkSpeed = old_walkspeed;
					old_walkspeed = nil;
				end;

				if (flags.jumphack_enabled.bool) then
					if (not old_jumppower) then
						old_jumppower = humanoid.JumpPower;
					end;

					if (not old_jumpheight) then
						old_jumpheight = humanoid.JumpHeight;
					end;

					humanoid.JumpPower = flags.jumphack_power;
					humanoid.JumpHeight = flags.jumphack_height;
				elseif (old_jumppower or old_jumpheight) then
					humanoid.JumpPower = old_jumppower;
					humanoid.JumpHeight = old_jumpheight;

					old_jumppower = nil;
					old_jumpheight = nil;
				end;
			end;

			if (can_work) then
				local is_antiaim_enabled = flags.antiaim.bool;

				if (game.name == 'Counter Blox') then
					humanoid.AutoRotate = (not is_antiaim_enabled);
				end;

				if (is_antiaim_enabled) then
					local pitch, yaw;
					if (game.name == 'Phantom Forces') then
						local angles = internal.modules.CameraInterface.getActiveCamera():getAngles();
						angles = {
							x = angles.x;
							y = angles.y;
						};

						pitch = ((360 / math_pi) * angles.x);
						yaw = ((360 / math_pi) * angles.y);
					else
						pitch, yaw = camera.CFrame:ToOrientation();
						pitch *= 180;
						yaw *= 60;
					end;

					local yaw_enabled = flags.antiaim_yaw.bool;
					if (yaw_enabled) then
						if (flags.antiaim_yaw_mode == 'Absolute') then
							yaw = flags.antiaim_yaw_degree;
						else
							yaw += flags.antiaim_yaw_degree;
						end;

						if (flags.antiaim_yaw_jitter.bool) then
							if (jitter_yaw_step == 0) then
								jitter_yaw_step = flags.antiaim_yaw_jitter_steps;
							else
								yaw += ((flags.antiaim_yaw_jitter_randomize.bool and math_random(0, flags.antiaim_yaw_jitter_degree) or flags.antiaim_yaw_jitter_degree) / jitter_yaw_step);

								jitter_yaw_step -= 1;
							end;
						end;
					end;

					local spinbot_enabled = flags.spin_bot.bool;
					if (spinbot_enabled) then
						spin_progress += flags.spin_speed;
						yaw += spin_progress;
					end;

					if (flags.antiaim_pitch and flags.antiaim_pitch.bool) then
						if (flags.antiaim_pitch_mode == 'Absolute') then
							pitch = flags.antiaim_pitch_degree;
						else
							pitch += flags.antiaim_pitch_degree;
						end;

						if (flags.antiaim_pitch_jitter.bool) then
							if (jitter_pitch_step == 0) then
								jitter_pitch_step = flags.antiaim_pitch_jitter_steps;
							else
								pitch += ((flags.antiaim_pitch_jitter_randomize.bool and math_random(0, flags.antiaim_pitch_jitter_degree) or flags.antiaim_pitch_jitter_degree) / jitter_pitch_step);

								jitter_pitch_step -= 1;
							end;
						end;

						pitch = math_clamp(pitch, -180, 180);
						if (game.name == 'Counter Blox') then
							storage.Events.ControlTurn:FireServer(pitch / 180, character:FindFirstChild('Climbing') and true or false);
						end;
					end;

					replication.angles = {
						yaw = yaw;
						pitch = pitch;
					};

					if (game.name == 'Phantom Forces') then
						if (
							client_cache.spawned
							and flags.force_stance.bool
							and internal.need_stance_spoof
						) then
							internal.modules.NetworkClient:send('stance', string_lower(flags.force_stance_mode));
							internal.need_stance_spoof = false;
						end;
					else
						if (yaw_enabled or spinbot_enabled) then
							root.CFrame = cframe_new(root.CFrame.Position) * cframe_angles(0, math_rad(yaw), 0);
						end;
					end;

					if (flags.fake_lag and flags.fake_lag.bool) then
						if (
							not client_cache.last_lag
							and not client_cache.last_lag_end
							and (
								flags.fake_lag_chance == 100
								or (math_random(0, 100) <= flags.fake_lag_chance)
							)
						) then
							client_cache.last_lag = tick();
						end;
	
						if (
							client_cache.last_lag
							and not client_cache.last_lag_end
							and ((tick() - client_cache.last_lag) >= flags.fake_lag_length)
						) then
							client_cache.last_lag_end = tick();
							client_cache.last_lag = nil;
						end;
	
						if (
							client_cache.last_lag_end
							and ((tick() - client_cache.last_lag_end) >= flags.fake_lag_delay)
						) then
							client_cache.last_lag_end = nil;
						end;
					end;

					if (flags.desync and flags.desync.bool) then
						table_insert(client_cache.desync, 1, {
							position = root.Position;
							angles = vector3_new(
								(replication.angles.pitch / 360) * math_pi,
								(replication.angles.yaw / 360) * math_pi,
								0
							);
						});
	
						if (#client_cache.desync > flags.desync_size) then
							repeat
								table_remove(client_cache.desync, #client_cache.desync);
							until (#client_cache.desync <= flags.desync_size);
						end;
					end;
				end;

				if (game.name == 'Phantom Forces') then
					if (
						client_cache.spawned
						and (
							not flags.force_stance.bool
							or not is_antiaim_enabled
						)
						and client_cache.real_stance ~= client_cache.stance
					) then
						internal.modules.NetworkClient:send('stance', client_cache.real_stance);
					end;
				end;
			end;

			-- ☆ //   rendering esp   // ☆ --

			local font = fonts[flags.esp_font];

			for index, cache in player_cache do
				local player = players:FindFirstChild(index);
				local cache = cache.esp;
				
				if (cache) then
					if (player and flags.render_esp.bool) then
						local destroy_esp;

						local character = get_character(player);
						if (not character) then
							destroy_esp = true;
						end;

						local current_health, max_health;
						if (not destroy_esp) then
							current_health, max_health = get_health(player, character);

							if (
								not current_health
								or current_health <= 0
							) then
								destroy_esp = true;
							end;

							current_health = (current_health and current_health // 1);
							max_health = (max_health and max_health // 1);
						end;

						local head, torso;
						if (not destroy_esp) then
							head = get_body_part(player, character, 'Head');
							torso = get_body_part(player, character, 'Torso');

							if (not head or not torso) then
								destroy_esp = true;
							end;
						end;

						local magnitude;
						local measurement = measurements[flags.esp_measurement];
						if (not destroy_esp) then
							magnitude = (torso.Position - camera.CFrame.Position).Magnitude;

							if (
								flags.esp_distance_limit.bool
								and (magnitude / measurement.conversion) > (flags.esp_distance_limit_max / measurement.conversion)
							) then
								destroy_esp = true;
							end;
						end;
						
						local tag;
						if (not destroy_esp) then
							tag = (team_check(player) and 'T' or 'E');
						end;

						if (not destroy_esp) then
							local hit = raycast(2, camera.CFrame.Position, (head.Position - camera.CFrame.Position).Unit * 900);
							local is_player_visible = (hit and hit:IsDescendantOf(character));

							if (flags[tag .. 'esp_render'].bool) then
								local billboard = cache.billboard;
								local drawings = cache.drawings;

								local optimize_esp = flags.optimize_esp.bool;

								local vector, is_on_screen = camera:WorldToViewportPoint(
									(game.name == 'Phantom Forces') and torso.Position
									or character:GetPivot().Position
								);

								if (is_on_screen) then
									local scale;
									if (optimize_esp) then
										local size = (
											(game.name == 'Phantom Forces') and vector3_new(4, 6, 4)
											or ({character:GetBoundingBox()})[2]
										);

										local height = math_tan(math_rad(camera.FieldOfView / 2)) * 2 * vector.Z;
										local viewport = camera.ViewportSize;
										scale = vector2_new((viewport.Y / height) * size.X, (viewport.Y / height) * size.Y);

										if (game.name == 'Phantom Forces') then
											fspawn(function()
												billboard.Adornee = head;
												run.RenderStepped:Wait();
												billboard.Adornee = torso;
											end);
										else
											billboard.Adornee = character;
										end;

										billboard.AlwaysOnTop = true;
										billboard.Parent = files;
										billboard.Size = udim2_fromoffset(500, 500);
									else
										local position, size = calculate_bounds(character);

										local temp_vector,_ = camera:WorldToScreenPoint(position);
										local inset = guis:GetGuiInset();
										vector = vector3_new(inset.X + temp_vector.X, inset.Y + temp_vector.Y, temp_vector.Z);

										local height = math_tan(math_rad(camera.FieldOfView / 2)) * 2 * vector.Z;
										local viewport = camera.ViewportSize;
										scale = vector2_new((viewport.Y / height) * size.X, (viewport.Y / height) * size.Y);
									end;

									local box = drawings.box;
									if (flags[tag .. 'esp_box'].bool) then
										if (not box) then
											drawings.box = drawing.new('square');
											box = drawings.box;
											box.visible = true;
										end;

										box.size = udim2_fromoffset(scale.X, scale.Y);
										box.thickness = flags.esp_box_thickness;
										box.outline_thickness = flags.esp_box_outline_thickness;

										if (optimize_esp) then
											box.parent = billboard;
											box.position = udim2_fromoffset((250 - (scale.X / 2)), (250 - (scale.Y / 2)));
										else
											box.parent = nil;
											box.position = udim2_fromoffset((vector.X - (scale.X / 2)), (vector.Y - (scale.Y / 2)));
										end;

										set_color({drawing = box; flag = flags[tag .. 'esp_box_color']; index = 2});
										set_color({drawing = box; flag = flags[tag .. 'esp_box_color']; index = 1; fill = true});
									elseif (box) then
										box:destroy();
										drawings.box = nil;
									end;

									local tracer = drawings.tracer;
									if (flags[tag .. 'esp_tracer'].bool) then
										if (not tracer) then
											drawings.tracer = drawing.new('line');
											tracer = drawings.tracer;
											tracer.visible = true;
											tracer.zindex = 0;
										end;

										local position = flags.esp_tracer_position;
										local viewport = camera.ViewportSize;
										tracer.from = (
											flags.client_third_person.bool and client.Character and LPH_NO_VIRTUALIZE(function()
												local cframe, size = client.Character:GetBoundingBox();
												local vector, is_visible = camera:WorldToViewportPoint(
													cframe.Position + vector3_new(0,
														(position == 'up' and (size.Y / 2) or
														position == 'center' and 0 or
														position == 'down' and -(size.Y / 2))
													, 0)
												);

												return vector2_new(vector.X, vector.Y);
											end)() or (
												position == 'up' and vector2_new((viewport.X / 2), flags.esp_tracer_offset) or
												position == 'center' and vector2_new((viewport.X / 2), ((viewport.Y / 2) + flags.esp_tracer_offset)) or
												position == 'down' and vector2_new((viewport.X / 2), (viewport.Y + flags.esp_tracer_offset))
											)
										);
										tracer.to = vector2_new(vector.X, (vector.Y + (scale.Y / 2)));

										set_color({drawing = tracer; flag = flags[tag .. 'esp_tracer_color']; index = 1});
									elseif (tracer) then
										tracer:destroy();
										drawings.tracer = nil;
									end;

									local healthbar_bg = drawings.healthbar_bg;
									local healthbar = drawings.healthbar;
									if (flags[tag .. 'esp_healthbar'].bool) then
										if (not healthbar_bg) then
											drawings.healthbar_bg = drawing.new('square');
											healthbar_bg = drawings.healthbar_bg;
											healthbar_bg.visible = true;
											healthbar_bg.thickness = 0;
											healthbar_bg.outline_thickness = 0;
										end;

										if (not healthbar) then
											drawings.healthbar = drawing.new('square');
											healthbar = drawings.healthbar;
											healthbar.visible = true;
											healthbar.thickness = 0;
											healthbar.outline_thickness = 0;
										end;

										if (cache.old_health and cache.old_health ~= current_health) then
											cache.health_progress = 0;
											cache.health_start = cache.old_health;
											cache.health_goal = current_health;
										end;

										local time = (0.45 * (1 - (current_health / max_health)));
										cache.health_progress = math_min((cache.health_progress or 0) + ndt, time);
										cache.health_factor = (flags.esp_bar_animated.bool and cache.health_goal and ((
											cache.health_start
											+ (cache.health_goal - cache.health_start)
											* tween:GetValue(cache.health_progress / time, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
										) / max_health) or (current_health / max_health));
										cache.old_health = current_health;

										local scale = vector2_new(
											scale.X,
											scale.Y + ((flags.esp_box_thickness + flags.esp_box_outline_thickness) * 2)
										);

										healthbar_bg.zindex = 1;
										healthbar_bg.size = udim2_fromoffset(flags.esp_bar_thickness + 2, scale.Y);
										
										healthbar.zindex = 2;
										healthbar.size = udim2_fromoffset(flags.esp_bar_thickness, (scale.Y * cache.health_factor - 2));
										
										local x,y;
										if (optimize_esp) then
											healthbar_bg.parent = billboard;
											healthbar.parent = billboard;

											x = 250;
											y = 250;
										else
											healthbar_bg.parent = nil;
											healthbar.parent = nil;

											x = vector.X;
											y = vector.Y;
										end;

										healthbar_bg.position = udim2_fromoffset((x - (scale.X / 2) - flags.esp_bar_thickness - flags.esp_bar_offset - 1), (y - (scale.Y / 2)));
										healthbar.position = udim2_fromoffset((x - (scale.X / 2) - flags.esp_bar_thickness - flags.esp_bar_offset), ((y + (scale.Y / 2)) - (scale.Y * cache.health_factor - 1)));

										set_color({drawing = healthbar_bg; flag = flags[tag .. 'esp_healthbar_color']; index = 2; fill = true});
										set_color({drawing = healthbar; flag = flags[tag .. 'esp_healthbar_color']; index = 1; fill = true});
									else
										if (healthbar) then
											healthbar:destroy();
											drawings.healthbar = nil;
										end;

										if (healthbar_bg) then
											healthbar_bg:destroy();
											drawings.healthbar_bg = nil;
										end;
									end;

									local health = drawings.health;
									if (flags[tag .. 'esp_health'].bool) then
										if (not health) then
											drawings.health = drawing.new('text');
											health = drawings.health;
											health.visible = true;
										end;

										health.size = flags.esp_text_size;
										health.alignment = 'right';
										health.text = current_health;
										health.font = font;
										health.outline_thickness = flags.esp_text_outline_thickness;

										local x,y;
										if (optimize_esp) then
											health.parent = billboard;
											
											x = 250;
											y = 250;
										else
											health.parent = nil;

											x = vector.X;
											y = vector.Y;
										end;

										health.position = vector2_new(((x - (scale.X / 2)) - flags.esp_text_offset - (healthbar and (flags.esp_bar_thickness + 2 + flags.esp_bar_offset) or 0) - flags.esp_box_thickness - flags.esp_box_outline_thickness - 90), (y + (scale.Y / 2) - (scale.Y * (current_health / max_health))));

										set_color({drawing = health; flag = flags[tag .. 'esp_health_color']; index = 1});
									elseif (health) then
										health:destroy();
										drawings.health = nil;
									end;

									local armorbar_bg = drawings.armorbar_bg;
									local armorbar = drawings.armorbar;
									local flag = flags[tag .. 'esp_armorbar'];
									if (flag and flag.bool) then
										if (not armorbar_bg) then
											drawings.armorbar_bg = drawing.new('square');
											armorbar_bg = drawings.armorbar_bg;
											armorbar_bg.visible = true;
											armorbar_bg.thickness = 0;
											armorbar_bg.outline_thickness = 0;
										end;

										if (not armorbar) then
											drawings.armorbar = drawing.new('square');
											armorbar = drawings.armorbar;
											armorbar.visible = true;
											armorbar.thickness = 0;
											armorbar.outline_thickness = 0;
										end;

										local scale = vector2_new(
											scale.X,
											scale.Y + ((flags.esp_box_thickness + flags.esp_box_outline_thickness) * 2)
										);

										local armor = (player:FindFirstChild('Kevlar') and player.Kevlar.Value or 0);

										armorbar_bg.zindex = 1;
										armorbar_bg.size = udim2_fromoffset(scale.X, flags.esp_bar_thickness + 2);
										
										armorbar.zindex = 2;
										armorbar.size = udim2_fromoffset((scale.X * (armor / 100) - 2), flags.esp_bar_thickness);
										
										local x,y;
										if (optimize_esp) then
											armorbar_bg.parent = billboard;
											armorbar.parent = billboard;
											
											x = 250;
											y = 250;
										else
											armorbar_bg.parent = nil;
											armorbar.parent = nil;

											x = vector.X;
											y = vector.Y;
										end;
										
										armorbar_bg.position = udim2_fromoffset((x - (scale.X / 2)), (y - (scale.Y / 2) - flags.esp_bar_thickness - flags.esp_bar_offset - 1));
										armorbar.position = udim2_fromoffset((x - (scale.X / 2) + 1), (y - (scale.Y / 2) - flags.esp_bar_thickness - flags.esp_bar_offset));

										set_color({drawing = armorbar_bg; flag = flags[tag .. 'esp_armorbar_color']; index = 2; fill = true});
										set_color({drawing = armorbar; flag = flags[tag .. 'esp_armorbar_color']; index = 1; fill = true});
									else
										if (armorbar) then
											armorbar:destroy();
											drawings.armorbar = nil;
										end;

										if (armorbar_bg) then
											armorbar_bg:destroy();
											drawings.armorbar_bg = nil;
										end;
									end;

									local name = drawings.name;
									if (flags[tag .. 'esp_name'].bool) then
										if (not name) then
											drawings.name = drawing.new('text');
											name = drawings.name;
											name.visible = true;
										end;

										name.size = flags.esp_text_size;
										name.text = player.Name;
										name.font = font;
										name.outline_thickness = flags.esp_text_outline_thickness;

										local x,y;
										if (optimize_esp) then
											name.parent = billboard;
											
											x = 250;
											y = 250;
										else
											name.parent = nil;

											x = vector.X;
											y = vector.Y;
										end;

										name.position = vector2_new(x, ((y - (scale.Y / 2)) - flags.esp_text_offset - (armorbar and (flags.esp_bar_offset + flags.esp_bar_thickness + 2) or 0)));

										set_color({drawing = name; flag = flags[tag .. 'esp_name_color']; index = 1});
									elseif (name) then
										name:destroy();
										drawings.name = nil;
									end;

									local equipped;

									local weapon_icon = drawings.weapon_icon;
									local flag = flags[tag .. 'esp_weapon_icon'];
									if (flag and flag.bool) then
										if (not equipped) then
											equipped = get_weapon(player, character);
										end;

										if (not weapon_icon) then
											drawings.weapon_icon = drawing.new('image');
											weapon_icon = drawings.weapon_icon;
											weapon_icon.visible = true;
										end;

										weapon_icon.size = vector2_new(flags.esp_icon_size * 2.72, flags.esp_icon_size);
										weapon_icon.image = (weapon_icons[equipped] or '');

										local x,y;
										if (optimize_esp) then
											weapon_icon.parent = billboard;
											
											x = 250;
											y = 250;
										else
											weapon_icon.parent = nil;

											x = vector.X;
											y = vector.Y;
										end;

										weapon_icon.position = vector2_new((x - ((flags.esp_icon_size * 2.72) / 2)), ((y + (scale.Y / 2)) + flags.esp_icon_offset));

										set_color({drawing = weapon_icon; flag = flags[tag .. 'esp_weapon_icon_color']; index = 1});
									elseif (weapon_icon) then
										weapon_icon.destroy();
										drawings.weapon_icon = nil;
									end

									local weapon = drawings.weapon;
									local flag = flags[tag .. 'esp_weapon'];
									if (flag and flag.bool) then
										if (not equipped) then
											equipped = get_weapon(player, character);
										end;

										if (not weapon) then
											drawings.weapon = drawing.new('text');
											weapon = drawings.weapon;
											weapon.visible = true;
										end;

										weapon.size = flags.esp_text_size;
										weapon.text = equipped;
										weapon.font = font;
										weapon.outline_thickness = flags.esp_text_outline_thickness;

										local x,y;
										if (optimize_esp) then
											weapon.parent = billboard;
											
											x = 250;
											y = 250;
										else
											weapon.parent = nil;

											x = vector.X;
											y = vector.Y;
										end;

										weapon.position = vector2_new(x, ((y + (scale.Y / 2)) + flags.esp_text_offset + (weapon_icon and (flags.esp_icon_offset + flags.esp_icon_size) or 0)));

										set_color({drawing = weapon; flag = flags[tag .. 'esp_weapon_color']; index = 1});
									elseif (weapon) then
										weapon:destroy();
										drawings.weapon = nil;
									end;

									local distance = drawings.distance;
									if (flags[tag .. 'esp_distance'].bool) then
										if (not distance) then
											drawings.distance = drawing.new('text');
											distance = drawings.distance;
											distance.visible = true;
										end;

										distance.size = flags.esp_text_size;
										distance.text = ((((magnitude / measurement.conversion) * 10) // 1) / 10) .. measurement.suffix;
										distance.font = font;
										distance.outline_thickness = flags.esp_text_outline_thickness;

										local x,y;
										if (optimize_esp) then
											distance.parent = billboard;
											
											x = 250;
											y = 250;
										else
											distance.parent = nil;

											x = vector.X;
											y = vector.Y;
										end;

										distance.position = vector2_new(x, ((y + (scale.Y / 2)) + flags.esp_text_offset + (weapon and (flags.esp_text_gap + flags.esp_text_size) or 0) + (weapon_icon and (flags.esp_icon_offset + flags.esp_icon_size) or 0)));

										set_color({drawing = distance; flag = flags[tag .. 'esp_distance_color']; index = 1});
									elseif (distance) then
										distance:destroy();
										drawings.distance = nil;
									end;

									local visiblity = drawings.visiblity;
									if (flags[tag .. 'esp_visiblity'].bool) then
										if (not visiblity) then
											drawings.visiblity = drawing.new('text');
											visiblity = drawings.visiblity;
											visiblity.visible = true;
										end;

										visiblity.size = flags.esp_text_size;
										visiblity.alignment = 'left';
										visiblity.text = (is_player_visible and 'visible' or 'invisible');
										visiblity.font = font;
										visiblity.outline_thickness = flags.esp_text_outline_thickness;

										local x,y;
										if (optimize_esp) then
											visiblity.parent = billboard;
											
											x = 250;
											y = 250;
										else
											visiblity.parent = nil;

											x = vector.X;
											y = vector.Y;
										end;

										visiblity.position = vector2_new(((x + (scale.X / 2)) + flags.esp_text_offset + flags.esp_box_thickness + flags.esp_box_outline_thickness - 7), (y - (scale.Y / 2)));

										set_color({drawing = visiblity; flag = flags[tag .. 'esp_visiblity_color']; index = 1});
									elseif (visiblity) then
										visiblity:destroy();
										drawings.visiblity = nil;
									end;

									local bomb = drawings.bomb;
									local flag = flags[tag .. 'esp_bomb'];
									if (flag and flag.bool) then
										if (not bomb) then
											drawings.bomb = drawing.new('text');
											bomb = drawings.bomb;
											bomb.visible = true;
										end;

										bomb.size = flags.esp_text_size;
										bomb.alignment = 'left';
										bomb.text = ((workspace.Status.HasBomb.Value == player.Name) and 'has bomb' or '');
										bomb.font = font;
										bomb.outline_thickness = flags.esp_text_outline_thickness;

										local x,y;
										if (optimize_esp) then
											bomb.parent = billboard;
											
											x = 250;
											y = 250;
										else
											bomb.parent = nil;

											x = vector.X;
											y = vector.Y;
										end;

										bomb.position = vector2_new(((x + (scale.X / 2)) + flags.esp_text_offset + flags.esp_box_thickness + flags.esp_box_outline_thickness - 7), (y - (scale.Y / 2) + (visiblity and (flags.esp_text_gap + flags.esp_text_size) or 0)));

										set_color({drawing = bomb; flag = flags[tag .. 'esp_bomb_color']; index = 1});
									elseif (bomb) then
										bomb:destroy();
										drawings.bomb = nil;
									end;

									local bones = drawings.skeleton_bones;
									local data = flags[tag .. 'esp_skeleton'];
									if (data.bool) then

										local head_bone = bones.head_bone;
										local head_torso = bones.head_torso;
										local torso_hip  = bones.torso_hip;
										local left_arm_1 = bones.left_arm_1;
										local left_arm_2 = bones.left_arm_2;
										local right_arm_1 = bones.right_arm_1;
										local right_arm_2 = bones.right_arm_2;
										local hip_line = bones.hip_line;
										local left_leg = bones.left_leg;
										local right_leg = bones.right_leg;

										if (not head_bone) then bones.head_bone = drawing.new('circle'); head_bone = bones.head_bone; end;
										if (not head_torso) then bones.head_torso = drawing.new('line'); head_torso = bones.head_torso; end;
										if (not torso_hip) then bones.torso_hip = drawing.new('line'); torso_hip = bones.torso_hip; end;
										if (not left_arm_1) then bones.left_arm_1 = drawing.new('line'); left_arm_1 = bones.left_arm_1; end;
										if (not left_arm_2) then bones.left_arm_2 = drawing.new('line'); left_arm_2 = bones.left_arm_2; end;
										if (not right_arm_1) then bones.right_arm_1 = drawing.new('line'); right_arm_1 = bones.right_arm_1; end;
										if (not right_arm_2) then bones.right_arm_2 = drawing.new('line'); right_arm_2 = bones.right_arm_2; end;
										if (not hip_line) then bones.hip_line = drawing.new('line'); hip_line = bones.hip_line; end;
										if (not left_leg) then bones.left_leg = drawing.new('line'); left_leg = bones.left_leg; end;
										if (not right_leg) then bones.right_leg = drawing.new('line'); right_leg = bones.right_leg; end;

										for _,bone in bones do
											bone.visible = true;
											bone.zindex = 999;

											set_color({drawing = bone; flag = flags[tag .. 'esp_skeleton_color']; index = 1});
										end;

										local object = entry and entry:getThirdPersonObject();
										local head = object and object:getBodyPart('Head') or character:FindFirstChild('Head');
										local root = object and object:getBodyPart('Torso') or character:FindFirstChild('UpperTorso') or character:FindFirstChild('Torso');
										local leftarm = object and object:getBodyPart('Left Arm') or character:FindFirstChild('Left Arm');
										local rightarm = object and object:getBodyPart('Right Arm') or character:FindFirstChild('Right Arm');
										local leftleg = object and object:getBodyPart('Left Leg') or character:FindFirstChild('Left Leg');
										local rightleg = object and object:getBodyPart('Right Leg') or character:FindFirstChild('Right Leg');

										local vector_head_up = camera:WorldToViewportPoint(head.Position + vector3_new(0, head.Size.Y / 2, 0));
										local vector_head_down = camera:WorldToViewportPoint(head.Position - vector3_new(0, head.Size.Y / 2, 0));
										local vector_torso = camera:WorldToViewportPoint((root.CFrame * cframe_new(0, 0.5, 0)).Position) vector_torso = vector2_new(vector_torso.X, vector_torso.Y);
										local vector_hip = camera:WorldToViewportPoint((root.CFrame * cframe_new(0, -1, 0)).Position);
										local vector_hip_1 = camera:WorldToViewportPoint((root.CFrame * cframe_new(0.5, -1, 0)).Position);
										local vector_hip_2 = camera:WorldToViewportPoint((root.CFrame * cframe_new(-0.5, -1, 0)).Position);
										local vector_left_arm_1 = camera:WorldToViewportPoint(character:FindFirstChild('LeftUpperArm') and character['LeftUpperArm'].Position or (leftarm.CFrame * cframe_new(0, 0.5, 0)).Position);
										local vector_left_arm_2 = camera:WorldToViewportPoint(character:FindFirstChild('LeftLowerArm') and (character['LeftLowerArm'].CFrame * cframe_new(0, -0.5, 0)).Position or (leftarm.CFrame * cframe_new(0, -1, 0)).Position);
										local vector_right_arm_1 = camera:WorldToViewportPoint(character:FindFirstChild('RightUpperArm') and character['RightUpperArm'].Position or (rightarm.CFrame * cframe_new(0, 0.5, 0)).Position);
										local vector_right_arm_2 = camera:WorldToViewportPoint(character:FindFirstChild('RightLowerArm') and (character['RightLowerArm'].CFrame * cframe_new(0, -0.5, 0)).Position or (rightarm.CFrame * cframe_new(0, -1, 0)).Position);
										local vector_left_leg_1 = camera:WorldToViewportPoint((root.CFrame * cframe_new(-0.5, -1, 0)).Position);
										local vector_left_leg_2 = camera:WorldToViewportPoint(character:FindFirstChild('LeftLowerLeg') and (character['LeftLowerLeg'].CFrame * cframe_new(0, -0.5, 0)).Position or (leftleg.CFrame * cframe_new(0, -1.3, 0)).Position);
										local vector_right_leg_1 = camera:WorldToViewportPoint((root.CFrame * cframe_new(0.5, -1, 0)).Position);
										local vector_right_leg_2 = camera:WorldToViewportPoint(character:FindFirstChild('RightLowerLeg') and (character['RightLowerLeg'].CFrame * cframe_new(0, -0.5, 0)).Position or (rightleg.CFrame * cframe_new(0, -1.3, 0)).Position);
										
										head_bone.fill_alpha = 1;
										head_bone.position = vector_head_up:Lerp(vector_head_down, 0.5);
										head_bone.radius = (vector_head_down.Y - vector_head_up.Y) / 2;

										head_torso.from = vector2_new(vector_head_down.X, vector_head_down.Y);
										head_torso.to = vector_torso;

										torso_hip.from = vector_torso;
										torso_hip.to = vector2_new(vector_hip.X, vector_hip.Y);

										left_arm_1.from = vector_torso;
										left_arm_1.to = vector2_new(vector_left_arm_1.X, vector_left_arm_1.Y);

										left_arm_2.from = left_arm_1.to;
										left_arm_2.to = vector2_new(vector_left_arm_2.X, vector_left_arm_2.Y);

										right_arm_1.from = vector_torso;
										right_arm_1.to = vector2_new(vector_right_arm_1.X, vector_right_arm_1.Y);

										right_arm_2.from = right_arm_1.to;
										right_arm_2.to = vector2_new(vector_right_arm_2.X, vector_right_arm_2.Y);

										hip_line.from = vector2_new(vector_hip_1.X, vector_hip_1.Y);
										hip_line.to = vector2_new(vector_hip_2.X, vector_hip_2.Y);

										left_leg.from = vector2_new(vector_left_leg_2.X, vector_left_leg_2.Y);
										left_leg.to = vector2_new(vector_left_leg_1.X, vector_left_leg_1.Y);

										right_leg.from = vector2_new(vector_right_leg_1.X, vector_right_leg_1.Y);
										right_leg.to = vector2_new(vector_right_leg_2.X, vector_right_leg_2.Y);
									else
										for name, bone in bones do
											bone.destroy();
											bones[name] = nil;
										end;
									end;
								else
									clear_drawings(cache, true);
								end;

								local render = flags[tag .. 'esp_arrow_render'];
								local arrow = drawings.arrow;
								if (flags[tag .. 'esp_arrow'].bool and (
									render == 'Always' or
									render == 'Invisible' and not is_on_screen or
									render == 'Visible' and is_on_screen
								)) then
									if (not arrow) then
										drawings.arrow = drawing.new('image');
										arrow = drawings.arrow;
									end;

									local vector = vector2_new(vector.X, vector.Y);
									local viewport = (camera.ViewportSize / 2);

									local direction = (vector - viewport).Unit;
									local theta = math_deg(math_atan2(direction.Y, direction.X));

									local direction = vector2_new(math_cos(math_rad(theta)), math_sin(math_rad(theta)));

									arrow.visible = true;
									arrow.size = vector2_new(flags[tag .. 'esp_arrow_width'], flags[tag .. 'esp_arrow_height']);
									arrow.position = vector2_new(
										viewport.X + (direction.X * flags[tag .. 'esp_arrow_distance']),
										viewport.Y + (direction.Y * flags[tag .. 'esp_arrow_distance'])
									) - (arrow.size / 2);
									arrow.rotation = (theta + 90);
									arrow.image = (flags[tag .. 'esp_arrow_image'] == '1' and 'rbxassetid://282305485' or 'rbxassetid://15000587389');

									set_color({drawing = arrow; flag = flags[tag .. 'esp_arrow_color']; index = 1});
								elseif (arrow) then
									arrow.destroy();
									drawings.arrow = nil;
								end;
							else
								clear_drawings(cache);
							end;

							if (flags[tag .. 'chams'].bool) then
								local won = 'invisible';
										
								if (flags[tag .. 'invisible_chams'].bool and flags[tag .. 'visible_chams'].bool) then
									won = (is_player_visible and 'visible' or 'invisible');
								else
									if (flags[tag .. 'visible_chams'].bool) then
										won = 'visible';
									elseif (flags[tag .. 'invisible_chams'].bool) then
										won = 'invisible';
									end;
								end;

								if (flags[tag .. 'chams_type'] == 'Highlight') then
									for index, box in cache.chams.boxes do
										box:Destroy();
										cache.chams.boxes[index] = nil;
									end;

									local highlight = cache.chams.highlight;
									if (not highlight) then
										cache.chams.highlight = draw('Highlight');
										highlight = cache.chams.highlight;
										highlight.Parent = files;
										highlight.Enabled = true;
									end;

									highlight.DepthMode = Enum.HighlightDepthMode[won == 'visible' and 'Occluded' or 'AlwaysOnTop'];
									highlight.Adornee = character;
									highlight.OutlineColor = color3_fromhsv(unpack(flags[tag .. won .. '_chams_color'].color[1]));
									highlight.OutlineTransparency = flags[tag .. won .. '_chams_color'].alpha[1];
									highlight.FillColor = color3_fromhsv(unpack(flags[tag .. won .. '_chams_color'].color[2]));
									highlight.FillTransparency = flags[tag .. won .. '_chams_color'].alpha[2];
								else
									local highlight = cache.chams.highlight;
									if (highlight) then
										highlight:Destroy();
										cache.chams.highlight = nil;
									end;


								end;
							else
								clear_chams(cache);
							end;
						else
							clear_drawings(cache);
							cache.billboard:Destroy();
							clear_chams(cache);
							player_cache[index].esp = nil;
						end;
					else
						clear_drawings(cache);
						cache.billboard:Destroy();
						clear_chams(cache);
						player_cache[index].esp = nil;
					end;
				end;
			end;

			-- ☆ //   caching items   // ☆ --

			local items = {};
			if (game.name == 'Counter Blox') then
				local has_weapons = table_find(flags.item_esp_selected, 'Dropped Weapons');
				local has_c4 = table_find(flags.item_esp_selected, 'C4');
				local has_grenades = table_find(flags.item_esp_selected, 'Grenades');

				for index, cache in item_cache do
					local item = cache.item;
					if (
						item.Name == 'C4' and not has_c4
						or (item:FindFirstChild('Explode') and item:FindFirstChild('creator') and item.creator:FindFirstChild('NameTag')) and not has_grenades
						or item:FindFirstChild('Ammo') and not has_weapons
					) then
						clear_drawings(cache);
						item_cache[index] = nil;
						return cache.parent:Destroy();
					end;
				end;

				for _, item in workspace.Debris:GetChildren() do
					if (
						item.Name == 'C4' and has_c4
						or item:FindFirstChild('Explode') and has_grenades
						or item:FindFirstChild('Ammo') and has_weapons
					) then
						table_insert(items, item);
					end;
				end;

				local c4 = workspace:FindFirstChild('C4');
				if (c4 and has_c4) then
					table_insert(items, c4);
				end;
			end;

			for _, item in items do
				if (not (function()
                    for _, cache in item_cache do
                        if (cache.item == item) then
                            return (true);
                        end;
                    end;
                end)()) then
					local parent = draw('BillboardGui');
					
					parent.Parent = files;
					parent.Adornee = item;
					parent.Size = udim2_fromoffset(500, 500);
					parent.AlwaysOnTop = true;

					table_insert(item_cache, {
						item = item;
						parent = parent;
						drawings = {};
					});
				end;
			end;

			-- ☆ //   rendering item esp   // ☆ --

			local font = fonts[flags.item_esp_font];

			for index, cache in item_cache do
				local item = cache.item;
				local parent = cache.parent;
				local drawings = cache.drawings;

				if (not item or not item.Parent or not flags.render_item_esp.bool) then
					clear_drawings(cache);
					item_cache[index] = nil;
					return parent:Destroy();
				end;

				local destroy_esp;

				local magnitude;
				local measurement = measurements[flags.item_esp_measurement];
				if (not destroy_esp) then
					magnitude = (item:GetPivot().Position - camera.CFrame.Position).Magnitude;

					if (flags.item_esp_distance_limit.bool and (magnitude / measurement.conversion) > (flags.item_esp_distance_limit_max / measurement.conversion)) then
						destroy_esp = true;
					end;
				end;

				if (destroy_esp) then
					clear_drawings(cache);
					item_cache[index] = nil;
					return parent:Destroy();
				end;

				local vector, is_on_screen = camera:WorldToViewportPoint(item:GetPivot().Position);
				if (not is_on_screen) then
					clear_drawings(cache);
					item_cache[index] = nil;
					return parent:Destroy();
				end;

				local size = vector3_one;
				if (item:IsA('Model')) then
					size = (item:GetBoundingBox())[1];
				elseif (item:IsA('BasePart')) then
					size = item.Size;
				end;

				local height = math_tan(math_rad(camera.FieldOfView / 2)) * 2 * vector.Z;
				local viewport = camera.ViewportSize;
				local scale = vector2_new((viewport.Y / height) * size.X, (viewport.Y / height) * size.Y);

				local item_name = (item:FindFirstChild('Explode') and item:FindFirstChild('creator') and item.creator:FindFirstChild('NameTag') and item.creator.NameTag.Value or item.Name);

				local name = drawings.name;
				if (flags.item_esp_name.bool) then
					if (not name) then
						drawings.name = drawing.new('text');
						name = drawings.name;
						name.visible = true;
					end;

					name.size = flags.item_esp_text_size;
					name.text = item_name;
					name.font = font;
					name.outline_thickness = flags.item_esp_text_outline_thickness;
					name.parent = parent;

					name.position = vector2_new(250, ((250 - (scale.Y / 2)) - flags.item_esp_text_offset));

					set_color({drawing = name; flag = flags.item_esp_name_color; index = 1});
				elseif (name) then
					name:destroy();
					drawings.name = nil;
				end;

				local icon = drawings.icon;
				if (flags.item_esp_icon.bool) then
					if (not icon) then
						drawings.icon = drawing.new('image');
						icon = drawings.icon;
						icon.visible = true;
					end;

					icon.size = vector2_new(flags.item_esp_icon_size * 2.72, flags.item_esp_icon_size);
					icon.image = (weapon_icons[item_name] or '');
					icon.parent = parent;
					icon.position = vector2_new((250 - ((flags.item_esp_icon_size * 2.72) / 2)), (250 - (flags.item_esp_icon_size / 2)));

					set_color({drawing = icon; flag = flags.item_esp_icon_color; index = 1});
				elseif (icon) then
					icon.destroy();
					drawings.icon = nil;
				end

				local distance = drawings.distance;
				if (flags.item_esp_distance.bool) then
					if (not distance) then
						drawings.distance = drawing.new('text');
						distance = drawings.distance;
						distance.visible = true;
					end;

					distance.size = flags.item_esp_text_size;
					distance.text = ((((magnitude / measurement.conversion) * 10) // 1) / 10) .. measurement.suffix;
					distance.font = font;
					distance.outline_thickness = flags.item_esp_text_outline_thickness;
					distance.parent = parent;
					distance.position = vector2_new(250, ((250 + (scale.Y / 2)) + flags.item_esp_text_offset + (weapon and (flags.item_esp_text_gap + flags.item_esp_text_size) or 0)));

					set_color({drawing = distance; flag = flags.item_esp_distance_color; index = 1});
				elseif (distance) then
					distance:destroy();
					drawings.distance = nil;
				end;
			end;
		end));

		table_insert(connections, run.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function(ndt)

			-- ☆ //   fake position replication   // ☆ --

			if (game.name ~= 'Phantom Forces') then
				if (can_work) then
					root.CFrame -= replication.faked;
					replication.real = root.CFrame;
					replication.faked = vector3_zero;
				else
					replication.real = nil;
				end;
			end;
		end)));

		if (game.name == 'Counter Blox') then
			table_insert(connections, client.DamageLogs.ChildAdded:Connect(function(data)
				local victim = players:FindFirstChild(data.Name);

				on_hit(victim, data.DMG.Value);
				data.DMG:GetPropertyChangedSignal('Value'):Connect(function()
					on_hit(victim, data.DMG.Value);
				end);
            end));

			table_insert(connections, client.Status.Kills:GetPropertyChangedSignal('Value'):Connect(function()
				local kills = client.Status.Kills.Value;

				if (kills > 0) then
					on_kill();
				end;
			end));

			local firebullet = internal.firebullet;
			internal.firebullet = function(_, __, is_extra_shot)
				if (not unhooked) then
					if (not is_extra_shot) then
						if (is_gui_visible and not flags.ragebot_enabled.bool) then
							return;
						end;
						last_shoot = tick();

						if (flags.extra_shot.bool) then
							for _= 1, flags.extra_shots do
								internal.firebullet(nil, nil, true);
							end;
						end;
					end;

					local ammos = {
						ammocount = internal.vars.ammocount;
						ammocount2 = internal.vars.ammocount2;
						ammocount3 = internal.vars.ammocount3;
						ammocount4 = internal.vars.ammocount4;
					};

					firebullet();
				
					if (flags.infinite_ammo.bool) then
						for index, value in ammos do
							internal.vars[index] += (value - internal.vars[index]);
						end;
					end;
				end;

				return firebullet();
			end;

			internal.shoot = function()
				if (not internal.vars.DISABLED) then
					internal.firebullet();
				end;
			end;
		elseif (game.name == 'Phantom Forces') then
			table_insert(connections, client.PlayerGui.HudScreenGui.Main.DisplayNotifications.ChildAdded:Connect(function(gui)
                if (gui.Name == 'DisplayBigAward' and flags.custom_kill_message.bool) then
                    gui.TextPrimary.Text = flags.custom_kill_message_text;

                    local debounce;
                    local hook = gui.TextPrimary:GetPropertyChangedSignal('Text'):Connect(function()
                        debounce = (not debounce);

                        if (debounce) then
                            gui.TextPrimary.Text = flags.custom_kill_message_text;
                        end;
                    end);

                    fwait(0.2);
                    hook:Disconnect();
                end;
            end));
			
			table_insert(connections, storage.RemoteEvent.OnClientEvent:Connect(function(name, ...)
				if (name == 'bulletHitConfirm') then
					local victim, part, position, damage = ...;
					last_shoot_position = position;
					run_on_fixed_thread(8, on_hit, victim, damage, part);
				end;
			end));

			local module = internal.modules.NetworkClient;
			local send = module.send; module.send = function(self, event, ...)
                if (not unhooked) then
					for _, type in {
						'client';
						'server';
					} do
						if (flags[type .. '_third_person'].bool) then
							local object = third_person[type].object;

							if (object) then
								if (event == 'equip') then
									local slot = ({...})[1];

									if (slot ~= 3) then
										object:equip(slot);
									else
										object:equipMelee(3);
									end;
								elseif (event == 'stab') then
									object:stab();
								elseif (event == 'aim') then
									object:setAim(({...})[1]);
								elseif (event == 'sprint') then
									object:setSprint(({...})[1]);
								elseif (event == 'stance') then
									if (not checkcaller()) then
										client_cache.real_stance = ({...})[1];
									end;
									client_cache.stance = ({...})[1];

									object:setStance(
										(
											flags.antiaim.bool
											and flags.force_stance.bool
											and (type == 'server')
										) and string_lower(flags.force_stance_mode)
										or client_cache.real_stance
									);
								elseif (event == 'newbullets') then
									object:kickWeapon(nil, nil, 0, 0);
								end;
							end;
						end;
					end;

					if (event == 'spawn' or not client_cache.spawned) then
                        client_cache = {
							desync = {};
                            update_bebt = 0;
                            spawn_time = os_clock();
                            spawned = true;
                        };
					end;
					
					if (event == 'repupdate') then
                        local position, angles, angles2, time = ...;

						if (
							client_cache.last_lag
							and ((tick() - client_cache.last_lag) <= flags.fake_lag_length)
						) then
							return;
						end;

                        if (client_cache.update_bebt > 0) then
                            client_cache.update_bebt -= 1;
                            return;
                        end;

						if (flags.antiaim.bool and replication.angles) then
							angles = vector3_new(
								(replication.angles.pitch / 360) * math_pi,
								(replication.angles.yaw / 360) * math_pi,
								0
							);
							angles2 = (angles * 0.99);
						end;

						if (flags.antiaim.bool and flags.desync.bool) then
							local data = client_cache.desync[#client_cache.desync];

							if (data and data.position) then
								position = data.position;
								angles = data.angles;
								angles2 = (angles * 0.99);
							end;
						end;

                        if (flags.speedhack_enabled.bool and client_cache.last_update) then
							send(self, event, client_cache.last_update, angles, angles2, time);
							client_cache.update_bebt += 1;
                        end;

						if (flags.fly.bool) then
							local result = workspace:Raycast(position - vector3_new(0, 3, 0), vector3_new(0, -1337, 0));
							if (result) then
								local goal = (result.Position + vector3_new(0, 2, 0));
								local debt = 1;

								local delta =  (goal - position);
								local mag = delta.Magnitude;
								if (mag > 15) then
									for i = (mag / 10), 1, -1 do
										send(self, event, goal + (delta * i), angles, angles2, time);
										debt += 1;
									end;

									for i = 1, (mag / 10) do
										send(self, event, goal + (delta * i), angles, angles2, time);
										debt += 1;
									end;
								else
									send(self, event, goal, angles, angles2, time);
								end;

								client_cache.update_bebt += debt;
							end;
						end;

						if (replication.spoofed) then
							position += replication.last_faked;
						end;

                        client_cache.last_angles = angles;
                        client_cache.last_update = position;

                        return send(self, event, position, angles, angles2, time);
                    elseif (event == 'newbullets') then
                        local id, bullet_data, time = ...;

						internal.ticket += #bullet_data.bullets;
						for _, bullet in bullet_data.bullets do
							bullet[2] += internal.ticket_addition;
						end;

                        if (can_silent_aim) then
							local predicted = predict(
								aimbot_target.destination,
								aimbot_target.player,
								bullet_data.firepos,
								{
									movement = {
										enabled = flags.aimbot_predict.bool;
										size = flags.aimbot_predict_size;
									};
									bullet = {
										enabled = flags.aimbot_bullet_predict.bool;
										size = flags.aimbot_bullet_predict_size;
									};
								}
							).Unit;

							for _, bullet in bullet_data.bullets do
								bullet[1] = predicted;
							end;
                        end;

                        return send(self, event, id, bullet_data, time);
                    elseif (event == 'bullethit') then
                        local id, player, position, hit_name, ticket, time = ...;
						ticket += internal.ticket_addition;

                        if (internal.ticket_cache[ticket]) then return; end;

                        internal.ticket_cache[ticket] = true;
                        return send(self, event, id, player, position, hit_name, ticket, time);
                   	elseif (event == 'falldamage' and flags.no_fall.bool) then
                        return;
                    elseif (event == 'stance') then
						if (not checkcaller()) then
							client_cache.real_stance = ...;
						end;

						client_cache.stance = ...;
                    elseif (event == 'changeCamo' and flags.unlock_camos.bool) then
                        return;
                    elseif (event == 'changeAttachment' and flags.unlock_attachments.bool) then
                        return;
                    elseif (event == "changeWeapon") then
						local slot, weapon = ...;
			
						if (flags.unlock_all.bool) then
							local player_data = internal.modules.PlayerDataClientInterface.getPlayerData();

							local module = internal.modules.PlayerDataUtils;
							local class = module.getClassData(player_data).curclass;
							local owns_weapon = module.ownsWeapon;

							local fake_data = table_clone(player_data);
							fake_data.unlockAll = false;
			
							if (slot == 'Primary') then
								internal.fake_weapons[class][1] = weapon;
			
								if (owns_weapon(fake_data, weapon)) then
									internal.real_weapons[class][1] = weapon;
								end;
							elseif (slot == 'Secondary') then
								internal.fake_weapons[class][2] = weapon;
			
								if (owns_weapon(fake_data, weapon)) then
									internal.real_weapons[class][2] = weapon;
								end;
							end;
						end;
                    elseif (
						event == 'flaguser'
						or event == 'debug'
						or event == 'logmessage'
					) then
                        return;
                    end;
                end;
                
                return send(self, event, ...);
            end;

			local network_connections = internal.network_connections;
			local correct_position = network_connections.correctposition; network_connections.correctposition = function(position)
				if (not unhooked) then
					if (flags.fly.bool or flags.jitter_position.bool) then
						return;
					end;
				end;

				return correct_position(position);
			end;

			local module = internal.modules.BulletObject;
			local new = module.new; module.new = LPH_NO_VIRTUALIZE(function(bullet_data)
				if (not unhooked) then
					if (bullet_data.onplayerhit) then
						if (flags.unlock_all.bool) then
							local modules = internal.modules;

							local controller = modules.WeaponControllerInterface.getActiveWeaponController();
							local data = weapon:getWeaponData();

							local cur_class = modules.PlayerDataUtils.getClassData(modules.PlayerDataClientInterface.getPlayerData()).curclass;
							local name = internal.fake_weapons[cur_class][controller:getActiveWeaponIndex()];
			
							if ((data.displayname or data.name) == name) then
								bullet_data.velocity = (
									bullet_data.velocity.Unit *
									modules.ContentDatabase.getWeaponData(name).bulletspeed
								);
							end;
						end;

						if (can_silent_aim) then
							bullet_data.velocity = predict(
								aimbot_target.destination,
								aimbot_target.player,
								bullet_data.position,
								{
									movement = {
										enabled = flags.aimbot_predict.bool;
										size = flags.aimbot_predict_size;
									};
									bullet = {
										enabled = flags.aimbot_bullet_predict.bool;
										size = flags.aimbot_bullet_predict_size;
									};
								},
								{
									acceleration = bullet_data.acceleration;
									speed = bullet_data.velocity.Magnitude;
								}
							);
						end;

						local frames = {};
						local hits = {};
						local time = 0;
						local origin = bullet_data.position;
						local velocity = bullet_data.velocity;
						local penetration = bullet_data.penetrationdepth;
						local ignore = physics_ignore;

						local frame_acceleration = vector3_new(0, -workspace.Gravity, 0);
						while (time < 1) do
							local frame_time = (1 / 200);
							local motion = (frame_time * velocity) + (((frame_time * frame_time) / 2) * frame_acceleration);
							local hit, enter = raycast(1, origin, motion, ignore);

							if (hit and hit.CanCollide and hit.Transparency ~= 1 and hit.Name ~= 'Window') then
								local can_shoot = false;
								local normal = motion.unit;
								local max_extent = hit.Size.magnitude * normal;
								local _, exit = raycast(1, enter + max_extent, -max_extent, {hit}, true);

								if (exit) then
									can_shoot = true;
									penetration = penetration - normal:Dot(exit - enter);

									if (penetration < 0) then
										table_insert(frames, {origin, enter});
										table_insert(hits, enter);
										break;
									end;
								else
									can_shoot = true;
								end;

								if (can_shoot) then
									table_insert(hits, exit);
									table_insert(hits, enter);
									table_insert(ignore, hit);
									table_insert(frames, {origin, exit});

									local time_passed = (motion:Dot(enter - origin) / motion:Dot(motion)) * frame_time;
									origin = enter + (0.01 * (origin - enter).unit);
									velocity = velocity + (time_passed * frame_acceleration);
									time = time + time_passed;
								end;
							else
								table_insert(frames, {origin, origin + motion});
								origin = origin + motion;
								velocity = velocity + (frame_time * frame_acceleration);
								time = time + frame_time;
							end;
						end;

						if (flags.bullet_tracer.bool) then
							run_on_other_thread(beam, frames[1][1], frames[#frames][2]);
						end;
					end;
				end;

				return new(bullet_data);
			end);

			local module = internal.modules.ScreenCull;
			local step = module.step; module.step = LPH_NO_VIRTUALIZE(function(cframe, viewport_size, fov)
				step(cframe, viewport_size, fov);
				if (not unhooked) then
					local progress = zoom_progress.Value;
					if (flags.custom_fov.bool) then
						camera.FieldOfView = flags.custom_fov_fov;
					end;

					if (progress ~= 0) then
						camera.FieldOfView = lerp((flags.custom_fov.bool and flags.custom_fov_fov or fov), flags.zoom_fov, progress);
					end;

					if (flags.client_third_person.bool and root) then
						camera.CFrame *= cframe_new(flags.third_person_x_distance * camera_progress, flags.third_person_y_distance * camera_progress, flags.third_person_z_distance * camera_progress);
					end;

					if (flags.aspect_ratio.bool) then
						local horizontal_stretch = (flags.horizontal_stretch / 100);
						local vertical_stretch = (flags.vertical_stretch / 100);

						local x,y,z,   r1_1, r1_2, r1_3,   r2_1, r2_2, r2_3,   r3_1, r3_2, r3_3 = camera.CFrame:GetComponents();
						camera.CFrame = cframe_new(x, y, z, (r1_1 * horizontal_stretch), (r1_2 * vertical_stretch), r1_3, r2_1, (r2_2 * vertical_stretch), r2_3, (r3_1 * horizontal_stretch), (r3_2 * vertical_stretch), r3_3);
					end;
				end;
			end);

			local module = internal.modules.FirearmObject;
			local can_fire = module.canFire; module.canFire = LPH_NO_VIRTUALIZE(function(...)
				if (not unhooked) then
					if (is_gui_visible) then
						return (false);
					end;
				
					if (should_shoot) then
						should_shoot = false;

						local character = internal.character;
						if (
							character and not character.reloading
							and weapon
							and (tick() - last_shoot) > (60 / weapon:getFirerate())
						) then
							last_shoot = tick();

							return (true);
						end;
					end;
				end;

				return can_fire(...);
			end);

			local index_weapon = module.getWeaponStat; module.getWeaponStat = LPH_NO_VIRTUALIZE(function(self, index)
                if (not unhooked) then
					if (index == 'hipfirespread' and flags.modify_spread.bool) then
						return lerp(
							index_weapon(self, index),
							0,
							1 - (flags.spread_percent / 100)
						);
					end;
                end;

                return index_weapon(self, index);
            end);

			local index_aim = module.getActiveAimStat; module.getActiveAimStat = LPH_NO_VIRTUALIZE(function(self, index)
                if (not unhooked) then
					if ((index == 'aimspeed' or index == 'unaimspeed') and flags.faster_aim.bool) then
						local value = index_aim(self, index);

						return lerp(
							value,
							(value * 100),
							1 - (flags.aim_percent / 100)
						);
					end;
                end;

                return index_aim(self, index);
            end);

			local reload = module.reload; function module:reload()
				if (flags.instant_reload.bool and self._spareCount > 0) then
					if (self._spareCount >= self._weaponData.magsize) then
						self._spareCount = self._spareCount - (self._weaponData.magsize - self._magCount);
						self._magCount = self._weaponData.magsize;
					else
						self._magCount = self._spareCount;
						self._spareCount = 0;
					end;

					return send(internal.modules.NetworkClient, "reload");
				end;

				return reload(self);
			end;

			local module = internal.modules.MainCameraObject;
			local step = module.step; module.step = LPH_NO_VIRTUALIZE(function(self, dt)
				if (not unhooked) then
					if (flags.no_camera_sway.bool) then
						local character = internal.character;
						local old = character._speed;

						character._speed = 0;
						step(self, 0);
						self._lookDt = dt;
						character._speed = old;
						return;
					end;
				end;

				return step(self, dt);
			end);

			local module = internal.modules.ThirdPersonObject;
			local set_character_render = module.setCharacterRender; module.setCharacterRender = LPH_NO_VIRTUALIZE(function(self, render)
                if (not unhooked) then
                    if (flags.client_third_person.bool or flags.server_third_person.bool) then
                        return set_character_render(
							self,
							render or (
								self._player ~= client
								and camera:WorldToViewportPoint(
									self._replicationObject._receivedPosition
									or self:getRootPart().Position
								).Z > 0
							)
						);
                    end;
                end;

                return set_character_render(self, render);
            end);

			for _, data in {
				{
					module = internal.modules.FirearmObject;
					sway_indexes = {
						gun = 'computeGunSway';
						walk = 'computeWalkSway';
					};
					viewmodel_factor = 1;
				};
				{
					module = internal.modules.MeleeObject;
					sway_indexes = {
						gun = 'meleeSway';
						walk = 'walkSway';
					};
					viewmodel_factor = 1;
				};
				{
					module = internal.modules.GrenadeObject;
					sway_indexes = {
						gun = 'modelSway';
						walk = 'walkSway';
					};
					viewmodel_factor = -1;
				};
			} do
				local module = data.module;
				local sway_indexes = data.sway_indexes;
				local viewmodel_factor = data.viewmodel_factor;

				local compute_gun_sway = module[sway_indexes.gun]; module[sway_indexes.gun] = LPH_NO_VIRTUALIZE(function(...)
					if (not unhooked) then
						if (flags.no_gun_sway.bool) then
							return cframe_identity;
						end;
					end;
	
					return compute_gun_sway(...);
				end);

				local compute_walk_sway = module[sway_indexes.walk]; module[sway_indexes.walk] = LPH_NO_VIRTUALIZE(function(self, dy, dx)
					if (not unhooked) then
						if (flags.no_walk_sway.bool) then
							dy = 0;
							dx = 0;
						end;
					end;
	
					return compute_walk_sway(self, dy, dx);
				end);

				local step = module.step; module.step = LPH_NO_VIRTUALIZE(function(...)
					if (not unhooked and weapon) then
						local default = weapon:getWeaponStat("mainoffset");
						if (flags.custom_viewmodel.bool) then
							({...})[1]._mainOffset = default * cframe_new(
								flags.viewmodel_x + (viewmodel_factor == -1 and (flags.viewmodel_z / 2) or 0),
								flags.viewmodel_y,
								flags.viewmodel_z * viewmodel_factor
							);
						else
							({...})[1]._mainOffset = default;
						end;
					end;

					return step(...);
				end);
			end;

			local module = internal.modules.RecoilSprings;
			local recoil_calculation = module.getUniformDist; module.getUniformDist = LPH_NO_VIRTUALIZE(function(self, factor1, factor2)
                if (not unhooked) then
					if (flags.modify_recoil.bool) then
						local progress = (1 - (flags.recoil_percent / 100));
						
						factor1 = lerp(factor1, 0, progress);
						factor2 = lerp(factor2, 0, progress);
					end;
                end;

                return recoil_calculation(self, factor1, factor2);
            end);

			local module = internal.modules.ModifyData;
			local get_modified_data = module.getModifiedData; module.getModifiedData = function(data, ...)
				if (not unhooked) then
					local was_readonly = isreadonly(data);
					setreadonly(data, false);

					if (flags.unlock_all.bool) then
						for class, weapons in internal.fake_weapons do
							if (
								class == internal.modules.PlayerDataUtils.getClassData(
									internal.modules.PlayerDataClientInterface.getPlayerData()
								).curclass
							) then
								for slot, name in weapons do
									if name == (data.displayname or data.name) then
										local real_data = internal.modules.ContentDatabase.getWeaponData(internal.real_weapons[class][slot]);
										local firecap = (
											real_data.firecap
											or (
												(
													real_data.variablefirerate
													and math_max(
														unpack(real_data.firerate)
													)
												)
												or real_data.firerate
											)
										);

										if (data.variablefirerate) then
											local firerates = {};

											for index, firerate in data.firerate do
												firerates[index] = math_min(firerate, firecap);
											end;

											data.firerate = firerates;
										elseif (data.firerate > firecap) then
											data.firerate = firecap;
										end;

										if (data.firecap and data.firecap > firecap) then
											data.firecap = firecap;
										end;

										if (data.magsize > real_data.magsize) then
											data.magsize = real_data.magsize;
											data.sparerounds = real_data.sparerounds;
										else
											data.sparerounds = (real_data.magsize + real_data.sparerounds) - data.magsize;
										end;

										if (data.pelletcount ~= real_data.pelletcount) then
											data.pelletcount = real_data.pelletcount;
										end;

										if (data.penetrationdepth > real_data.penetrationdepth) then
											data.penetrationdepth = real_data.penetrationdepth;
										end;

										data.bulletspeed = real_data.bulletspeed;
										break;
									end;
								end;
							end;
						end;
					end;

					setreadonly(data, was_readonly);
				end;

				return get_modified_data(data, ...);
			end;

			local module = internal.modules.PlayerDataUtils;
			local real_kills;
			local get_unlocks_data = module.getUnlocksData; module.getUnlocksData = function(player)
				local unlocks = get_unlocks_data(player)

				if (
					player == internal.modules.PlayerDataClientInterface.getPlayerData()
					and flags.unlock_attachments.bool
				) then
					local old_unlocks = unlocks;
					unlocks = setmetatable({}, {
						__index = function(self, index)
							if (not old_unlocks[index]) then
								old_unlocks[index] = {};
							end;

							if (not real_kills) then
								real_kills = old_unlocks[index].kills;
							end;
							old_unlocks[index].kills = (
								flags.unlock_attachments.bool and 9e9
								or real_kills
							);
							return (old_unlocks[index]);
						end,
						__newindex = function(self, index, value)
							old_unlocks[index] = value;
							return;
						end;
					});
				end;

				return (unlocks);
			end;

			local module = internal.modules.CharacterObject;
			local jump = module.jump; module.jump = function(self, height, ...)
                if (not unhooked) then
					if (flags.jumphack_enabled.bool) then
						height = (flags.jumphack_power / 10);
					end;
                end

                return jump(self, height, ...);
            end;

			local set_walkspeed = module.setBaseWalkSpeed; module.setBaseWalkSpeed = function(self, speed)
                if (not unhooked) then
					if (not checkcaller()) then
						client_cache.walk_speed = speed;
					end;
                end;

                return set_walkspeed(self, speed);
            end;

			local module = internal.modules.WeaponControllerObject;
			local swap_weapon = module.swapWeapon; module.swapWeapon = function(...)
				if (not unhooked) then
					if (is_gui_visible) then
						return;
					end;
				end;

				return swap_weapon(...);
			end;

			internal.send = function(...)
				send(internal.modules.NetworkClient, ...);
			end;
			internal.set_character_render = set_character_render;
			internal.set_walkspeed = set_walkspeed;
		end;

		if (flags.auto_chat) then
			fspawn(function()
				repeat
					local selected = flags.auto_chat_selected;
					if (
						selected ~= ''
						and flags.auto_chat.bool
						and (
							game.name == 'Universal'
							or flags.auto_chat_mode == 'Spam'
						)
					) then
						local chat = 'eternal/chat/' .. selected;

						if (isfile(chat)) then
							local texts = string_split(readfile(chat), '\n');
							local text = texts[math_random(1, #texts)];

							if (game.name == 'Counter Blox') then
								storage.Events.PlayerChatted:FireServer(text, false);
							elseif (game.name == 'Phantom Forces') then
								textchat:FindFirstChild('TextChannels'):FindFirstChild('Global'):SendAsync(text);
							end;
						end;
					end;

					fwait(flags.auto_chat_delay);
				until (unhooked);
			end);
		end;

		-- ☆ //   meta-method hook   // ☆ --

		if (getrawmetatable) then
			local roblox_metatable = getrawmetatable(roblox);
			setreadonly(roblox_metatable, false);

			local __namecall = roblox_metatable.__namecall;
			roblox_metatable.__namecall = newcclosure(
				(game.name == 'Counter Blox') and LPH_NO_VIRTUALIZE(function()
					local sigma = 'skibidi...';

					return (function(self, ...)
						local method = getnamecallmethod();
						local args = {...};

						if (method == 'FindPartOnRayWithIgnoreList' and not args[10] and args[2][1] == workspace.Debris) then
							last_shoot_position = (mouse.Target and mouse.Hit.Position);
							
							if (can_silent_aim) then
								local origin = aimbot_target.origin;
								local destination = aimbot_target.destination;

								args[1] = ray_new(origin, (destination - origin).unit * (destination - origin).magnitude);

								return __namecall(self, unpack(args));
							end;
						elseif (method == 'GetAttribute' and args[1] == 'Speed') then
							if (stop_movement) then
								return 0;
							elseif (flags.speedhack_enabled.bool) then
								return flags.speedhack_speed;
							end;
						elseif (method == 'GetPlayers' and is_gui_visible) then
							local calling_script = getcallingscript();
							calling_script = calling_script and calling_script.Name;

							if (calling_script == 'Client' or calling_script == 'Spectating') then
								return {};
							end;
						elseif (method == 'SetPrimaryPartCFrame') then
							if (self.Name == 'Arms') then
								if (flags.client_third_person.bool) then
									args[1] = cframe_new();

									return __namecall(self, unpack(args));
								elseif (flags.custom_viewmodel.bool) then
									args[1] *= cframe_new(flags.viewmodel_x, flags.viewmodel_y, flags.viewmodel_z);

									return __namecall(self, unpack(args));
								end;
							end;
						elseif (method == 'FireServer' and not checkcaller()) then
							local name = self.Name;

							if (name == 'HitPart' and flags.bullet_tracer.bool) then
								run_on_other_thread(beam, args[10], vector3_new((((args[2].X / 13) - 1325) / 4) + 74312, ((args[2].Y + 4201432) / 4) - 3183421, ((args[2].Z / 2) + 581357) / 41));
							elseif (name == 'ControlTurn' and flags.antiaim.bool) then
								return;
							elseif (name == 'DataEvent') then
								local is_fake = (args[1][4].eternal_id ~= nil);
								args[1][4].eternal_id = nil;

								if (flags.__INVENTORYCHANGER.enabled) then
									local path = args[1][2];
									local list = {};

									if (path == 'Both') then
										for _, instance in {
											client.SkinFolder.CTFolder;
											client.SkinFolder.TFolder;
										} do
											for _, item in instance:GetChildren() do
												table_insert(list, item);
											end;
										end;
									else
										list = client.SkinFolder[path .. 'Folder']:GetChildren();
									end;

									for _, item in list do
										if (item.Name == args[1][3]) then
											item.Value = string_split(args[1][4][1], '_')[2];

											for _, instance in item:GetChildren() do
												instance:Destroy();
											end;

											if (args[1][4][2] == 'StatTrak') then
												local string_value = draw('StringValue');
												local int_value = draw('IntValue');

												string_value.Parent = item;
												string_value.Name = 'StatTrak';

												int_value.Parent = string_value;
												int_value.Name = 'Count';
												int_value.Value = args[1][4][4];
											end;
										end;
									end;

									return;
								end;
							end;
						end;

						return __namecall(self, ...);
					end);
				end)()

				or (game.name == 'Universal') and LPH_NO_VIRTUALIZE(function()
					return (function(self, ...)
						local method = getnamecallmethod();
						local args = {...};

						if (can_silent_aim) then
							local hooks = flags.aimbot_silent_hooks;

							if (
								method == 'FindPartOnRayWithIgnoreList' and table_find(hooks, 'FindPartOnRayWithIgnoreList')
								or method == 'FindPartOnRayWithWhiteList' and table_find(hooks, 'FindPartOnRayWithWhiteList')
							) then
								local origin = args[1].Origin;
								local destination = aimbot_target.destination;
								args[1] = ray_new(origin, (destination - origin).unit * (destination - origin).magnitude);

								return __namecall(self, unpack(args));
							end;
						end;

						return __namecall(self, ...);
					end);
				end)()

				or LPH_NO_VIRTUALIZE(function(self, ...)
					return __namecall(self, ...);
				end)
			);

			local __index = roblox_metatable.__index;
			roblox_metatable.__index = newcclosure(
				(game.name == 'Counter Blox') and LPH_NO_VIRTUALIZE(function()
					local skibidi = 'sigma..';

					return (function(self, index)
						if (index == 'Value') then
							local name = self.Name;

							if (name == 'Recoil') then
								if (flags.modify_recoil.bool) then
									return (__index(self, index) * (flags.recoil_percent / 100));
								end;
							elseif (name == 'FireRate') then
								if (flags.modify_firerate.bool) then
									return (__index(self, index) * (flags.firerate_percent / 100));
								end;
							elseif (string_find(self:GetFullName(), 'Spread')) then
								if (flags.modify_spread.bool) then
									return (__index(self, index) * (flags.spread_percent / 100));
								end;
							end;
						elseif (index == 'CFrame') then 
							if (self == root and replication.real) then
								local calling_script = getcallingscript();

								if (calling_script and calling_script.Name == 'Client') then
									return replication.real;
								end;
							end;
						end;

						return __index(self, index);
					end);
				end)()

				or (game.name == 'Universal') and LPH_NO_VIRTUALIZE(function()


					return (function(self, index)
						if (self == root and index == 'CFrame' and replication.spoofed) then
							local calling_script = getcallingscript()
				
							if (calling_script and calling_script.Name == 'CameraModule') then
								return replication.real;
							end;
						end;

						return __index(self, index);
					end);
				end)()

				or LPH_NO_VIRTUALIZE(function(self, index)
					return __index(self, index);
				end)
			);

			local __newindex = roblox_metatable.__newindex;
			roblox_metatable.__newindex = newcclosure(
				(game.name == 'Counter Blox') and LPH_NO_VIRTUALIZE(function()
					local crosshair = client.PlayerGui.GUI.Crosshairs.Crosshair;

					return (function(self, index, value)
						if (self == camera and index == 'CFrame') then
							if (can_work and replication.spoofed) then
								value = (value.Rotation + (replication.real.Position + vector3_new(0, (head.Position - root.Position).Magnitude, 0)));
							end;

							if (can_aimbot) then
								local destination;

								if (aimbot_speed == 100) then
									destination = aimbot_target.destination
								else
									destination = (value.Position + value.LookVector):Lerp(aimbot_target.destination, aimbot_speed / 1000);
								end;

								value = cframe_new(value.Position, destination);
							end;

							if (flags.client_third_person.bool and character) then
								value *= cframe_new(flags.third_person_x_distance * camera_progress, flags.third_person_y_distance * camera_progress, flags.third_person_z_distance * camera_progress);
							end;

							if (flags.aspect_ratio.bool) then
								local horizontal_stretch = (flags.horizontal_stretch / 100);
								local vertical_stretch = (flags.vertical_stretch / 100);

								local x,y,z,   r1_1, r1_2, r1_3,   r2_1, r2_2, r2_3,   r3_1, r3_2, r3_3 = value:GetComponents();
								value = cframe_new(x, y, z, (r1_1 * horizontal_stretch), (r1_2 * vertical_stretch), r1_3, r2_1, (r2_2 * vertical_stretch), r2_3, (r3_1 * horizontal_stretch), (r3_2 * vertical_stretch), r3_3);
							end;

							return __newindex(self, index, value);
						elseif (index == 'Text') then
							local detects = 0;

							for match in string_gmatch(value, client.Name) do
								detects += 1;
							end;
							for match in string_gmatch(value, client.DisplayName) do
								detects += 1;
							end;

							if (detects > 0) then
								if (flags.anti_kick.bool and string_find(value, '1 more votes to kick', 1, true)) then
									client:Kick('Dodged a kick; rejoining');
									tps:TeleportToPlaceInstance(roblox.PlaceId, roblox.JobId, client);
								end;
							end;
						elseif (index == 'Visible') then
							if (self == crosshair and flags.no_crosshair.bool) then
								return __newindex(self, index, false);
							end;
						end;

						return __newindex(self, index, value);
					end);
				end)()

				or (game.name == 'Universal') and LPH_NO_VIRTUALIZE(function()
					return (function(self, index, value)
						if (self == camera and index == 'CFrame') then
							if (can_work and fr_camera_fix == '2') then
								value = (value.Rotation + (replication.real.Position + vector3_new(0, (head.Position - root.Position).Magnitude, 0)));
							end;

							if (can_aimbot) then
								local destination;

								if (aimbot_speed == 100) then
									destination = aimbot_target.destination
								else
									destination = (value.Position + value.LookVector):Lerp(aimbot_target.destination, aimbot_speed / 1000);
								end;

								value = cframe_new(value.Position, destination);
							end;

							if (flags.client_third_person.bool and character) then
								value *= cframe_new(flags.third_person_x_distance * camera_progress, flags.third_person_y_distance * camera_progress, flags.third_person_z_distance * camera_progress);
							end;

							if (flags.aspect_ratio.bool) then
								local horizontal_stretch = (flags.horizontal_stretch / 100);
								local vertical_stretch = (flags.vertical_stretch / 100);

								local x,y,z,   r1_1, r1_2, r1_3,   r2_1, r2_2, r2_3,   r3_1, r3_2, r3_3 = value:GetComponents();
								value = cframe_new(x, y, z, (r1_1 * horizontal_stretch), (r1_2 * vertical_stretch), r1_3, r2_1, (r2_2 * vertical_stretch), r2_3, (r3_1 * horizontal_stretch), (r3_2 * vertical_stretch), r3_3);
							end;
						end;

						return __newindex(self, index, value);
					end);
				end)()

				or LPH_NO_VIRTUALIZE(function(self, index, value)
					return __newindex(self, index, value);
				end)
			);
			
			setreadonly(roblox_metatable, true);

			append_unhook(function()
				setreadonly(roblox_metatable, false);

				roblox_metatable.__namecall = __namecall;
				roblox_metatable.__index = __index;
				roblox_metatable.__newindex = __newindex;

				setreadonly(roblox_metatable, true);
			end);
		end;
	elseif (game.type == 'tycoon') then
				
		-- ☆ //   variables   // ☆ --

		local internal = {};

		local character;
		local humanoid;

		local mouse_click;

		local points = {};
		local teleport_tool = draw('Tool'); teleport_tool.Name = 'teleport tool';
		local selection_frame = draw('Frame'); selection_frame.Parent = files; selection_frame.Transparency = 0.7; selection_frame.BorderSizePixel = 0;

		local grabable;
		local vehicles;
		local spawned_ores;
		local spawned_trees;
		local hidden_ores;
		local hidden_trees;

		local content;
		local materials;

		local all_trees;
		local all_ores;

		local locations;
		local npcs;
		local shop_products;
		local selected_items;
		local selected_spawners;
		local all_fish;
		local fishing_zones;

		local tree_cache = {};
		local ore_cache = {};
		local player_cache = {};

		if (game.name == 'Refinery Caves 2') then
			grabable = workspace.Grab;
			vehicles = workspace.Vehicles;
			spawned_ores = workspace.WorldSpawn.Ores;
			spawned_trees = workspace.WorldSpawn.Trees;
			hidden_ores = first.HiddenOres;
			hidden_trees = first.HiddenTrees;

			content = storage.Content;
			materials = content.Materials;

			all_trees = (function()
				local list = {};
				for _, tree in storage.Content.Trees:GetChildren() do
					if (not table_find(list, tree.Name)) then
						table_insert(list, tree.Name);
					end;
				end;
				return list;
			end)();

			all_ores = (function()
				local list = {};
				for _, ore in storage.Content.Ores:GetChildren() do
					if (not table_find(list, ore.Name)) then
						table_insert(list, ore.Name);
					end;
				end;
				return list;
			end)();

			locations = {
				['Spawn']               = vector3_new(1358, 31, -618);
				['Your Base']           = vector3_zero;
				['Crystal Cave']        = vector3_new(-7415, -623, 1135);
				['King\'s Great Halls'] = vector3_new(-1883, -648, 2271);
				['Mountain "Adam"']     = vector3_new(-7724, 498, -3916);
				['Cloudnite Entry']     = vector3_new(-7241, 761, -3246);
				['Abandoned Shop']      = vector3_new(2316, 5, 1710);
				['Lush Shop']           = vector3_new(-571, -529, 1034);
				['Nova Ferry docks']    = vector3_new(-1585, 4, 557);
				['Beach Shop']          = vector3_new(1860, 5, -1358);
				['Sellzone']            = vector3_new(920, 31, -705);
				['The Jungle']          = vector3_new(-2, 152, 2522);
				['Jungle Cave']         = vector3_new(-40, 156, 3554);
				['Stone Cradle']        = vector3_new(380, -97, 3249);
				['Deadzone']            = vector3_new(1272, 146, 2978);
				['Vi\'s Logics']        = vector3_new(-5160, 62, -2861);
				['Vi\'s Lab']           = vector3_new(-5160, 63, -2865);
				['Craig\'s Dealership'] = vector3_new(-6842, 4, -4230);
				['Miner\'s Hideout']    = vector3_new(-7881, 178, -3319);
				['Furniture Store']     = vector3_new(1146, 105, 541);
				['The Sarcophagus']     = vector3_new(-6563, 7, -3555);
				['Scorching Valley']    = vector3_new(-7435, -574, -2908);
				['Cursed Cave']         = vector3_new(-7130, -712, -2545);
				['Quarry']              = vector3_new(-1035, -52, 1283);
				['Test']                = vector3_new();
				['Tutorial']            = vector3_new(4401, -704, 2359);
				['Spore Cave']          = vector3_new(-5658, -128, 4731);
				['Dune Rod Altar']      = vector3_new(383, -414, 792);
			};

			npcs = (function()
				local list = {};
				
				pcall(function()
					list.Maroon = workspace.Map.Structures.Nova_Sellary.TalkPart;
				end);

				for _, talk_part in workspace:GetDescendants() do
					if (talk_part.Name == 'TalkPart' and talk_part.Parent:FindFirstChild('Humanoid')) then
						list[talk_part.Parent.Name] = talk_part.Parent;
					end;
				end;

				return list;
			end)();

			shop_products = {};
			selected_items = {};
			selected_spawners = {};

			for _, shop in workspace.Map.Structures:GetChildren() do
				if (shop.ClassName == 'Model' and shop:FindFirstChild('Products')) then
					for _, product in shop.Products:GetChildren() do
						if (not shop_products[product.Name]) then
							shop_products[product.Name] = shop.Registers:FindFirstChildWhichIsA('Model').TalkPart;
						end;
					end;
				end;
			end;

			all_fish = {
				'Green Crystal Fish';
				'Blue Crystal Fish';
				'Yellow Crystal Fish';
				'Red Crystal Fish';
				'Silver Chest';
				'Pearl';
				'Sand Carp';
				'Skull';
				'Crab';
				'Runestone';
				'Golden Chest';
				'Gold Key';
				'Silver Key';
				'Angler Fish';
				'Catfish';
				'Tuna';
				'Old Boot';
				'Ship Wheel';
				'Bone';
				'Red Snapper';
				'Red Gemstone';
				'Black Pearl';
				'Seaweed';
				'Purple Gemstone';
				'Clam';
				'Clownfish';
				'Rusty Gear';
				'Spiny Turtle';
				'Stingray';
				'Barracuda';
				'Salmon';
				'Angel Fish';
				'Pink Axolotl';
				'White Axolotl';
				'Blue Axolotl';
				'BlueGill';
				'Lionfish';
				'Green Axolotl';
				'Purple Axolotl';
				'Yellow Axolotl';
				'Pike';
				'Koi';
				'Swamp Koi';
				'Sunken Throwiel';
				'Muddy Throwiel';
				'Alligator Gal';
				'Swamp Eel';
				'Fish Skeleton';
				'GoldFish';
				'Blue Tang';
				'Jellyfish';
			};

			fishing_zones = {
				['Current Position'] = vector3_zero;
				['CrystalPond']      = vector3_new(-7478, -645, 1112);
				['LushCave']         = vector3_new(-17, -551, 1616);
				['Quarry']           = vector3_new(-1104, -91, 1201);
				['Sarcophagus']      = vector3_new(-6646, -6, -3524);
				['SmallCorals']      = vector3_new(1734, -6, -1705);
				['BigCorals']        = vector3_new(-3098, -6, 572);
				['Swamp']            = vector3_new(1077, -6, 1941);
				['Jungle']           = vector3_new(592, 210, 3958);
				['TestZone']         = vector3_new(-332, 240, 847);
				['Scorching Valley'] = vector3_new(-7381, -619, -2877);
			};
		elseif (game.name == 'Oaklands') then
			if (getrawmetatable) then
				local roblox_metatable = getrawmetatable(roblox);
				setreadonly(roblox_metatable, false);
	
				local __namecall = roblox_metatable.__namecall;
				roblox_metatable.__namecall = newcclosure(LPH_NO_VIRTUALIZE(function(self, ...)
					local method = getnamecallmethod();

					if (method == 'FireServer') then
						local name = self.Name;
						local args = {...};

						for index, value in args do
							if (typeof(value) == 'table') then
								for index, value in value do
									if (
										index == 'val'
										and value == true
									) then
										local a = getcallingscript();
										print(a, a and a:GetFullName());
										return;
									end;
								end;
							end;
						end;
					end;

					return __namecall(self, ...);
				end));
				
				setreadonly(roblox_metatable, true);
			else
				return client:Kick('ur exec is too weak, try other exec');
			end;

			locations = {};
			npcs = {};
			shop_products = {};
			selected_items = {};
			selected_spawners = {};
			all_fish = {};
			fishing_zones = {};
			all_trees = {};
			all_ores = {};
		end;

		local ping = 0;

		-- ☆ //   functions   // ☆ --

		local function fire_server(event, ...)
			local timed = tick();
			event:FireServer(...);
			ping = (tick() - timed);
		end;

		local bypasser;
		local function set_bypasser()
			bypasser = workspace.Npcs.Teach.TalkPart.Interact;
		end;

		local npc_position = vector3_new(1290, 29, -617);
		local function bypass_antitp()
			fspawn(function()
				client:RequestStreamAroundAsync(npc_position);
			end);

			if (not bypasser and not pcall(set_bypasser)) then
				local old_position = character:GetPivot();

				repeat
					character:PivotTo(cframe_new(npc_position));
					fwait();
				until (pcall(set_bypasser));

				character:PivotTo(old_position);
			end;

			fire_server(bypasser, 'Yes', 1);
		end;

		local tp_id = 0;
		local is_teleporting;
		local function teleport(goal, mode)
			if (character) then
				if (not mode) then
					mode = flags.client_tp_mode;
				end;

				is_teleporting = true;

				local seat = character.Humanoid.SeatPart;
				if (seat) then
					local model = seat:FindFirstAncestorWhichIsA('Model');
					if (model) then
						model:PivotTo(cframe_new(goal));
					end;
				else
					if (mode == 'Vehicle Bypass') then
						local distance = (goal - character:GetPivot().Position).Magnitude;
						if (distance <= 20) then
							return character:PivotTo(cframe_new(goal));
						elseif (distance <= 250) then
							return teleport(goal, 'Slow');
						end;

						local function parse_vehicles(owner_filter)
							for _, vehicle in vehicles:GetChildren() do
								local owner = vehicle:FindFirstChild('Owner');
								if (not owner) then continue; end;
								if (owner_filter and owner.Value ~= client) then continue; end;

								local vseat = vehicle:FindFirstChild('Seat');
								if (not vseat) then continue; end;

								local eik = true;
								for _, player in players:GetPlayers() do
									if (player == client) then continue; end;

									local character = player.Character;
									local humanoid = character and character:FindFirstChild('Humanoid');

									if (not humanoid or humanoid.SeatPart == vseat) then
										eik = false
									end;
								end;

								if (eik) then
									seat = vseat;
								end;
							end;

							if (not seat and not owner_filter) then
								return parse_vehicles(true);
							end;
						end;

						parse_vehicles();
						if (not seat) then return; end;

						if ((seat.Position - character:GetPivot().Position).Magnitude <= 250) then
							teleport(seat.Position, 'Slow');

							repeat
								fire_server(seat.Interact);
								fwait(0.35);
							until (character.Humanoid.SeatPart);
						else
							local done;
							fspawn(function()
								repeat
									character:PivotTo(cframe_new(seat.Position));
									fwait();
								until (done);
							end);

							repeat
								fire_server(seat.Interact);
								fwait(0.15);
							until (character.Humanoid.SeatPart);
							done = true;
						end;

						character.Humanoid:ChangeState('Jumping');
						fwait(0.15);
						character:PivotTo(cframe_new(goal));

						fwait(0.45);
						if ((goal - character:GetPivot().Position).Magnitude > 10) then
							teleport(goal, mode);
						end;
					elseif (mode == 'SECRET NIGGA BYPASS') then
						local distance = (goal - character:GetPivot().Position).Magnitude;
						if (distance <= 20) then
							return character:PivotTo(cframe_new(goal));
						end;

						local look_vector = character:GetPivot().LookVector;
						bypass_antitp();

						local last_tick = tick();
						repeat fwait(); until (unhooked or ((tick() - last_tick) >= 3) or (character:GetPivot().Position - vector3_new(2409, -523, 1723)).Magnitude <= 10);

						character:PivotTo(cframe_new(goal, goal + look_vector));
						fwait(0.45);
					elseif (mode == 'Slow') then
						tp_id += 1;
						local id = tp_id;
						local position;
						repeat
							position = character:GetPivot().Position;
							local next_position = cframe_new(position + (cframe_new(position, goal).LookVector * math_clamp(flags.client_tp_speed, 0, (position - goal).Magnitude)));
							character:PivotTo(cframe_new(next_position.x, goal.y, next_position.z));
							fwait(math_max(flags.client_tp_time / 1000, 0));
						until (tp_id ~= id or position and (goal - position).Magnitude <= 5);

						character:PivotTo(cframe_new(goal, goal + character:GetPivot().LookVector));
					elseif (mode == 'Persistent') then
						local timed = tick();
						repeat
							character:PivotTo(cframe_new(goal, goal + character:GetPivot().LookVector));
							fwait();
						until ((tick() - timed) >= (flags.client_tp_time / 1000));
					elseif (mode == 'Default') then
						character:PivotTo(cframe_new(goal, goal + character:GetPivot().LookVector));
					end;
				end;

				is_teleporting = false;
			end;
		end;

		local function antitp_trigger_check(...)
			if (typeof(...) == 'table') then
				local result = false;
				for _, trigger in (...) do
					if (antitp_trigger_check(trigger)) then
						return (true);
					end;
				end;

				return (false);
			else
				local distance = ((character:GetPivot().Position - (...)).Magnitude);

				if (distance > 100) then
					return (false);
				elseif (distance <= 10) then
					return (true);
				end;
			end;
		end;

		local function create_point()
			local point = draw('Part');

			point.Parent = workspace;
			point.Transparency = 1;
			point.Anchored = true;
			point.CanCollide = false;
			point.Color = color3_fromrgb(255, 255, 255);
			point.Material = Enum.Material.ForceField;
			point.Shape = Enum.PartType.Ball;
			point.Size = (vector3_one * 1.1);

			points[point] = true;
			return (point);
		end;

		local item_teleport_count = 0;
		local function wait_until_items_teleported()
			if (flags.item_tp_fix.bool) then
				repeat fwait(); until (item_teleport_count == 0 or unhooked or not flags.item_tp_fix.bool);
				fwait(0.5);
			end;
		end;

		local function bring(item, goal)
			if (not character) then return; end;

			local part = item:FindFirstChildWhichIsA('BasePart') or (function()
				for _, part in item:GetDescendants() do
					if (part:IsA('BasePart')) then
						return (part);
					end;
				end;
			end)();
			if (not part) then return; end;

			if (
				(character:GetPivot().Position - item:GetPivot().Position).Magnitude > 30

			) then return; end;

			wait_until_items_teleported();
			item_teleport_count += 1;

			local timed = tick();
			storage.Events.GrabHandler:InvokeServer(part, 'Grab', character:GetPivot().Position);
			--fwait((tick() - timed) * 1.5);

			if (item:GetAttribute('_Network') == client.Name) then
				if (flags.item_tp_fix_2.bool) then
					fspawn(function()
						client:RequestStreamAroundAsync(goal.Position);
					end);
				end;
				item:PivotTo(goal);

				local position = character:GetPivot().Position;
				if (flags.item_tp_fix.bool and (position - goal.Position).Magnitude >= 300) then
					teleport(goal.Position, 'Default');
					fwait(0.1);
					teleport(position, 'Default');
				end;
			else
				bring(item, goal);
			end;

			item_teleport_count -= 1;
		end;

		local function visual_add_selection(instance)
			local chams = draw('BoxHandleAdornment');

			chams.Parent = files;
			chams.Size = (function()
				if (instance:IsA('Model')) then
					local cframe, size = instance:GetBoundingBox();
					return size;
				elseif (instance:IsA('BasePart')) then
					return instance.Size;
				else
					return vector3_one;
				end;
			end)();
			chams.Adornee = instance;
			chams.ZIndex = 0;
			chams.AlwaysOnTop = true;
			chams.Color3 = window:get_colors()[1];

			return chams;
		end;

		local function cache(object, container)
			local all_good = true;

			for _, data in container do
				if (data.object == object) then
					all_good = false;
					break;
				end;
			end;

			if (not all_good) then return; end;
			
			local esp = draw('BillboardGui');
			local text = draw('TextLabel');

			esp.Parent = files;
			esp.Adornee = object;
			esp.AlwaysOnTop = true;
			esp.Enabled = false;
			esp.Size = udim2_new(0, 300, 0, 20);

			text.Parent = esp;
			text.Text = object.Name;
			text.TextScaled = true;
			text.Size = udim2_new(1, 0, 1, 0);
			text.Font = Enum.Font.Montserrat;
			text.TextColor3 = color3_fromrgb(255, 255, 255);
			text.BackgroundTransparency = 1;
			text.TextTransparency = 0;
			text.TextXAlignment = Enum.TextXAlignment.Center;

			local data = {
				esp = esp;
				text = text;
				object = object;
			};

			table_insert(container, data);
		end;

		local function take_best_tool(type)
			if (not character) then return end;

			for _, tool in character:GetChildren() do
				if (tool:IsA('Tool')) then
					tool.Parent = backpack;
				end;
			end;

			fwait(0.6);

			local tools = {};
			local best;

			for _, tool in backpack:GetChildren() do
				if (tool:IsA('Tool') and string_find(tool.Name, type)) then
					table_insert(tools, tool);
				end;
			end;

			for _, tool in tools do
				if (not best) then
					best = tool;
				elseif (tool.Configuration.Damage.Value > best.Configuration.Damage.Value) then
					best = tool;
				end;
			end;

			if (best) then
				best.Parent = character;
			end;
		end;

		local function mine(ore)
			fire_server(storage.Events.Tools.Charge, {
				Target = ore;
				HitPosition = ore:GetPivot().Position;
			});
		end;

		local function fish(goal)
			fire_server(storage.Events.Tools.Charge,
				goal and {
					HitPosition = cframe_new(goal);
				} or {}
			);
		end;

		local function chop(tree)
			fire_server(storage.Events.Tools.Charge, {
				Target = tree;
				HitPosition = vector3_new(tree.Position.X, tree.Position.Y - (tree.Size.Y / 2), tree.Position.Z);
			});
		end;

		local function attack(percent)
			fire_server(storage.Events.Tools.Attack, {
				Alpha = (percent / 100);
				ResponseTime = 0.7609703540802002;
			});
		end;

		local function get_closest_dust_puddle()
			for _, instance in workspace.MouseIgnore:GetChildren() do
				if (instance.Name == 'DustPuddle') then
					if ((character:GetPivot().Position - instance:GetPivot().Position).Magnitude <= 10) then
						return (instance);
					end;
				end;
			end;
		end;

		local item_tp_point = create_point();
		local ore_farm_point = create_point();
		local tree_farm_point = create_point();
		local autofish_point = create_point();
		local auto_bring_ore_point = create_point();
		local auto_bring_tree_point = create_point();
		local flower_farm_point = create_point();
		local auto_bring_flowers_point = create_point();
		local leaf_farm_point = create_point();
		local auto_bring_leaves_point = create_point();

		local lock_position;
		local search_reset;
		local unfreeze_items;

		local noclipped_parts = {};

		local last_click;
		local mouse_down;

		local vehicle_spawned;
		local fake_wires = {};

		local mod_notify = draw("TextLabel");

		mod_notify.Parent = files;
		mod_notify.Visible = false;
		mod_notify.Size = udim2_new(1, 0, 0.05, 0);
		mod_notify.Position = udim2_new(0, 0, 0.1, 0);
		mod_notify.Text = '';
		mod_notify.TextScaled = true;
		mod_notify.TextColor3 = color3_fromrgb(255, 50, 50);
		mod_notify.Font = Enum.Font.Montserrat;
		mod_notify.TextXAlignment = Enum.TextXAlignment.Center;
		mod_notify.BackgroundTransparency = 1;

		append_unhook(function()
			teleport_tool:Destroy();

			for point, _ in points do
				point:Destroy();
			end;

			for part, old_value in noclipped_parts do
				part.CanCollide = old_value;
			end;

			for index, wire in fake_wires do
				if (typeof(index) == 'number' and wire) then
					wire:Destroy();
				end;
			end;

			local preview = workspace:FindFirstChild('wireart preview');
			if (preview) then
				preview:Destroy();
			end;
		end);

		-- ☆ //   ui   // ☆ --

		do
			local tab = window:tab({name = 'Client'; icon = 'rbxassetid://131600725328350'; type = 'normal'});
			do
				local group = tab:group('Client');
				do
					local section = group:section({icon = 'rbxassetid://131600725328350'; text = 'Main'; divider = 1});
					do
						local group = section:group(1);
						do
							if (getrawmetatable) then
								group:toggle({flag = 'anti_drown'; text = 'Anti Drown'});
							end;
							group:toggle({flag = 'tp_tool'; text = 'Teleport Tool'});
							group:toggle({flag = 'noclip'; text = 'NoClip'});
							group:toggle({flag = 'inf_jump'; text = 'Infinite Jump'});
							group:toggle({flag = 'anti_blacklist'; text = 'Anti Blacklist'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'fly'; text = 'Fly'});
							group:slider({flag = 'fly_speed'; text = 'Fly Speed'; min = 0; max = 10; float = 1; default = 5; suffix = 'st'});
							group:toggle({flag = 'fly_bypass'; text = 'Fly Bypass'; default = true});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'speedhack'; text = 'Speed Hack'});
							group:slider({flag = 'speedhack_speed'; text = 'Speed'; min = 0; max = 200; float = 1; default = 16; suffix = 'st'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'jumphack'; text = 'Custom Jump Power'});
							group:slider({flag = 'jumphack_power'; text = 'Power'; min = 0; max = 500; float = 1; default = 50; suffix = 'st'});
						end;
					end;

					local section = group:section({icon = 'rbxassetid://79504833819397'; text = 'Teleports'; divider = (game.name == 'Refinery Caves 2' and 2 or 1)});
					do
						if (game.name == 'Refinery Caves 2') then
							local group = section:group(1);
							do
								group:dropdown({flag = 'client_tp_mode'; text = 'TP Mode'; default = 'SECRET NIGGA BYPASS'; options = {'Slow', 'Persistent', 'SECRET NIGGA BYPASS', 'Vehicle Bypass', 'Default'}});
								group:slider({flag = 'client_tp_time'; text = 'Time (Slow / Persistent)'; min = 0; max = 2000; float = 1; default = 0; suffix = 'ms'});
								group:slider({flag = 'client_tp_speed'; text = 'Speed (Slow)'; min = 0; max = 20; float = 1; default = 5; suffix = 'st'});
							end;
						end;

						local group = section:group(2);
						do
							group:dropdown({flag = 'client_location'; text = 'Location'; giant = true; default = 'Your Base'; options = (function()
								local list = {};
								for location, position in locations do
									table_insert(list, location);
								end;
								return list;
							end)()});
							group:button({text = 'TP To Location'; callback = function()
								if (flags.client_location == 'Your Base') then
									for _, plot in workspace.Plots:GetChildren() do
										if (plot.Owner.Value == client) then
											teleport(plot:GetPivot().Position);
										end;
									end;
								else
									teleport(locations[flags.client_location]);
								end;
							end});
						end;

						local group = section:group(2);
						do
							group:dropdown({flag = 'client_fishing_zone'; text = 'Fishing Zone'; giant = true; default = 'CrystalPond'; options = (function()
								local list = {};
								for zone, position in fishing_zones do
									table_insert(list, zone);
								end;
								return list;
							end)()});
							group:button({text = 'TP To Zone'; callback = function()
								teleport(fishing_zones[flags.client_fishing_zone]);
							end});
						end;

						local group = section:group(2);
						do
							group:dropdown({flag = 'client_npc'; text = 'NPC'; default = 'Maroon'; options = (function()
								local list = {};
								for name, npc in npcs do
									table_insert(list, name);
								end;
								return list;
							end)()});
							group:button({text = 'TP To NPC'; callback = function()
								teleport(npcs[flags.client_npc]:GetPivot().Position);
							end});
						end;

						local group = section:group(2);
						do
							local dropdown = group:dropdown({flag = 'client_player'; text = 'Player'; default = players:GetPlayers()[1].Name; options = {}});
							group:button({text = 'TP To Player'; callback = function()
								local player = players:FindFirstChild(flags.client_player);
								if (player) then
									teleport(player.Character:GetPivot().Position);
								end;
							end});
							group:button({text = 'TP To Player\'s Plot'; callback = function()
								local player = players:FindFirstChild(flags.client_player);
								if (player) then
									for _, plot in workspace.Plots:GetChildren() do
										if (plot.Owner.Value == player) then
											teleport(plot:GetPivot().Position);
										end;
									end; 
								end;
							end});

							fspawn(function()
								repeat
									local list = {};
									for _, player in players:GetChildren() do
										table_insert(list, player.Name);
									end;

									dropdown:set_options(list);
									fwait(1);
								until (unhooked);
							end);
						end;
					end;
				end;
			end;

			local tab = window:tab({name = 'Visuals'; icon = 'rbxassetid://82267943262741'; type = 'normal'});
			do
				local group = tab:group('Visuals');
				do
					local section = group:section({icon = 'rbxassetid://106471507815859'; text = 'World'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'full_bright'; text = 'Full Bright'});
							group:toggle({flag = 'free_clock'; text = 'Free Clock'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'set_time'; text = 'Set Time'});
							group:slider({flag = 'time'; text = 'Time'; min = 0; max = 24; float = 10; default = 10; suffix = 'h'});
							group:toggle({flag = 'fog'; text = 'Fog'; callback = function(bool)
								workspace.ServerData.WeatherState.Foggy.Value = (bool and 1 or 0);
							end});
							group:toggle({flag = 'rain'; text = 'Rain'; callback = function(bool)
								workspace.ServerData.WeatherState.Value = (bool and 1 or 0);
								workspace.ServerData.WeatherState.Raining.Value = (bool and 1 or 0);
							end});
						end;

						local group = section:group(1);
						do
							local dropdown = group:dropdown({flag = 'player_to_spectate'; text = 'Player'; default = players:GetPlayers()[1].Name; options = {}});
							group:toggle({flag = 'spectate_player'; text = 'Spectate Player'});

							fspawn(function()
								repeat
									local list = {};
									for _, player in players:GetChildren() do
										table_insert(list, player.Name);
									end;

									dropdown:set_options(list);
									fwait(1);
								until (unhooked);
							end);
						end;
					end;

					local section = group:section({icon = 'rbxassetid://78713721820689'; text = 'ESP'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'ores_esp_enabled'; text = 'Ores ESP'});
							group:dropdown({flag = 'ores_esp_selected'; text = 'Ores'; giant = true; default = {'Stone'}; options = (function()
								local list = {};
								for _, ore in all_ores do
									table_insert(list, ore);
								end;
								return (list);
							end)()});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'trees_esp_enabled'; text = 'Trees ESP'});
							group:dropdown({flag = 'trees_esp_selected'; text = 'Trees'; giant = true; default = {'Oak'}; options = (function()
								local list = {};
								for _, tree in all_trees do
									table_insert(list, tree);
								end;
								return list;
							end)()});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'players_esp'; text = 'Players ESP'});
						end;
					end;
				end;
			end;

			local tab = window:tab({name = 'Vehicle'; icon = 'rbxassetid://116721917231042'; type = 'normal'});
			do
				local group = tab:group('Vehicle');
				do
					local section = group:section({icon = 'rbxassetid://98779092184994'; text = 'Searcher'; divider = 2});
					do
						local group = section:group(1);
						do
							local toggle; toggle = group:toggle({flag = 'vehicle_searcher_enabled'; text = 'Start Vehicle Searcher'; callback = function(bool)
								if (bool) then
									repeat
										vehicle_spawned = false;
										for _, selection in selected_spawners do
											fire_server(selection.Adornee.Button.Interact);
										end;
										fwait(1.25);
									until (not flags.vehicle_searcher_enabled.bool or vehicle_spawned);

									toggle:set_enabled(false);
								end;
							end});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'vehicle_searcher_select'; text = 'Select Spawners'});
							group:button({text = 'Deselect Spawners'; callback = function()
								for index, selection in selected_items do
									selection:Destroy();
									selected_items[index] = nil;
								end;
							end});
						end;

						local group = section:group(2);
						do
							group:toggle({flag = 'vehicle_searcher_color_enabled'; text = 'Color Filter'});
							group:dropdown({flag = 'vehicle_searcher_color'; text = 'Needed Colors'; giant = true; default = {}; options = (
								(game.name == 'Refinery Caves 2') and {
									'Burlap';
									'Copper';
									'Dark Taupe';
									'Grime';
									'Sand Blue';
									'Bright Yellowish Green';
									'Lavender';
									'Mint';
									'Mulberry';
									'Navy Blue';
									'Salmon';
									'Slime Green';
									'Storm Blue';
									'Bright Red';
									'Institutional White';
									'Lime Green';
									'New Yeller';
									'Really Blue';
									'Black';
									'Cyan';
									'Hot Pink';
									'Royal Purple';
									'Bright Yellowish Orange';
								}

								or (game.name == 'Oaklands') and {}

								or {}
							)});
							group:toggle({flag = 'vehicle_searcher_skin_enabled'; text = 'Skin Filter'; default = true});
							group:dropdown({flag = 'vehicle_searcher_skin'; text = 'Needed Skins'; giant = true; default = {}; options = (function()
								local list = {};

								if (game.name == 'Refinery Caves 2') then
									for _, skin in storage.Content.VehicleSkins:GetChildren() do
										if (skin.Name ~= '_Common' and skin.Name ~= '_Example') then
											table_insert(list, skin.Name);
										end;
									end;
								elseif (game.name == 'Oaklands') then
								end;

								return (list);
							end)()});
							group:toggle({flag = 'vehicle_searcher_or'; text = 'Stop if vehicle matches color OR skin'; default = true});
						end;
					end;

					local section = group:section({icon = 'rbxassetid://104795979648609'; text = 'Mods'; divider = 1});
					do
						local group = section:group(1);
						do
							local modified_vehicles = {};
							group:button({text = 'Update Vehicle Settings'; callback = function()
								if (not character) then return; end;
			
								local seat = humanoid.SeatPart;
								if (seat and seat:IsDescendantOf(vehicles) and seat.Name == 'VehicleSeat') then
									local vehicle = seat:FindFirstAncestorWhichIsA('Model');
			
									if (vehicle) then
										local configuration = vehicle.Configuration;
			
										if (not modified_vehicles[vehicle]) then
											modified_vehicles[vehicle] = {
												(configuration:FindFirstChild('Damping') and configuration.Damping.Value or 0);
												(configuration:FindFirstChild('FlipHeight') and configuration.FlipHeight.Value or 0);
												(configuration:FindFirstChild('HeadlightRange') and configuration.HeadlightRange.Value or 0);
												(configuration:FindFirstChild('LowerLimit') and configuration.LowerLimit.Value or 0);
												(configuration:FindFirstChild('MaxSpeed') and configuration.MaxSpeed.Value or 0);
												(configuration:FindFirstChild('MaxTorque') and configuration.MaxTorque.Value or 0);
												(configuration:FindFirstChild('Speed') and configuration.Speed.Value or 0);
												(configuration:FindFirstChild('SteerAngle') and configuration.SteerAngle.Value or 0);
												(configuration:FindFirstChild('Stiffness') and configuration.Stiffness.Value or 0);
												(configuration:FindFirstChild('UpperLimit') and configuration.UpperLimit.Value or 0);
											};
										end;
			
										local found = configuration:FindFirstChild('Damping');        if (found) then configuration.Damping.Value = flags.damping;               end;
										local found = configuration:FindFirstChild('FlipHeight');     if (found) then configuration.FlipHeight.Value = flags.flipheight;         end;
										local found = configuration:FindFirstChild('HeadlightRange'); if (found) then configuration.HeadlightRange.Value = flags.headlightrange; end;
										local found = configuration:FindFirstChild('LowerLimit');     if (found) then configuration.LowerLimit.Value = flags.lowerlimit;         end;
										local found = configuration:FindFirstChild('MaxSpeed');       if (found) then configuration.MaxSpeed.Value = flags.maxspeed;             end;
										local found = configuration:FindFirstChild('MaxTorque');      if (found) then configuration.MaxTorque.Value = flags.maxtorque;           end;
										local found = configuration:FindFirstChild('Speed');          if (found) then configuration.Speed.Value = flags.speed;                   end;
										local found = configuration:FindFirstChild('SteerAngle');     if (found) then configuration.SteerAngle.Value = flags.steerangle;         end;
										local found = configuration:FindFirstChild('Stiffness');      if (found) then configuration.Stiffness.Value = flags.stiffness;           end;
										local found = configuration:FindFirstChild('UpperLimit');     if (found) then configuration.UpperLimit.Value = flags.upperlimit;         end;
			
										character.Humanoid:ChangeState('Jumping');
										repeat fwait(); until (not seat.Interact:GetAttribute("Disabled"));

										fire_server(seat.Interact);
									end;
								end;
							end});
							group:button({text = 'Reset Vehicle Settings'; callback = function()
								for vehicle, data in modified_vehicles do
									local configuration = vehicle.Configuration;
			
									local found = configuration:FindFirstChild('Damping');        if (found) then configuration.Damping.Value = data[1];        end;
									local found = configuration:FindFirstChild('FlipHeight');     if (found) then configuration.FlipHeight.Value = data[2];     end;
									local found = configuration:FindFirstChild('HeadlightRange'); if (found) then configuration.HeadlightRange.Value = data[3]; end;
									local found = configuration:FindFirstChild('LowerLimit');     if (found) then configuration.LowerLimit.Value = data[4];     end;
									local found = configuration:FindFirstChild('MaxSpeed');       if (found) then configuration.MaxSpeed.Value = data[5];       end;
									local found = configuration:FindFirstChild('MaxTorque');      if (found) then configuration.MaxTorque.Value = data[6];      end;
									local found = configuration:FindFirstChild('Speed');          if (found) then configuration.Speed.Value = data[7];          end;
									local found = configuration:FindFirstChild('SteerAngle');     if (found) then configuration.SteerAngle.Value = data[8];     end;
									local found = configuration:FindFirstChild('Stiffness');      if (found) then configuration.Stiffness.Value = data[9];      end;
									local found = configuration:FindFirstChild('UpperLimit');     if (found) then configuration.UpperLimit.Value = data[10];    end;
								end;
			
								if (character) then
									local seat = character.Humanoid.SeatPart;
			
									if (seat and seat:IsDescendantOf(vehicles) and seat.Name == 'VehicleSeat') then
										character.Humanoid:ChangeState('Jumping');
										repeat fwait(); until (seat.Interact:GetAttribute('Disabled'));

										fire_server(seat.Interact);
									end;
								end;
							end});
							group:slider({flag = 'damping'; text = 'Damping'; min = 0; max = 1000; float = 1; default = 400; suffix = ''});
							group:slider({flag = 'flipheight'; text = 'Flip Height'; min = 0; max = 10; float = 10; default = 5; suffix = ''});
							group:slider({flag = 'headlightrange'; text = 'HeadLight Range'; min = 0; max = 100; float = 1; default = 45; suffix = ''});
							group:slider({flag = 'maxtorque'; text = 'Max Torque'; min = 0; max = 100000; float = 1; default = 75000; suffix = ''});
							group:slider({flag = 'speed'; text = 'Speed'; min = 0; max = 500; float = 1; default = 50; suffix = ''});
							group:slider({flag = 'maxspeed'; text = 'Max Speed'; min = 0; max = 5000; float = 1; default = 2000; suffix = ''});
							group:slider({flag = 'steerangle'; text = 'Steer Angle'; min = 0; max = 360; float = 1; default = 35; suffix = ''});
							group:slider({flag = 'stiffness'; text = 'Stiffness'; min = 0; max = 25000; float = 1; default = 17000; suffix = ''});
							group:slider({flag = 'lowerlimit'; text = 'Lower Limit'; min = 0; max = 1; float = 100; default = 0.15; suffix = ''});
							group:slider({flag = 'upperlimit'; text = 'Upper Limit'; min = 0; max = 10; float = 100; default = 0.5; suffix = ''});
						end;
					end;
				end;
			end;

			local tab = window:tab({name = 'Items'; icon = 'rbxassetid://78520709437184'; type = 'normal'});
			do
				local group = tab:group('Items');
				do
					local section = group:section({icon = 'rbxassetid://79504833819397'; text = 'Teleporting'; divider = 2});
					do
						local unfreeze_items;
						local group = section:group(1);
						do
							group:toggle({flag = 'item_owner_filter'; text = 'Owner Filter'});
							group:button({text = 'Deselect Items'; callback = function()
								for index, selection in selected_items do
									selection:Destroy();
									selected_items[index] = nil;
								end;
							end});
							group:toggle({flag = 'item_deselect'; text = 'Deselect After TP'});
							group:toggle({flag = 'item_point'; text = 'Point'; callback = function(bool)
								if (bool) then
									repeat fwait() until (character);
			
									item_tp_point:PivotTo(character:GetPivot());
									item_tp_point.Transparency = 0;
								else
									item_tp_point.Transparency = 1;
								end;
							end});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'item_select'; text = 'Select Items'});
							group:toggle({flag = 'item_select_filter'; text = 'Filter'});
							group:dropdown({flag = 'item_select_filter_items'; text = 'Items for filter'; giant = true; default = {}; options = (function()
								local list = {};
								for _, item in storage.Content.Items:GetChildren() do
									table_insert(list, item.Name);
								end;
								return list;
							end)()});
						end;

						local group = section:group(2);
						do
							group:button({text = 'TP Closest Item'; callback = function()
								if (not character) then return; end;

								local closest, mag;
								for _, item in grabable:GetChildren() do
									if (item.ClassName == 'Model') then
										local ownership = item:FindFirstChild('Owner');

										if (ownership and (not flags.item_owner_filter.bool or (not ownership.Value or ownership.Value == client))) then
											local new_mag = (character:GetPivot().Position - item:GetPivot().Position).Magnitude;

											if (closest) then
												if (new_mag < mag) then
													closest = item;
													mag = new_mag;
												end;
											else
												closest = item;
												mag = new_mag;
											end;
										end;
									end;
								end;

								if (closest and item_tp_point.Transparency ~= 0) then
									bring(closest, item_tp_point.CFrame);
								end;
							end});
							group:button({text = 'TP Selected Items'; callback = function()
								if (not character) then return; end;
								local old_position = character:GetPivot().Position;

								if (flags.item_tp_fix_2.bool) then
									fspawn(function()
										client:RequestStreamAroundAsync(item_tp_point.Position);
									end);
								end;

								local teleported = {};
								for _, esp in selected_items do
									local item = esp.Adornee;
									if (teleported[item]) then continue; end;

									teleport(item:GetPivot().Position);
									fwait(ping);
									
									if (ping >= 1) then
										repeat
											teleport(item:GetPivot().Position);
											fwait(ping * 3);
										until ((character:GetPivot().Position - item:GetPivot().Position).Magnitude <= 20)
									end;

									for _, esp in selected_items do
										local item = esp.Adornee;
										if (
											teleported[item]
											or item_tp_point.Transparency == 1
											or (character:GetPivot().Position - item:GetPivot().Position).Magnitude > 30
										) then continue; end;

										fspawn(bring, item, item_tp_point.CFrame);

										teleported[item] = true;

										if (flags.item_deselect.bool) then
											selected_items[_] = nil;
											esp:Destroy();
										end
									end;

									bring(item, item_tp_point.CFrame);
									fwait(ping);
								end;

								teleport(old_position);
							end});
						end;

						local group = section:group(2);
						do
							local sorting;
							group:button({text = 'Sort Selected Items'; callback = function()
								if (not character) then return; end;
								local old_position = character:GetPivot().Position;

								sorting = true;

								local max_size = vector3_new(0, 0, 0);
                            
								local x_count = 0;
								local y_count = 0;
								local z_count = 0;
								
								for _, selection in selected_items do
									local item = selection.Adornee;
									local clone = item:Clone();

									for _, part in clone:GetDescendants() do
										if (part:IsA('Part') and not part.CanCollide) then
											part:Destroy();
										end;
									end;

									local size = clone:GetExtentsSize();
									
									if (size.X > max_size.X) then
										max_size = vector3_new(size.X, max_size.Y, max_size.Z);
									elseif (size.Y > max_size.Y) then
										max_size = vector3_new(max_size.X, size.Y, max_size.Z);
									elseif (size.Z > max_size.Z) then
										max_size = vector3_new(max_size.X, max_size.Y, size.Z);
									end;
									
									if (y_count == 0) then
										y_count = 1;
									end;
									
									x_count += 1;
									
									if (x_count >= flags.item_sorter_max_x) then
										x_count = 0;
										z_count += 1;

										if (z_count >= flags.item_sorter_max_z) then
											z_count = 0;
											y_count += 1;
										end;
									end;
								end;
								
								local box = draw('Part');
								
								box.Parent = workspace;
								box.Size = vector3_new(max_size.X * flags.item_sorter_max_x, max_size.Y * y_count, max_size.Z * flags.item_sorter_max_z);
								box.Anchored = true;
								box.CanCollide = false;
								box.CanQuery = false;
								box.Material = Enum.Material.ForceField;
										
								local x_count = -1;
								local y_count = 0;
								local z_count = 0;
								
								local position = vector3_new(-max_size.X, 0, 0);
								
								run.Heartbeat:Wait();
								local hook; hook = run.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function()
									if (mouse.Target) then
										local color = window:get_colors()[1];

										box:PivotTo(cframe_new(mouse.Hit.Position.X, mouse.Hit.Position.Y + (box.Size.Y / 2) + 0.001, mouse.Hit.Position.Z));
										box.Rotation = vector3_new(0, flags.item_sorter_box_rotation, 0);
										box.Color = color;

										if (mouse_click and not window:is_visible()) then
											hook:Disconnect();
											
											local count = 0;
											
											local x_count = -1;
											local y_count = 0;
											local z_count = 0;
											
											local position = vector3_new(-max_size.X, 0, 0);
											
											for _, selection in selected_items do
												local item = selection.Adornee;
												
												count += 1

												if (y_count == 0) then
													y_count = 1;
												end;

												x_count += 1;
												position += vector3_new(max_size.X, 0, 0);
												
												if (x_count >= flags.item_sorter_max_x) then
													x_count = 0;
													z_count += 1;
													
													position += vector3_new(-position.X, 0, max_size.Z);

													if (z_count >= flags.item_sorter_max_z) then
														z_count = 0;
														y_count += 1;
														
														position += vector3_new(0, max_size.Y, -position.Z);
													end;
												end;

												local goal = box.CFrame * cframe_new(
													-(box.Size.X / 2) + (max_size.X / 2) + position.X, 
													-(box.Size.Y / 2) + (max_size.Y / 2) + position.Y, 
													-(box.Size.Z / 2) + (max_size.Z / 2) + position.Z
												);

												local position = item:GetPivot().Position + vector3_new(0, 10, 0);
												teleport(position);
												local done;
												fspawn(function()
													repeat
														teleport(position);
														fwait();
													until (done);
												end);

												fwait(0.35);
												bring(item, goal);
												done = true;

												if (flags.item_deselect.bool) then
													selected_items[_] = nil;
													selection:Destroy();
												end;
											end;

											fwait(0.35);
											teleport(old_position);
											
											sorting = false;
											selected_items = {};
											box:Destroy();
										end;
									end;
								end));

								table_insert(connections, hook);
							end});
							group:slider({flag = 'item_sorter_box_rotation'; text = 'Box Rotation'; min = 0; max = 360; float = 1; default = 90; suffix = '°'});
							group:slider({flag = 'item_sorter_max_x'; text = 'Max X'; min = 0; max = 25; float = 1; default = 3; suffix = 'st'});
							--group:slider({flag = 'item_sorter_max_y'; text = 'Max Y'; min = 0; max = 25; float = 1; default = 3; suffix = 'st'});
							group:slider({flag = 'item_sorter_max_z'; text = 'Max Z'; min = 0; max = 25; float = 1; default = 3; suffix = 'st'});
						end;
					end;

					local section = group:section({icon = 'rbxassetid://133256709118439'; text = 'Auto-Buy'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'autobuy'; text = 'Auto-Buy'; callback = function(bool)
								if (bool) then
									repeat fwait(); until (character);
			
									local old_position = character:GetPivot();
									repeat
										repeat fwait(); until (character);
			
										local hitboxes = {};
										for _, product in flags.autobuy_products do
											local hitbox = shop_products[product].Parent.Hitbox;

											if (not table_find(hitboxes, hitbox)) then
												table_insert(hitboxes, hitbox);
											end;
										end;
			
										local teleported = {};
										for _, hitbox in hitboxes do
											if (not table_find(teleported, hitbox)) then
												table_insert(teleported, hitbox);
			
												teleport(hitbox.Position);
												fwait(0.35);
											end;
										end;
			
										fwait(0.25);
			
										local talk_parts = {};
										local to_buy = {};
			
										for _, product in grabable:GetChildren() do
											if (
												flags.autobuy.bool
												and product:IsA('Model')
												and product:GetAttribute('_StoreTag')
												and table_find(flags.autobuy_products, product.Name)
										 	) then
												local all_good = true;
			
												if (not flags.autobuy_massbuy.bool) then
													for _, item in to_buy do
														if (item.Name == product.Name) then
															all_good = false;
														end;
													end;
												end;
			
												if (all_good) then
													table_insert(to_buy, product);
			
													if (not table_find(talk_parts, shop_products[product.Name])) then
														table_insert(talk_parts, shop_products[product.Name]);
													end;
												end;
											end;
										end;
			
										if (not flags.autobuy.bool) then continue; end;

										local teleported = {};
										for _, product in to_buy do
											if (product and not table_find(teleported, product)) then
												teleport(product:GetPivot().Position);
		
												fwait(0.35);
												for _, product in to_buy do
													if (
														product
														and (not table_find(teleported, product))
														and (product:GetPivot().Position - character:GetPivot().Position).Magnitude <= 20
													) then
														table_insert(teleported, product);
		
														fspawn(bring, product, shop_products[product.Name].Parent.Hitbox.CFrame);
													end;
												end;
		
												fwait(0.35);
											end;
										end;

										if (#teleported == 0) then
											local direction;
											local random = math_random(1, 4);
											if (random == 1) then
												direction = vector3_new(30, 0, 0);
											elseif (random == 2) then
												direction = vector3_new(-30, 0, 0);
											elseif (random == 3) then
												direction = vector3_new(0, 0, 30);
											else
												direction = vector3_new(0, 0, -30);
											end;

											teleport(character:GetPivot().Position + direction);
										end;
			
										if (not flags.autobuy.bool) then continue; end;

										for _, talk_part in talk_parts do
											teleport(talk_part.Position);
		
											fwait(0.4);
		
											fire_server(talk_part.Interact);
											fire_server(talk_part.Interact, 'Yes', 1);
		
											fwait(0.2);
										end;

										if (not flags.autobuy.bool) then continue; end;
			
										local teleported = {};
										for _, product in to_buy do
											if (product and not table_find(teleported, product)) then
												teleport(product:GetPivot().Position);
		
												fwait(0.35);
												for _, product in to_buy do
													if product and not table_find(teleported, product) and (product:GetPivot().Position - character:GetPivot().Position).Magnitude <= 20 then
														table.insert(teleported, product)
		
														fspawn(bring, product, old_position);
													end;
												end;
		
												fwait(0.35);
											end;
										end;
			
										fwait(0.25);
									until (not flags.autobuy.bool);
									
									teleport(old_position);
								end;
							end});
							
							group:dropdown({flag = 'autobuy_products'; text = 'Products'; giant = true; default = {}; options = (function()
								local list = {};
								for product, talk_part in shop_products do
									table_insert(list, product);
								end;
								return list;
							end)()});
							
							group:toggle({flag = 'autobuy_massbuy'; text = 'Mass Buy'});
						end;
					end;
				end;
			end;

			local tab = window:tab({name = 'Auto-Farm'; icon = 'rbxassetid://131225059843398'; type = 'normal'});
			do
				local group = tab:group('Auto-Farm');
				do
					local section = group:section({icon = 'rbxassetid://83822347118679'; text = 'Globals'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'autofarm_best_tool'; text = 'Take Best Tool'; default = true});
							group:slider({flag = 'autofarm_item_tp_wait'; text = 'Item TP Wait Time'; min = 0; max = 5; float = 100; default = 1; suffix = 's'});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'autofarm_search'; text = 'Search'});
							group:toggle({flag = 'autofarm_custom_search'; text = 'Custom Search Position'});
							group:slider({flag = 'autofarm_search_wait'; text = 'Wait Time'; min = 0; max = 5; float = 100; default = 1; suffix = 's'});
							group:toggle({flag = 'autofarm_search_spin'; text = 'Spin While Searching'});
							group:slider({flag = 'autofarm_search_spin_offset'; text = 'Spin Offset'; min = 1; max = 100; float = 1; default = 50; suffix = 'st'});
							group:slider({flag = 'autofarm_search_spin_degree'; text = 'Spin Degree'; min = 1; max = 360; float = 1; default = 20; suffix = '°'});
						end;
					end;

					local section = group:section({icon = 'rbxassetid://89109956682117'; text = 'Ores'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'autofarm_ores'; text = 'Auto-Farm Selected Ores'});
							group:dropdown({flag = 'autofarm_ores_selected'; text = 'Ores'; giant = true; default = {}; options = (function()
								local list = {};
								for _, ore in all_ores do
									table_insert(list, ore);
								end;
								return (list);
							end)()});
							group:toggle({flag = 'autofarm_ores_point'; text = 'Ores Auto-Farm Point'; callback = function(bool)
								if (bool) then
									repeat fwait(); until (character);
			
									ore_farm_point:PivotTo(character:GetPivot());
									ore_farm_point.Transparency = 0;
								else
									ore_farm_point.Transparency = 1;
								end;
							end});
						end;
					end;

					local section = group:section({icon = 'rbxassetid://134281943024682'; text = 'Trees'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'autofarm_trees'; text = 'Auto-Farm Selected Trees'});
							group:dropdown({flag = 'autofarm_trees_selected'; text = 'Trees'; giant = true; default = {}; options = (function()
								local list = {};
								for _, tree in all_trees do
									table_insert(list, tree);
								end;
								return (list);
							end)()});
							group:toggle({flag = 'autofarm_trees_point'; text = 'Trees Auto-Farm Point'; callback = function(bool)
								if (bool) then
									repeat fwait(); until (character);
			
									tree_farm_point:PivotTo(character:GetPivot());
									tree_farm_point.Transparency = 0;
								else
									tree_farm_point.Transparency = 1;
								end;
							end});
						end;
					end;

					local section = group:section({icon = 'rbxassetid://127971602711950'; text = 'Fish'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'autofish'; text = 'Auto-Fish'});
							group:dropdown({flag = 'autofish_zone'; text = 'Auto-Fish Zone'; default = 'Current Position'; options = {'Current Position'; 'CrystalPond'; 'LushCave'; 'Quarry'; 'Sarcophagus'; 'SmallCorals'; 'BigCorals'; 'Swamp'; 'VeilLake'; 'DustPuddle'; 'Jungle'; 'Scorching Valley'}});
							group:dropdown({flag = 'autofish_filter'; text = 'Auto-Fish Filter'; giant = true; default = {}; options = all_fish});
							group:dropdown({flag = 'autofish_filter_mode'; text = 'Auto-Fish Filter Mode'; default = 'Blacklist'; options = {'Blacklist'; 'Whitelist'}});
							group:toggle({flag = 'autofish_point'; text = 'Auto-Fish Point'; callback = function(bool)
								if (bool) then
									repeat fwait(); until (character);
			
									autofish_point:PivotTo(character:GetPivot());
									autofish_point.Transparency = 0;
								else
									autofish_point.Transparency = 1;
								end;
							end});
						end;
					end;

					local section = group:section({icon = 'rbxassetid://96864085009980'; text = 'Other'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'autofarm_flowers'; text = 'Auto-Farm Flowers'});
							group:toggle({flag = 'autofarm_flowers_point'; text = 'Flowers Auto-Farm Point'; callback = function(bool)
								if (bool) then
									repeat fwait(); until (character);
			
									flower_farm_point:PivotTo(character:GetPivot());
									flower_farm_point.Transparency = 0;
								else
									flower_farm_point.Transparency = 1;
								end;
							end});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'autofarm_leaves'; text = 'Auto-Farm Leaves'});
							group:dropdown({flag = 'autofarm_leaves_selected'; text = 'Trees'; giant = true; default = {}; options = (function()
								local list = {};
								for _, tree in all_trees do
									table_insert(list, tree);
								end;
								return (list);
							end)()});
							group:toggle({flag = 'autofarm_leaves_point'; text = 'Leaves Auto-Farm Point'; callback = function(bool)
								if (bool) then
									repeat fwait(); until (character);
			
									leaf_farm_point:PivotTo(character:GetPivot());
									leaf_farm_point.Transparency = 0;
								else
									leaf_farm_point.Transparency = 1;
								end;
							end});
						end;
					end;
				end;
			end;

			local tab = window:tab({name = 'Plot'; icon = 'rbxassetid://80440786113969'; type = 'normal'});
			do
				local group = tab:group('Plot');
				do
					local section = group:section({icon = 'rbxassetid://138078316991263'; text = 'Wire Art'; divider = 2});
					do
						local group = section:group(1);
						do
							local dropdown = group:dropdown({flag = 'wireart_selected'; text = 'Selected art'; default = ''; options = {}});

							local function refresh()
								local arts = {};
								local path = ('eternal/games/' .. game.name .. '/wire arts');
								for _, art in listfiles(path) do
									table_insert(arts, string_sub(art, #path + 2, #art));
								end
								dropdown:set_options(arts);
							end; refresh();

							group:button({text = 'Refresh art list'; callback = function()
								refresh();
							end});

							group:button({text = 'Load art'; callback = function()
								local preview = workspace:FindFirstChild('wireart preview');
								if (preview) then
									preview:Destroy();
								end;

								local path = ('eternal/games/' .. game.name .. '/wire arts/' .. flags.wireart_selected);
								if (not isfile(path)) then
									return;
								end;

								preview = draw('Model');
								preview.Parent = workspace;
								preview.Name = 'wireart preview';

								local wire_data = http:JSONDecode(readfile(path));
								for _, wire in wire_data do
									local wire_model = draw('Model');
									wire_model.Parent = preview;

									for i = 1, #wire do
										for _, point in wire do
											if (point[2] ~= i) then continue; end;

											wire_model.Name = point[1];

											local point_part = draw('Part');
											local point_position = vector3_new(point[3], point[4], point[5]);
											local color = color3_fromrgb(point[6], point[7], point[8]);

											point_part.Name = ('point' .. i);
											point_part.Anchored = true;
											point_part.CanCollide = false;
											point_part.Shape = Enum.PartType.Ball;
											point_part.Color = color;
											point_part.Size = vector3_new(0.3, 0.3, 0.3);
											point_part.Position = point_position;
											point_part.Parent = wire_model;

											if (wire_model.Name == 'Neon Wire') then
												point_part.Material = Enum.Material.Neon;
											end;

											for _, point2 in wire do
												if (point2[2] ~= (i + 1)) then continue; end;

												local connector = draw('Part');
												local point2_position = vector3_new(point2[3], point2[4], point2[5]);

												connector.Name = 'connector';
												connector.Anchored = true;
												connector.CanCollide = false;
												connector.Shape = Enum.PartType.Cylinder;
												connector.Color = color;
												connector.Size = vector3_new((point_position - point2_position).Magnitude, 0.2, 0.2);
												connector.CFrame = cframe_new(point_position, point2_position) * cframe_new(0, 0, -(connector.Size.X / 2)) * cframe_angles(0, math_rad(90), 0);
												connector.Parent = wire_model;

												if (wire_model.Name == 'Neon Wire') then
													connector.Material = Enum.Material.Neon;
												end;
											end;
										end;
									end;
								end;

								preview:PivotTo(cframe_new(character:GetPivot().Position + vector3_new(0, flags.wireart_y_offset, 0)) * cframe_angles(math_rad(flags.wireart_rotation_x), math_rad(flags.wireart_rotation_y), math_rad(flags.wireart_rotation_z)));
								preview:ScaleTo(flags.wireart_scale);

								for _, part in preview:GetDescendants() do
									if (not part:IsA('BasePart')) then continue; end;

									part.Size = (
										(part.Name == 'connector') and vector3_new(part.Size.X, 0.2, 0.2)
										or vector3_new(0.3, 0.3, 0.3)
									);
								end;
							end});
						end;

						local group = section:group(1);
						do
							group:textbox({flag = 'wireart_name'; text = 'Art name'; default = '1'});
							group:button({text = 'Save art'; callback = function()
								if (#fake_wires > 0) then
									local data = {};
									for index, wire in fake_wires do
										if (typeof(index) ~= 'number') then continue; end;

										local points = {};
										for i = 1, #wire:GetChildren() do
											local part = wire:FindFirstChild('P' .. i);
											if (part) then
												local position = part.Position;
												local color = part.Color;

												local r = math_round(color.R * 255);
												local g = math_round(color.G * 255);
												local b = math_round(color.B * 255);

												table_insert(points, {
													string_sub(wire.Name, 6), i;
													position.x, position.y, position.z;
													r, g, b;
												});
											end;
										end;

										table_insert(data, points);
									end;

									local path = ('eternal/games/' .. game.name .. '/wire arts/' .. flags.wireart_name);
									writefile(path, http:JSONEncode(data));

									repeat fwait(); until (isfile(path));

									refresh();
								end;
							end});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'wireart_draw'; text = 'Draw art'; default = false; callback = function(bool)
								if (bool) then
									local has_wire_drum;
									for _, wire_drum in grabable:GetChildren() do
										local owner = wire_drum:FindFirstChild('Owner')

										if (wire_drum.Name == 'Wire Drum' and owner and owner.Value == client) then
											has_wire_drum = true;
										end;
									end;

									local can_continue;
									if (not has_wire_drum) then
										local plot;
										for _, model in workspace.Plots:GetChildren() do
											if (model.Owner.Value == client) then
												plot = model;
												local hook; hook = plot.Wiring.ChildAdded:Connect(function(wire)
													hook:Disconnect();
													fire_server(storage.Events.Placement.Delete, {wire});

													can_continue = true;
												end);

												table_insert(connections, hook);
											end;
										end;
										
										if (plot) then
											local wire_drum = grabable:FindFirstChild('Wire Drum');
											if (not wire_drum) then
												return window:notify('you dont have a wire drum', 5);
											end;

											local wire_name = ((flags.wireart_wire == 'Default Wire') and 'Wire' or flags.wireart_wire);
											storage.Events.Placement.PlaceWire:InvokeServer({
												Points = {
													{Position = (plot.Plot.Position + vector3_new(0, 2, 0))};
													{Position = (plot.Plot.Position + vector3_new(0, 5, 0))};
												};
												Name = wire_name;
												UnboxData = {
													Name = wire_name;
													Box = wire_drum;
												};
											});
										end;
									else
										can_continue = true;
									end;

									repeat fwait(); until (can_continue);

									window:notify('now you placing a fake wire', 5);

									repeat
										local usergui = client.PlayerGui:FindFirstChild('UserGui');
										local buttons = (usergui and usergui:FindFirstChild('PlacementButtons'));

										if (buttons and not buttons.Visible) then
											for _, wire_drum in grabable:GetChildren() do
												local owner = wire_drum:FindFirstChild('Owner')

												if (wire_drum.Name == 'Wire Drum' and owner and owner.Value == client) then
													local hitbox = wire_drum:FindFirstChild('Hitbox');
													local interact = (hitbox and hitbox:FindFirstChild('Interact'));
													
													if (interact and not buttons.Visible) then
														fire_server(interact);
													end;
												end;
											end;
										end;

										fwait();
									until (not flags.wireart_draw.bool);
								end;
							end});

							group:dropdown({flag = 'wireart_wire'; text = 'Wire for drawing'; default = 'Default Wire'; options = {'Default Wire'; 'Neon Wire'}});
							group:toggle({flag = 'wireart_levers'; text = 'Activate neon wires via levers'});

							group:button({text = 'Clear drawings'; callback = function()
								fake_wires = {};

								for _, wire in workspace.Plots:GetDescendants() do
									if (wire.Name == 'Fake Wire' or wire.Name == 'Fake Neon Wire') then
										wire:Destroy();
									end;
								end;
							end});
						end;

						local group = section:group(2);
						do
							local opened_boxes = {};
							group:toggle({flag = 'wireart_build'; text = 'Build selected art'; default = false; callback = function(bool)
								if (not bool) then return; end;
								
								local preview = workspace:FindFirstChild('wireart preview');
								if (preview) then
									local wires_data = {};
									for _, wire in preview:GetChildren() do
										local wire_data = {
											name = wire.Name;
											color = wire.connector.Color;
											points = {};
										};

										for _, point in wire:GetChildren() do
											local name = point.Name;
											if (name ~= 'connector') then
												wire_data.points[tonumber(string_sub(name, 6))] = {Position = point.Position};
											end;
										end;

										table_insert(wires_data, wire_data);
									end;

									preview:Destroy();
									for _, wire_data in wires_data do
										if (not flags.wireart_build.bool or unhooked) then break; end;

										local wire_drum;
										for _, item in grabable:GetChildren() do
											if (item.Name == 'Wire Drum' and (not item:FindFirstChild('Owner') or not item.Owner.Value)) then
												wire_drum = item;
											end;
										end;

										if (not wire_drum) then
											wire_drum = grabable:FindFirstChild('Wire Drum');
										end;

										if (wire_drum) then
											local wire_name = wire_data.name;
											local wire_color = wire_data.color;

											for _, plot in workspace.Plots:GetChildren() do
												if (plot.Owner.Value ~= client) then continue; end;

												local hook; hook = plot.Wiring.ChildAdded:Connect(function(wire)
													repeat fwait(); until (wire:FindFirstChild('P1'));
													fwait(0.5);

													local can_continue = true;
													for _, point in wire:GetChildren() do
														if (point:IsA('BasePart') and string_sub(point.Name, 1, 1) == 'P') then
															local found = wire_data.points[tonumber(string_sub(point.Name, 2))];
															if (not found or point.Position ~= found.Position) then
																can_continue = false;
															end;
														end;
													end;
													if (not can_continue) then return; end;

													hook:Disconnect();

													local paint_gun = character:FindFirstChild('Paint Gun');
													if (not paint_gun) then
														paint_gun = backpack:FindFirstChild('Paint Gun');
														if (paint_gun) then
															paint_gun.Parent = character;
														end;
													end;

													if (paint_gun) then
														fire_server(paint_gun.Paint, wire, wire_color);
													end;

													if (wire_name == 'Neon Wire') then
														local found;
														for _, item in grabable:GetChildren() do
															if (not found and item.Name == 'Lever' and item:FindFirstChild('Owner') and item.Owner.Value == client and not opened_boxes[item]) then
																found = true;
																opened_boxes[item] = true;
																fire_server(item.Part.Interact);

																local lever_cframe = (wire.P1.CFrame * cframe_new(0, 0, -1.2));
																local hook; hook = plot.Objects.ChildAdded:Connect(function(lever)
																	fwait(0.5);

																	if (lever.Name == 'Lever' and lever:GetPivot() == lever_cframe) then
																		hook:Disconnect();

																		repeat fwait(); until (lever:FindFirstChild('Hitbox'));
																		repeat fwait(); until (lever.Hitbox:FindFirstChild('Interact'));

																		fspawn(fire_server, lever.Hitbox.Interact);
																		fwait(1);
																		fspawn(fire_server, lever.Hitbox.Interact);
																		fwait(1);
																		fspawn(fire_server, lever.Hitbox.Interact);
																	end;
																end);

																table_insert(connections, hook);

																storage.Events.Placement.Place:InvokeServer({
																	{
																		Name = 'Lever';
																		CFrame = lever_cframe;
																		UnboxData = {
																			Name = 'Lever';
																			Box = item;
																		},
																		Size = vector3_new(1, 0.5, 2);
																	}
																});
															end;
														end;
													end;
												end);

												table_insert(connections, hook);
											end;

											storage.Events.Placement.PlaceWire:InvokeServer({
												Points = wire_data.points;
												Name = wire_name;
												UnboxData = {
													Name = wire_name;
													Box = wire_drum;
												};
											});
										end;
									end;
								end;
							end});

							group:button({text = 'Remove preview'; callback = function()
								local preview = workspace:FindFirstChild('wireart preview');
								if (preview) then
									preview:Destroy();
								end;
							end});

							local function update_wireart_position()
								local preview = workspace:FindFirstChild('wireart preview');
								if (preview) then
									local position = (character:GetPivot().Position + vector3_new(0, flags.wireart_y_offset, 0));
									preview:PivotTo(cframe_new(position, position + preview:GetPivot().LookVector));
								end;
							end;

							group:button({text = 'Bring art preview'; callback = update_wireart_position});

							local function update_wireart_rotation()
								local preview = workspace:FindFirstChild('wireart preview');
								if (preview) then
									preview:PivotTo(cframe_new(preview:GetPivot().Position) * cframe_angles(math_rad(flags.wireart_rotation_x), math_rad(flags.wireart_rotation_y), math_rad(flags.wireart_rotation_z)));
								end;
							end;

							group:slider({flag = 'wireart_y_offset'; text = 'Art Y offset'; min = -100; max = 100; float = 1; default = 0; suffix = 'st'; callback = update_wireart_position});
							group:slider({flag = 'wireart_scale'; text = 'Art scale'; min = 0; max = 10; float = 100; default = 1; suffix = 'x'; callback = function(value)
								local preview = workspace:FindFirstChild('wireart preview');
								if (preview) then
									preview:ScaleTo(value);

									for _, part in preview:GetDescendants() do
										if (not part:IsA('BasePart')) then continue; end;
	
										part.Size = (
											(part.Name == 'connector') and vector3_new(part.Size.X, 0.2, 0.2)
											or vector3_new(0.3, 0.3, 0.3)
										);
									end;
								end;
							end});
							
							group:slider({flag = 'wireart_rotation_x'; text = 'Art rotation X'; min = 0; max = 360; float = 1; default = 0; suffix = '°'; callback = update_wireart_rotation});
							group:slider({flag = 'wireart_rotation_y'; text = 'Art rotation Y'; min = 0; max = 360; float = 1; default = 0; suffix = '°'; callback = update_wireart_rotation});
							group:slider({flag = 'wireart_rotation_z'; text = 'Art rotation Z'; min = 0; max = 360; float = 1; default = 0; suffix = '°'; callback = update_wireart_rotation});
						end;
					end;
				end;
			end;

			local tab = window:tab({name = 'Miscellaneous'; icon = 'rbxassetid://79410569781990'; type = 'normal'});
			do
				local group = tab:group('Miscellaneous');
				do
					local section = group:section({icon = 'rbxassetid://128179639942125'; text = 'Security'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'name_protection'; text = 'Name Protection [visual]'; callback = function()
								update_name_protection();
							end});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'mod_notify'; text = 'Mod Notify'; default = true; callback = function(bool)
								mod_notify.Visible = bool;
			
								if (bool) then
									if (#mods > 0) then
										local final = 'mod/mods found: ';
			
										for _, mod in mods do
											final = (final .. mod.Name);
										end;
										
										mod_notify.Text = final;
									else
										mod_notify.Visible = false;
									end;
								end;
							end});

							group:toggle({flag = 'antimod'; text = 'Leave when mod joins'});
						end;
					end;

					local section = group:section({icon = 'rbxassetid://129513028422814'; text = 'Fun'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'aimbot_enabled'; text = 'Aimbot'});
							group:dropdown({flag = 'aimbot_type'; text = 'Type'; default = 'Default'; options = {'Default'; 'Silent'}});
							group:slider({flag = 'aimbot_fov'; text = 'FOV'; min = 0; max = 500; float = 1; default = 1; suffix = 'px'});
							group:dropdown({flag = 'aimbot_target'; text = 'Target'; multi = true; default = {'Ores'; 'Trees'}; options = {'Ores'; 'Trees'}});
						end;
					end;

					local section = group:section({icon = 'rbxassetid://96864085009980'; text = 'Other'; divider = 1});
					do
						local group = section:group(1);
						do
							group:toggle({flag = 'item_tp_fix'; text = 'Item TP Fix'; default = false});
							group:toggle({flag = 'item_tp_fix_2'; text = 'Item TP Fix 2'; default = true});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'autobring_ores'; text = 'Auto-Bring Ores'; callback = function(bool)
								if (bool) then
									repeat fwait(); until (character);
			
									auto_bring_ore_point:PivotTo(character:GetPivot());
									auto_bring_ore_point.Transparency = 0;
								else
									auto_bring_ore_point.Transparency = 1;
								end;
							end});
							group:toggle({flag = 'autobring_trees'; text = 'Auto-Bring Trees'; callback = function(bool)
								if (bool) then
									repeat fwait(); until (character);
			
									auto_bring_tree_point:PivotTo(character:GetPivot());
									auto_bring_tree_point.Transparency = 0;
								else
									auto_bring_tree_point.Transparency = 1;
								end;
							end});
							group:toggle({flag = 'autobring_leaves'; text = 'Auto-Bring Leaves'; callback = function(bool)
								if (bool) then
									repeat fwait(); until (character);
			
									auto_bring_leaves_point:PivotTo(character:GetPivot());
									auto_bring_leaves_point.Transparency = 0;
								else
									auto_bring_leaves_point.Transparency = 1;
								end;
							end});
							group:toggle({flag = 'autobring_flowers'; text = 'Auto-Bring Flowers'; callback = function(bool)
								if (bool) then
									repeat fwait(); until (character);
			
									auto_bring_flower_point:PivotTo(character:GetPivot());
									auto_bring_flower_point.Transparency = 0;
								else
									auto_bring_flower_point.Transparency = 1;
								end;
							end});
						end;

						local group = section:group(1);
						do
							group:toggle({flag = 'autohit'; text = 'Auto-Hit'});
							group:slider({flag = 'autohit_percent'; text = 'Auto-Hit Percent'; min = 0; max = 100; float = 1; default = 100; suffix = '%'});
							group:toggle({flag = 'autocatch'; text = 'Auto-Catch'});
						end;

						local group = section:group(1);
						do
							group:slider({flag = 'points_offset_x'; text = 'Points Offset X'; min = -5; max = 5; float = 1; default = 0; suffix = 'st'});
							group:slider({flag = 'points_offset_y'; text = 'Points Offset Y'; min = -5; max = 5; float = 1; default = -1; suffix = 'st'});
							group:slider({flag = 'points_offset_z'; text = 'Points Offset Z'; min = -5; max = 5; float = 1; default = 0; suffix = 'st'});
							group:button({text = 'Apply offset to the points'; callback = function()
								for point, _ in points do
									point.Position += vector3_new(flags.points_offset_x, flags.points_offset_y, flags.points_offset_z);
								end;
							end});
						end;
					end;
				end;
			end;
			
			local tab = window:tab({name = 'Settings'; icon = 'rbxassetid://123909051282257'; type = 'settings'});
			do
				local group = tab:group('Settings');
				do
					local section = group:section({icon = ''; text = ''; divider = 2});
					do
						local group = section:group(1);
						do
							for index, color in window:get_colors() do
								group:colorpicker({flag = ('ui_color_' .. index); text = ('Color ' .. index); colors = {
									{color = color};
								}; callback = function(color)
									window:set_color(index, color);
								end});
							end;
						end;

						local group = section:group(2);
						do
							group:toggle({flag = 'show_gui'; text = 'Gui'; bind = {path = 'KeyCode'; name = 'LeftAlt'}; default = true; callback = function(bool)
								window:hide(not bool);
							end});
							group:button({text = 'Unhook'; callback = function()
								getgenv().eternal_unhook();
							end});
						end;

						local group = section:group(2);
						do
							group:toggle({flag = 'show_hotkeys'; text = 'Hotkeys'; callback = function(bool)
								hotkeys:hide(not bool);
							end});
						end;
					end;
				end;
			end;
		end;

		local aimbot_fov = drawing.new('circle'); aimbot_fov.zindex = 999999;
		local aimbot_target;

		-- ☆ //   autofarm   // ☆ --

		local search_progress = 1;
		fspawn(function()
			repeat
				if (flags.autofarm_search.bool and (flags.autofarm_ores.bool or flags.autofarm_trees.bool or flags.autofarm_leaves.bool or flags.autofarm_flowers.bool)) then
					local path = {};
					if (flags.autofarm_custom_search.bool) then
						for _, position in http:JSONDecode(readfile('eternal/games/Refinery Caves 2/data.json')).search_positions do
							table_insert(path, vector3_new(unpack(position)));
						end;
					else
						if (not flags.autofarm_ores.bool and not flags.autofarm_trees.bool and not flags.autofarm_leaves.bool and flags.autofarm_flowers.bool) then
							path = {
								vector3_new(126, -482, 1319);
								vector3_new(192, -481, 1605);
								vector3_new(77, -481, 1920);
								vector3_new(-92, -525, 1751);
								vector3_new(-196, -543, 1162);
								vector3_new(-132, -543, 2102);
								vector3_new(-24, -543, 2313);
								vector3_new(108, -481, 2084);
								vector3_new(169, -480, 1740);
							};
						else
							for _, position in locations do
								table_insert(path, position);
							end;
						end;
					end;

					if (path and #path >= 1) then
						local position = path[search_progress];
						if (not position) then
							search_progress = 1;
							position = path[1];
						end;

						teleport(position);
						fwait(flags.autofarm_search_wait / 2);
						if (flags.autofarm_search_spin.bool) then
							local count = 0;

							repeat
								teleport((cframe_new(position) * cframe_angles(0, math_round(count * (360 / flags.autofarm_search_spin_degree)), 0) * cframe_new(0, 0, flags.autofarm_search_spin_offset)).Position, 'Slow');
								count += 1;
								fwait();
							until (count >= flags.autofarm_search_spin_degree);
						end;
						fwait(flags.autofarm_search_wait / 2);
					end;

					search_progress += 1;
				end;

				if (flags.autofarm_ores.bool) then
					local old_position = character:GetPivot().Position;

					local ores = {};
					for _, ore in spawned_ores:GetChildren() do
						table_insert(ores, ore);
					end;
					for _, ore in hidden_ores:GetChildren() do
						table_insert(ores, ore);
					end;

					local farmed = 0;
					for _, ore in ores do
						if (
							flags.autofarm_ores.bool
							and (
								(
									not flags.autofarm_trees.bool
									and not flags.autofarm_leaves.bool
									and not flags.autofarm_flowers.bool
									and not flags.autofish.bool
								) or farmed == 0
							)
							and table_find(flags.autofarm_ores_selected, ore.Name)
							and ore:FindFirstChild('Hittable')
							and ore.Hittable:FindFirstChildWhichIsA('Instance')
						) then
							for _, part in ore.Hittable:GetChildren() do
								if (not flags.autofarm_ores.bool) then continue; end;
								if (ore.Name == 'AncientRune' and part.Name ~= 'Main') then continue; end;

								local done;
								fspawn(function()
									repeat
										if ((character:GetPivot().Position - ore:GetPivot().Position).Magnitude <= 20) then
											character:PivotTo(ore:GetPivot());
										end;

										fwait();
									until (done);
								end);

								repeat
									if (ore.Name == 'Cloudnite' and character.Humanoid.Health < 50) then
										teleport(locations['Cloudnite Entry']);
									else
										teleport(ore:GetPivot().Position);

										if (flags.autofarm_best_tool.bool) then
											take_best_tool('Pickaxe');
										end;

										mine(part);
										if (ore.Name == 'Voltshard' or ore.Name == 'Blastshard') then
											attack(65);
										else
											attack(100);
										end;

										fwait(0.7);
									end;
								until (not part or not part.Parent or not flags.autofarm_ores.bool);

								done = true;
							end;

							if (flags.autofarm_ores.bool) then
								fwait(flags.autofarm_item_tp_wait);
							end;

							farmed += 1;
						end;
					end;

					teleport(old_position);
				end;

				if (flags.autofarm_trees.bool) then
					local old_position = character:GetPivot().Position;

					local trees = {};
					for _, tree in spawned_trees:GetChildren() do
						table_insert(trees, tree);
					end;
					for _, tree in hidden_trees:GetChildren() do
						table_insert(trees, tree);
					end;

					local farmed = 0;
					for _, tree in trees do
						if (
							flags.autofarm_trees.bool
							and (
								(
									not flags.autofarm_ores.bool
									and not flags.autofarm_leaves.bool
									and not flags.autofarm_flowers.bool
									and not flags.autofish.bool
								) or farmed == 0
							)
							and table_find(flags.autofarm_trees_selected, tree.Name)
							and tree:FindFirstChild('Hittable')
							and tree.Hittable:FindFirstChildWhichIsA('Instance')
						) then
							for _, part in tree.Hittable:GetChildren() do
								if (not flags.autofarm_trees.bool) then continue; end;
								if (not part:IsA('Part') or not part.Anchored) then continue; end;

								local done;
								local goal = (tree:GetPivot() * cframe_new(0, -(part.Size.Y / 2), 0));
								fspawn(function()
									repeat
										if ((character:GetPivot().Position - goal.Position).Magnitude <= 20) then
											character:PivotTo(goal);
										end;

										fwait();
									until (done);
								end);

								repeat
									teleport(goal.Position);

									if (flags.autofarm_best_tool.bool) then
										take_best_tool('Axe');
									end;

									chop(part);
									attack(100);

									fwait(0.35);
								until (not part or not part.Parent or not flags.autofarm_trees.bool);

								done = true;
							end;

							if (flags.autofarm_trees.bool) then
								fwait(flags.autofarm_item_tp_wait * 0.75);

								for _, tree in grabable:GetChildren() do
									if (
										tree.Name == 'WoodPart'
										and not tree:GetAttribute('NoGrab')
										and (tree:GetPivot().Position - character:GetPivot().Position).Magnitude <= 15
									) then
										teleport(tree:GetPivot().Position);
										fspawn(bring, tree, tree_farm_point.CFrame);
									end;
								end;

								fwait(flags.autofarm_item_tp_wait * 0.25);
							end;

							farmed += 1;
						end;
					end;

					teleport(old_position);
				end;

				if (flags.autofarm_leaves.bool) then
					local old_position = character:GetPivot().Position;

					local trees = {};
					for _, tree in spawned_trees:GetChildren() do
						table_insert(trees, tree);
					end;
					for _, tree in hidden_trees:GetChildren() do
						table_insert(trees, tree);
					end;

					local farmed = 0;
					for _, tree in trees do
						if (
							flags.autofarm_leaves.bool
							and (
								(
									not flags.autofarm_ores.bool
									and not flags.autofarm_trees.bool
									and not flags.autofarm_flowers.bool
									and not flags.autofish.bool
								) or farmed == 0
							)
							and table_find(flags.autofarm_leaves_selected, tree.Name)
							and tree:FindFirstChild('Hittable')
							and tree.Hittable:FindFirstChildWhichIsA('Instance')
						) then
							for _, part in tree.Hittable:GetChildren() do
								if (not flags.autofarm_leaves.bool) then continue; end;
								
								for _, leaf in part:GetChildren() do
									if (leaf.Name == 'Leaf') then
										teleport(leaf:GetPivot().Position);

										if (not character:FindFirstChild('Scissors') and flags.autofarm_best_tool.bool) then
											local tool = client.Backpack:FindFirstChild('Scissors');
											if (tool) then
												tool.Parent = character;
											end;
										end;

										local tool = character:FindFirstChild('Scissors');
										if (tool) then
											fire_server(tool.Cut, leaf);
										end;
									end;
								end;
							end;

							fwait(flags.autofarm_item_tp_wait);
							farmed += 1;
						end;
					end;

					teleport(old_position);
				end;

				if (flags.autofarm_flowers.bool) then
					local old_position = character:GetPivot().Position;

					local ores = {};
					for _, ore in spawned_ores:GetChildren() do
						table_insert(ores, ore);
					end;
					for _, ore in hidden_ores:GetChildren() do
						table_insert(ores, ore);
					end;

					local farmed = 0;
					for _, grass in ores do
						if (
							flags.autofarm_flowers.bool
							and (
								(
									not flags.autofarm_ores.bool
									and not flags.autofarm_trees.bool
									and not flags.autofish.bool
								) or farmed == 0
							)
							and grass.Name == 'Flower Grass'
							and grass:FindFirstChild('Flower')
						) then
							local flower = grass.Flower;
							teleport(flower:GetPivot().Position);
							fire_server(flower.Hitbox.Interact);
							fwait(flags.autofarm_item_tp_wait);
							farmed += 1;
						end;
					end;

					teleport(old_position);
				end;

				if (flags.autofish.bool) then
					local old_position = character:GetPivot().Position;

					if (flags.autofarm_best_tool.bool) then
						take_best_tool('Fishing Rod');
					end;

					local goal = fishing_zones[flags.autofish_zone];
					if (goal ~= vector3_zero) then
						teleport(goal);
					else
						local dust_puddle = get_closest_dust_puddle();
						if (dust_puddle) then
							goal = dust_puddle:GetPivot().Position;
							teleport(goal);
						else
							goal = (character['Left Leg']:GetPivot().Position - (character['Left Leg'].Size / 2));
						end;
					end;

					local rod_name = 'Dune Fishing Rod';
					local dune_rod = (character:FindFirstChild(rod_name) or backpack:FindFirstChild(rod_name));
					if (dune_rod and not get_closest_dust_puddle()) then
						local need_swaping = (dune_rod.Parent == backpack);
						local prev_rod = (character:FindFirstChildWhichIsA('Tool'));
						if (need_swaping) then
							prev_rod.Parent = backpack;
							fwait(0.6);
							dune_rod.Parent = character;
						end;

						fish();

						local dust_puddle;
						local timed = tick();
						repeat
							fwait(0.1);
							dust_puddle = get_closest_dust_puddle();
						until (dust_puddle or ((tick() - timed) >= 1.5));

						if (need_swaping) then
							dune_rod.Parent = backpack;
							fwait(0.6);
							prev_rod.Parent = character;
						end;

						if (dust_puddle) then
							goal = dust_puddle:GetPivot().Position;
						end;
						fwait(0.6);
					end;

					fish(goal);
					attack(100);

					repeat fwait(); until (
						not character:FindFirstChildWhichIsA('Tool')
						or character:FindFirstChildWhichIsA('Tool'):FindFirstChild('_Bobber')
						or not flags.autofish.bool
					);

					repeat fwait(); until (
						not character:FindFirstChildWhichIsA('Tool')
						or not character:FindFirstChildWhichIsA('Tool'):FindFirstChild('_Bobber')
						or not flags.autofish.bool
					);

					if (flags.autofish.bool) then
						for _, drop in character:GetChildren() do
							if (drop:FindFirstChild('_CatchWeld')) then
								local goal;
								if (flags.autofish_filter_mode == 'Blacklist' and table_find(flags.autofish_filter, drop.Name)) then
									goal = vector3_new(3000, 1000, 3000);
								else
									goal = ((autofish_point.Transparency ~= 1) and autofish_point.Position or old_position);
								end;

								teleport(goal);
								for _, tool in character:GetChildren() do
									if (tool.ClassName == 'Tool') then
										tool.Parent = backpack;
										fwait(0.6);
										tool.Parent = character;
										break;
									end;
								end;
							end;
						end;

						fwait(0.5);
					end;

					teleport(old_position);
				end;

				fwait();
			until (unhooked);
		end);

		-- ☆ //   fps independent loop   // ☆ --

		loops = {
			{
				delay = 0.01;
				loop = LPH_NO_VIRTUALIZE(function()
					if (flags.fly.bool and humanoid) then
						local target;
						if (humanoid.SeatPart and humanoid.SeatPart:FindFirstAncestorWhichIsA('Model')) then
							target = humanoid.SeatPart:FindFirstAncestorWhichIsA('Model');

							for _, part in target:GetDescendants() do
								if (part:IsA('BasePart')) then
									part.Velocity = vector3_zero;
								end;
							end;
						else
							target = character.PrimaryPart;
							target.Velocity = vector3_zero;
						end;

                        local speed = flags.fly_speed;
                        local x, y, z = camera.CFrame:ToOrientation();
						local result = (cframe_new(target:GetPivot().Position) * cframe_angles(0, y, z)) * cframe_new(0, 0.01, 0);

						if (not uis:GetFocusedTextBox()) then 
							if (uis:IsKeyDown(Enum.KeyCode.Space) or uis:IsKeyDown(Enum.KeyCode.E)) then
								result *= cframe_new(0, speed, 0);
							end;

							if (uis:IsKeyDown(Enum.KeyCode.W)) then
								result *= cframe_new(0, 0, -speed);
							end;

							if (uis:IsKeyDown(Enum.KeyCode.A)) then
								result *= cframe_new(-speed, 0, 0);
							end;

							if (uis:IsKeyDown(Enum.KeyCode.S)) then
								result *= cframe_new(0, 0, speed);
							end;

							if (uis:IsKeyDown(Enum.KeyCode.D)) then
								result *= cframe_new(speed, 0, 0);
							end;

							if (uis:IsKeyDown(Enum.KeyCode.LeftShift) or uis:IsKeyDown(Enum.KeyCode.Q)) then
								result *= cframe_new(0, -speed, 0);
							end;
						end;

						target:PivotTo(result);
                    end;
				end);
			};
		};

		-- ☆ //   other loops   // ☆ --

		fspawn(function()
			repeat
				if ((flags.fly.bool and flags.fly_bypass.bool and humanoid and not humanoid.SeatPart) or flags.anti_blacklist.bool) then
					bypass_antitp();

					local last;
					local last_tick = tick();
					while (fwait()) do
						if ((tick() - last_tick) >= 3) then
							break;
						end;

						local triggers = {
							vector3_new(2409, -523, 1723);
							(flags.anti_blacklist.bool and vector3_new(1267, 31, -631) or nil);
						};

						local pivot = character:GetPivot();
						local cooked = antitp_trigger_check(triggers);

						if (not cooked) then
							last = pivot;
						end;

						if (
							unhooked
							or cooked
							or not ((flags.fly.bool and flags.fly_bypass.bool and humanoid and not humanoid.SeatPart) or flags.anti_blacklist.bool)
						) then
							if (not unhooked and not cooked) then
								while (fwait()) do
									local pivot = character:GetPivot();
									local cooked = antitp_trigger_check(triggers);
			
									if (not cooked) then
										last = pivot;
									end;

									if (unhooked or cooked) then
										break;
									end;
								end;
							end;
							
							break;
						end;
					end;

					if (last) then
						character:PivotTo(last);
					end;
				end;

				fwait();
			until (unhooked);
		end);

		-- ☆ //   hooks   // ☆ --

		if (game.name == 'Refinery Caves 2') then
			table_insert(connections, workspace.Vehicles.ChildAdded:Connect(function(model)
				repeat fwait(); until (model:FindFirstChild('Owner'));

				if (flags.vehicle_searcher_enabled.bool and (not model.Owner.Value or model.Owner.Value == client)) then
					repeat fwait(); until (model:FindFirstChild("Configuration"));
					repeat fwait(); until (model.Configuration:FindFirstChild("Data"));
					repeat fwait(); until (model.Configuration.Data:FindFirstChild("Skin"));
					repeat fwait(); until (model.Configuration.Data:FindFirstChild("Color"));

					local color_filter = table_find(flags.vehicle_searcher_color, model.Configuration.Data.Color.Value);
					local skin_filter = table_find(flags.vehicle_searcher_skin, model.Configuration.Data.Skin.Value);

					if (flags.vehicle_searcher_color_enabled.bool and flags.vehicle_searcher_skin_enabled.bool) then
						if (flags.vehicle_searcher_or.bool) then
							if (color_filter or skin_filter) then
								vehicle_spawned = true;
							end;
						else
							if (color_filter and skin_filter) then
								vehicle_spawned = true;
							end;
						end;
					elseif (flags.vehicle_searcher_color_enabled.bool) then
						vehicle_spawned = color_filter;
					elseif (flags.vehicle_searcher_skin_enabled.bool) then
						vehicle_spawned = vehicle_spawned;
					end;
				end;
			end));

			local usergui;
			local function hook_usergui(screen)
				if (not screen) then return; end;

				usergui = screen;
				table_insert(connections, usergui.CatchFrame:GetPropertyChangedSignal('Visible'):Connect(function()
					if (usergui.CatchFrame.Visible) then
						fire_server(storage.Events.Tools.ChangeFishPull, 'Right');
					end;
				end));

				local function hook_fish(fish)
					table_insert(connections, fish:GetPropertyChangedSignal('Rotation'):Connect(function()
						if (flags.autofish.bool or flags.autocatch.bool) then
							local side;

							local rotation = fish.Rotation;
							if (rotation == 0) then
								side = 'Left';
							elseif (rotation == 90) then
								side = 'Top';
							elseif (rotation == 180 or rotation == (-180)) then
								side = 'Right';
							elseif (rotation == 270 or rotation == (-90)) then
								side = 'Bottom';
							end;

							if (side) then
								fire_server(storage.Events.Tools.ChangeFishPull, {Side = side});
							end;
						end;
					end));
				end;

				hook_fish(usergui.CatchFrame.Fish);
			end;

			hook_usergui(client.PlayerGui:FindFirstChild('UserGui'));
			table_insert(connections, client.PlayerGui.ChildAdded:Connect(function(gui)
				if (not unhooked and gui.Name == 'UserGui') then
					hook_usergui(gui);
				end;
			end));

			for _, player in players:GetPlayers() do
				table_insert(connections, player.CharacterAdded:Connect(function(character)
					cache(character, player_cache);
				end));

				if (player.Character and player ~= client) then
					cache(player.Character, player_cache);
				end;
			end;

			local mods = {};
			table_insert(connections, players.PlayerAdded:Connect(function(player)
				table_insert(connections, player.CharacterAdded:Connect(function(character)
					cache(character, player_cache);
				end));

				local is_mod = false;
				local rank = player:GetRankInGroup(9486589);

				if (rank ~= 0 and rank ~= 1) then
					is_mod = true;
				end;

				if (flags.antimod.bool) then
					if (is_mod) then
						client:Kick('mod joined: @' .. player.Name);
					end;
				end;

				table_insert(mods, player);

				if (#mods > 0) then
					local final = 'mod/mods found: ';

					for _, mod in mods do
						final = final .. mod.Name;
					end;
					
					mod_notify.Text = final;
				else
					mod_notify.Visible = false;
				end;
			end));

			table_insert(connections, players.PlayerRemoving:Connect(function(player)
				local found = table_find(mods, player);
				if (found) then
					table_remove(mods, found);
				end;

				if (#mods > 0) then
					local final = 'mod/mods found: ';

					for _, mod in mods do
						final = final..mod.Name;
					end;
					
					mod_notify.Text = final;
				else
					mod_notify.Visible = false;
				end;
			end));

			table_insert(connections, grabable.ChildAdded:Connect(LPH_NO_VIRTUALIZE(function(item)
				fwait(); fwait(); fwait();
				if (not item or not character) then return; end;
				if (not item:FindFirstChild('Owner') or (item.Owner.Value ~= nil and item.Owner.Value ~= client)) then return; end;
	
				wait_until_items_teleported();
	
				if ((item:GetPivot().Position - character:GetPivot().Position).Magnitude <= 50) then
					if (item.Name == 'MaterialPart' and item:FindFirstChild('Configuration') and item.Configuration:FindFirstChild('Data') and item.Configuration.Data:FindFirstChild('MaterialString') and string_find(item.Configuration.Data.MaterialString.Value, 'Leaf')) then
						if (flags.autofarm_leaves.bool and leaf_farm_point.Transparency ~= 1) then
							bring(item, leaf_farm_point.CFrame);
						end;
	
						if (not flags.autofarm_leaves.bool and flags.autobring_leaves.bool and auto_bring_leaves_point.Transparency ~= 1) then
							bring(item, auto_bring_leaves_point.CFrame);
						end;
					elseif (item.Name == 'MaterialPart' or string_find(item.Name, 'RuneStone')) then
						if (flags.autofarm_ores.bool and ore_farm_point.Transparency ~= 1) then
							bring(item, ore_farm_point.CFrame);
						end;
	
						if (not flags.autofarm_ores.bool and flags.autobring_ores.bool and auto_bring_ore_point.Transparency ~= 1) then
							bring(item, auto_bring_ore_point.CFrame);
						end;
					elseif (item.Name == 'Zan Flower') then
						if (flags.autofarm_flowers.bool and flower_farm_point.Transparency ~= 1) then
							bring(item, flower_farm_point.CFrame);
						end;
	
						if (not flags.autofarm_flowers.bool and flags.autobring_flowers.bool and auto_bring_flowers_point.Transparency ~= 1) then
							bring(item, auto_bring_flowers_point.CFrame);
						end;
					elseif (item.Name == 'WoodPart' and not item:GetAttribute('NoGrab')) then
						if (not flags.autofarm_trees.bool and flags.autobring_trees.bool and auto_bring_tree_point.Transparency ~= 1) then
							bring(item, auto_bring_tree_point.CFrame);
						end;
					end;
				end;
			end)));
		elseif (game.name == 'Oaklands') then
			local module = require(first.Client); internal.main = module;
			local send = module.TellServer; module.TellServer = function(self, name, args)
				if (not unhooked) then
					if (
						name == 'BackpackEquipTool'
						or name == 'BackpackUnequipTool'
						or name == 'BackpackDropTool'
						or name == 'BackpackTellServer'
					) then
						if (args.UUID == '0') then
							return;
						end;
					end;

					warn(name, (args and '::' or ''));
					for i,v in (args or {}) do
						warn(
							i, typeof(i),
							'==',
							v, typeof(v)
						);
					end;
				end;

				return send(self, name, args);
			end;

			local module = require(first.Client.Player.Storage.Backpack); internal.backpack = module;
			--RefreshToolList
		end;

		local debounce;
		table_insert(connections, run.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function(ndt)

			-- ☆ //   indexing   // ☆ --

			debounce = not debounce;

			backpack = client.Backpack;
			character = client.Character;
			humanoid = (character and character:FindFirstChild('Humanoid'));

			-- ☆ //   client   // ☆ --

			if (game.name == 'Oaklands') then
				local modules = internal.main.ActiveModules;
				local tools = modules.Backpack.BackpackTools;

				--[[if (not tools['0']) then
					tools['0'] = {
						Name = 'teleport tool';
						UUID = '0';
						_Maid = modules.Backpack._Maid.new();
						Client = internal.main;
						Backpack = modules.Backpack;
						Inventory = modules.Backpack;
					};
				end;

				for i,v in tools do
					--print(i,typeof(i),v);
					for i,v in v do
						--print('-',i,v);
					end;
				end;]]
			else
				for _, barrier in workspace.MouseIgnore.Barriers:GetChildren() do
					barrier.CanCollide = (not flags.anti_blacklist.bool);
				end;
			end;

			if (character) then
				if (flags.noclip.bool) then
					for _, part in character:GetDescendants() do
						if (part:IsA('BasePart')) then
							if (not noclipped_parts[part]) then
								noclipped_parts[part] = part.CanCollide;
							end;

							part.CanCollide = false;
						end;
					end;
				else
					for part, old_value in noclipped_parts do
						part.CanCollide = old_value;
						noclipped_parts[part] = nil;
					end;
				end;
			end;

			if (not teleport_tool) then
				teleport_tool = draw('Tool');
				teleport_tool.Name = 'teleport tool';
			end;

			if (character and humanoid and humanoid.Health > 0 and flags.tp_tool.bool) then
				local parent = teleport_tool.Parent;

				if (parent ~= character and parent ~= backpack) then
					teleport_tool.Parent = backpack;
				end;
			else
				teleport_tool.Parent = nil;
			end;

			if (humanoid) then
				if (game.name ~= 'Refinery Caves 2' or not uis:IsKeyDown(Enum.KeyCode.LeftShift)) then
					humanoid.WalkSpeed = (
						flags.speedhack.bool and flags.speedhack_speed
						or 16
					);
				end;

				humanoid.JumpPower = (
					flags.jumphack.bool and flags.jumphack_power
					or 50
				);

				local bar = (client.PlayerGui:FindFirstChild('InterfaceGui') and client.PlayerGui.InterfaceGui:FindFirstChild('PowerBar'));
                if (bar and bar.Visible and flags.autohit.bool) then
					bar.Visible = false;
					attack(flags.autohit_percent);
				end;
			end;

			-- ☆ //   visuals   // ☆ --

			if ((flags.item_select.bool or flags.vehicle_searcher_select.bool) and last_click and mouse_down) then
				local mouse_location = uis:GetMouseLocation();
				local inset = guis:GetGuiInset();
				mouse_location = vector2_new(mouse_location.X - inset.X, mouse_location.Y - inset.Y);

				selection_frame.BackgroundColor3 = window:get_colors()[1];
				selection_frame.Position = udim2_fromoffset(last_click.X, last_click.Y);
				selection_frame.Size = udim2_fromoffset(mouse_location.X - last_click.X, mouse_location.Y - last_click.Y);
				selection_frame.Visible = true;
			else
				selection_frame.Visible = false;
			end;

			if (flags.full_bright.bool) then
				animate(lighting, tweeninfo_new(0), {Brightness = 4});
				animate(lighting, tweeninfo_new(0), {ClockTime = 14});
				animate(lighting, tweeninfo_new(0), {FogEnd = 100000});
				lighting.GlobalShadows = false;
				animate(lighting, tweeninfo_new(0), {OutdoorAmbient = color3_fromrgb(128, 128, 128)});
			end;

			local usergui = client.PlayerGui:FindFirstChild('UserGui');
			if (usergui) then
				usergui.Topbar.Frame.Clock.Visible = flags.free_clock.bool;
			end;

			if (flags.set_time.bool) then
				animate(lighting, tweeninfo_new(0), {ClockTime = flags.time});
			end;

			local target_player = players:FindFirstChild(flags.player_to_spectate);
			local target_character = (target_player and target_player.Character);
			local target_humanoid = (target_character and target_character:FindFirstChild('Humanoid'));
			if (flags.spectate_player.bool) then
				camera.CameraSubject = target_humanoid;
			elseif (humanoid) then
				camera.CameraSubject = humanoid;
			end;

			if (flags.ores_esp_enabled.bool) then
				for _, ore in spawned_ores:GetChildren() do
					if (table_find(flags.ores_esp_selected, ore.Name)) then
						cache(ore, ore_cache);
					end;
				end;
	
				for _, ore in hidden_ores:GetChildren() do
					if (table_find(flags.ores_esp_selected, ore.Name)) then
						cache(ore, ore_cache);
					end;
				end;

				for index, data in ore_cache do
					local object = data.object;

					if (object and object:FindFirstChildWhichIsA('Instance')) then
						if (table_find(flags.ores_esp_selected, object.Name)) then
							local material = materials:FindFirstChild(object.Name);
							data.text.TextColor3 = (material and material.Color or color3_fromrgb(255, 255, 255));
							data.esp.Enabled = true;
						else
							ore_cache[index] = nil;
							data.esp:Destroy();
						end;
					else
						ore_cache[index] = nil;
						data.esp:Destroy();
					end;
				end;
			else
				for index, data in ore_cache do
					local esp = data.esp;

					if (esp) then
						esp:Destroy();
					end;

					ore_cache[index] = nil;
				end;
			end;

			if (flags.trees_esp_enabled.bool) then
				for _, tree in spawned_trees:GetChildren() do
					if (table_find(flags.trees_esp_selected, tree.Name)) then
						cache(tree, tree_cache);
					end;
				end;
	
				for _, tree in hidden_trees:GetChildren() do
					if (table_find(flags.trees_esp_selected, tree.Name)) then
						cache(tree, tree_cache);
					end;
				end;

				for index,data in tree_cache do
					local object = data.object;
	
					if (object and object:FindFirstChildWhichIsA('Instance')) then
						if (table_find(flags.trees_esp_selected, object.Name)) then
							local material = materials:FindFirstChild(object.Name .. ' Wood') or materials:FindFirstChild(object.Name);
							data.text.TextColor3 = (material and material.Color or color3_fromrgb(255, 255, 255));
							data.esp.Enabled = true;
						else
							tree_cache[index] = nil;
							data.esp:Destroy();
						end;
					else
						tree_cache[index] = nil;
						data.esp:Destroy();
					end;
				end;
			else
				for index, data in tree_cache do
					local esp = data.esp;

					if (esp) then
						esp:Destroy();
					end;

					tree_cache[index] = nil;
				end;
			end;

			for index, data in player_cache do
				local object = data.object;

				if (object and object:FindFirstChildWhichIsA('Instance')) then
					data.text.Text = '@'..object.Name;
					data.esp.Enabled = flags.players_esp.bool;
				else
					ore_cache[index] = nil;
					data.esp:Destroy();
				end;
			end;

			-- ☆ //   miscellaneous   // ☆ --

			if (flags.aimbot_enabled.bool) then
				local center = uis:GetMouseLocation();
				local fov = flags.aimbot_fov;
				local type = flags.aimbot_type;

				local closest;
				local mag = math_huge;

				if (table_find(flags.aimbot_target, 'Ores')) then
					for _, ore in spawned_ores:GetChildren() do
						local hittables = ore:FindFirstChild('Hittable');
						if (not hittables) then continue; end;

						for _, part in hittables:GetChildren() do
							local vector, is_on_screen = camera:WorldToViewportPoint(part:GetPivot().Position);
							if (not is_on_screen) then continue; end;

							local nmag = (vector2_new(vector.x, vector.y) - center).Magnitude;
							if ((not closest or nmag < mag) and nmag <= fov and (type ~= 'Silent' or (ore:GetPivot().Position - character:GetPivot().Position).Magnitude <= 10)) then
								closest = part;
								mag = nmag;
							end;
						end;
					end;
				end;

				aimbot_target = closest;

				aimbot_fov.visible = true;
				aimbot_fov.position = center;
				aimbot_fov.radius = fov;
				aimbot_fov.color = color3_fromrgb(255, 255, 255);

				if (closest) then
					if (type == 'Default') then
						camera.CFrame = cframe_new(camera.CFrame.Position, closest:GetPivot().Position);
					elseif (type == 'Silent' and mouse_click) then
						mine(closest);
					end;
				end;
			else
				aimbot_fov.visible = false;
			end;

			mouse_click = false;
		end)));

		table_insert(connections, uis.InputBegan:Connect(LPH_NO_VIRTUALIZE(function(input)
			if (uis:GetFocusedTextBox()) then return; end;

			local input_type = input.UserInputType;
			local key = input.KeyCode;

			if (input_type == Enum.UserInputType.MouseButton1 or input_type == Enum.UserInputType.Touch) then
				mouse_click = true;
				mouse_down = true;

				if (flags.item_select.bool or flags.vehicle_searcher_select.bool) then
					last_click = vector2_new(input.Position.X, input.Position.Y);
				end;

				if (character) then
					if (teleport_tool.Parent == character and mouse.Target) then
						teleport(mouse.Hit.Position + vector3_new(0, 5, 0));
					end;
				end;
			end;
		end)));

		table_insert(connections, uis.InputEnded:Connect(LPH_NO_VIRTUALIZE(function(input)
			local input_type = input.UserInputType;
			local key = input.KeyCode;

			if (input_type == Enum.UserInputType.MouseButton1 or input_type == Enum.UserInputType.Touch) then
				local inset = guis:GetGuiInset();

				local x = selection_frame.AbsolutePosition.X + inset.X;
				local y = selection_frame.AbsolutePosition.Y + inset.Y;

				local x_size = selection_frame.AbsoluteSize.X;
				local y_size = selection_frame.AbsoluteSize.Y;
				
				if (selection_frame.Visible) then
					local container;
					local models = {};
					if (flags.vehicle_searcher_select.bool) then
						for _, plot in workspace.Plots:GetChildren() do
							for _, object in plot.Objects:GetChildren() do
								if (string_find(object.Name, 'Spawner') or (
									object:FindFirstChild('Unlink')
									and object:FindFirstChild('Button')
									and object:FindFirstChild('Input')
								)) then
									local vector, is_on_screen = camera:WorldToViewportPoint(item:GetPivot().Position);
									table_insert(models, {model = item; vector = vector; is_on_screen = is_on_screen});

									container = selected_items;
								end;
							end;
						end;
					elseif (flags.item_select.bool) then
						for _, item in grabable:GetChildren() do
							if (flags.item_select_filter.bool and not table_find(flags.item_select_filter_items, item.Name)) then continue; end;

							local vector, is_on_screen = camera:WorldToViewportPoint(item:GetPivot().Position);
							table_insert(models, {model = item; vector = vector; is_on_screen = is_on_screen});

							container = selected_items;
						end;
					end;

					for _, data in models do
						local model = data.model;
						local vector = data.vector;
						local is_on_screen = data.is_on_screen;

						if (model and container and vector and is_on_screen
							and (vector.X > 0 and (vector.X > x and vector.X < (x + x_size)) or (vector.X < x and vector.X > (x + x_size)))
							and (vector.Y > 0 and (vector.Y > y and vector.Y < (y + y_size)) or (vector.Y < y and vector.Y > (y + y_size)))
						) then
							if (not container[model]) then
								container[model] = visual_add_selection(model);
							else
								container[model]:Destroy();
								container[model] = nil;
							end;
						end;
					end;
				end;
				
				mouse_down = false;
			end;
		end)));

		table_insert(connections, roblox.DescendantAdded:Connect(LPH_NO_VIRTUALIZE(function(instance)
			if (not unhooked and instance.Name == '_B_Quick') then
				instance.Visible = false;
			end;
		end)));

		local debounce;
		table_insert(connections, uis.JumpRequest:Connect(LPH_NO_VIRTUALIZE(function()
			if (flags.inf_jump.bool and humanoid and not debounce) then
				debounce = true;
				humanoid:ChangeState('Jumping');
				fwait();
				debounce = false;
			end;
		end)));

		fspawn(function()
			local plot;
			repeat
				for _, model in workspace.Plots:GetChildren() do
					if (model.Owner.Value == client) then
						plot = model;
					end;
				end;

				fwait();
			until (plot);

			table_insert(connections, plot.Wiring.ChildAdded:Connect(function(wire)
				if (flags.wireart_draw.bool and wire.Name ~= 'Fake Wire' and wire.Name ~= 'Fake Neon Wire') then
					fwait(0.1);

					local fake_wire = wire:Clone();
					fake_wire.Name = ('Fake ' .. wire.Name);
					for _, part in wire:GetChildren() do
						local clone = part:Clone();
						clone.Parent = fake_wire;
					end;
					fake_wires[wire] = fake_wire;

					fire_server(storage.Events.Placement.Delete, {wire});
				end;
			end));

			table_insert(connections, plot.Wiring.ChildRemoved:Connect(function(wire)
				if (flags.wireart_draw.bool) then
					local fake_wire = fake_wires[wire];
					if (fake_wire) then
						fake_wire.Parent = plot.Wiring;

						fake_wires[wire] = nil;
						table_insert(fake_wires, fake_wire);
					end;
				end;
			end));
		end);

		-- ☆ //   meta-method hook   // ☆ --

		if (getrawmetatable) then
			local roblox_metatable = getrawmetatable(roblox);
			setreadonly(roblox_metatable, false);

			local __namecall = roblox_metatable.__namecall;
			roblox_metatable.__namecall = newcclosure(
				(game.name == 'Refinery Caves 2') and LPH_NO_VIRTUALIZE(function()
					return (function(self, ...)
						local method = getnamecallmethod();
						local name = self.Name;
						local args = {...};

						if (method == 'FireServer') then
							if (name == 'DamageMe' and flags.anti_drown.bool) then
								return;
							elseif (name == 'Delete' and (
								args[1][1].Name == 'Fake Wire'
								or args[1][1].Name == 'Fake Neon Wire'
							)) then
								return args[1][1]:Destroy();
							elseif (name == 'Paint' and (
								args[1].Name == 'Fake Wire'
								or args[1].Name == 'Fake Neon Wire'
							)) then
								for _, part in args[1]:GetDescendants() do
									if (part:IsA('BasePart')) then
										part.Color = args[2];
									end;
								end;

								return;
							end;
						elseif (method == 'InvokeServer') then
							if (name == 'Transform' and (
								args[1][1].Object.Name == 'Fake Wire'
								or args[1][1].Object.Name == 'Fake Neon Wire'
							)) then
								return args[1][1].Object:PivotTo(args[1][1].CFrame);
							elseif (name == 'PlaceWire' and flags.wireart_draw.bool) then
								local wire_name = ((flags.wireart_wire == 'Default Wire') and 'Wire' or flags.wireart_wire);
								args[1].Name = wire_name;
								args[1].UnboxData.Name = wire_name;
							end;
						end;

						return __namecall(self, ...);
					end);
				end)()

				or LPH_NO_VIRTUALIZE(function(self, ...)
					return __namecall(self, ...);
				end)
			);
			
			setreadonly(roblox_metatable, true);

			append_unhook(function()
				setreadonly(roblox_metatable, false);

				roblox_metatable.__namecall = __namecall;

				setreadonly(roblox_metatable, true);
			end);
		end;
	end;

	for _, data in loops do
		fspawn(LPH_NO_VIRTUALIZE(function()
			local last_answer = tick();
			local cap = 0;

			repeat
				cap += (tick() - last_answer);

				for i = 1, (cap / data.delay) do
					cap -= data.delay;
					data.loop();
				end;
				
				last_answer = tick();
				fwait();
			until (unhooked);
		end));
	end;
end)();